openapi: 3.0.3
info:
  title: Eclipse Kapua REST API
  version: '1.0'
  contact:
    name: Eclipse Kapua Dev Team
    url: 'https://eclipse.org/kapua'
    email: kapua-dev@eclipse.org
  license:
    name: Eclipse Public License 2.0
    url: 'https://www.eclipse.org/legal/epl-2.0'
  description: |
    # Introduction
    Eclipse Kapua exposes a comprehensive set of Web Service APIs for application integration purposes. The Eclipse Kapua REST API allows you to build applications that use Representational State Transfer HTTP calls to retrieve, modify, or publish platform data. For example through the APIs, you are able to access all the functionality of the Console or to control a device from your application built on top of Eclipse Kapua.

    The Eclipse Kapua platform conforms to standard REpresentational State Transfer (REST) protocol to expose its Application Programming Interfaces (API). REST has emerged over the past few years as a predominant Web service design model. REST-style architectures consist of clients and servers. Clients initiate requests to servers, while servers process requests and return appropriate responses. Requests and responses are built around the transfer of representations of resources. A resource can be essentially any coherent and meaningful concept that may be addressed. A representation of a resource is typically a document that captures the current or intended state of a resource.

    Eclipse Kapua RESTful APIs expose the standard action types (create, read, update, delete) over the platform objects. They are capable of retrieving a resource representation in XML or JSON format. You can use the REST HTTP Accept Header to specify the representation requested using the "application/xml" and "application/json" Media Types. As an alternative to the Accept header, you can specify the requested data representation by appending an ".xml" or ".json" suffix to the path part of your request URLs.

    For more details on the Eclipse Kapua REST APIs, please refer to:
    - [The Eclipse Kapua Documentation](https://www.eclipse.org/kapua/documentation.php)
    - [The Eclipse Kapua Code on github](https://github.com/eclipse/kapua)

    # Authentication
    All Eclipse Kapua REST API, except the Authentication endpoints that performs an Authentication, need an Authentication Token to be executed. You will retrieve such token as a response of one of the Authentication calls, in the form of a [JWT](https://jwt.io) as the value of the property `tokenId`. For every subsequent call, you need to pass such token in the `Authorization` HTTP Header, with the `Bearer` type.
servers:
  - description: Kapua REST API Endpoint hosted where this definition file is hosted
    url: /v1
  - description: Kapua REST API Endpoint custom
    url: '{scheme}://{host}:{port}/{basePath}'
    variables:
      scheme:
        default: https
        enum:
          - http
          - https
      host:
        description: Host name of the Kapua REST API Endpoint
        default: api.your-kapua-instance.com
      port:
        description: Port number of the Kapua REST API Endpoint
        default: '8080'
      basePath:
        description: The Base path of the Kapua REST API Endpoint
        default: v1
  - description: Localhost Docker Compose
    url: 'http://localhost:8081/v1'
paths:
  /authentication/user:
    post:
      tags:
        - Authentication
      summary: Login - User and Password
      operationId: authenticationUser
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    user:
                      $ref: '#/paths/~1authentication~1mfa/post/requestBody/content/application~1json/schema/properties/username'
                    password:
                      $ref: '#/paths/~1authentication~1mfa/post/requestBody/content/application~1json/schema/properties/password'
                    authenticationCode:
                      $ref: '#/paths/~1authentication~1mfa/post/requestBody/content/application~1json/schema/properties/authenticationCode'
                    trustKey:
                      $ref: '#/paths/~1authentication~1mfa/post/requestBody/content/application~1json/schema/properties/trustKey'
                    trustMe:
                      type: boolean
                      description: Whether to generate a TrustKey or not.
            examples:
              Admin:
                value:
                  username: kapua-sys
                  password: kapua-password
              MFA with AuthenticationCode:
                value:
                  username: kapua-sys
                  password: kapua-password
                  authenticationCode: 123456
                  trustMe: true
              MFA with TrustKey:
                value:
                  username: kapua-sys
                  password: kapua-password
                  trustKey: 4bba9938-aa8f-11ec-b909-0242ac120002
        required: true
      responses:
        '200':
          description: The new AccessToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessToken'
        '500':
          $ref: '#/components/responses/kapuaError'
      security: []
  /authentication/apikey:
    post:
      tags:
        - Authentication
      summary: Login - API Key
      operationId: authenticationApiKey
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKey:
                  type: string
                  format: base64
                  example: z8PEVr4XdBS/KKEKbVG9tJzj6DNNpSVCDpW53CWm
              required:
                - apiKey
      responses:
        '200':
          description: The new AccessToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessToken'
        '500':
          $ref: '#/components/responses/kapuaError'
      security: []
  /authentication/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh an AccessToken
      description: |
        Creates a new AccessToken from an existing (even if expired) AccessToken and a Refresh Token that must be still valid.
        Regardless of the expiration date, the AccessToken provided to the refresh operation WILL be invalidated
      operationId: authenticationRefresh
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  format: uuid
                tokenId:
                  $ref: '#/components/schemas/accessToken/allOf/1/properties/tokenId'
              required:
                - refreshToken
                - tokenId
            example:
              refreshToken: 15395d03-ccad-4aed-a57a-cd0e289e822c
              tokenId: eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJodHRwczovL3d3dy5lY2xpcHNlLm9yZy9rYXB1YSIsImlhdCI6MTYyMjQ3NDE1NCwiZXhwIjoxNjIyNDc0MTU0LCJzdWIiOiJBUSIsInNJZCI6IkFRIn0.cVHkdXKbAtiOPUj1tyUQi9mRiRV9e6CwQ9RMLmAoX1UCK-POZcusqgSvuaaDzDIe-WNUjsalYYqNquxync8bvOF8Bx84rS8BJlB3anxCIaXwi7_5E9ZjmOSgvNiwgDPFVQsRo9MaNTe07jb3TsT1BPR9zo-i9-OEada6o4nhyaBNrAw_vybA3aLp6hamUNP1vHLRhlq0tnHgtGtitCW1_VBt4Eh0b41Enfs7G7hWv0Sj2CfwVIwAQzJ55MV5tnTjuD-eOD5xxeQGlWTol4Yc40jmOKjo2kshJlEQRNkp6mFzJ3EJxE8nBWhbWO4hd36eI0rB8pHxSdsFDbVAcxyRM44K7YuLENCk2mdMRgv9d7CKUTujvPw5vCoa5IQY7E47rWszwKAF2xJBU8hYwI8BhQWbB6efAaB-lkzq4rCziBU5WzTDZlries4WqPqM9mgfIPjlHP4po2b-RAK-89E-FejOvNefNcXqvqt5QPiNwj9bdLmhXlO4ladZ-wKw-22AYbqVhhoffOYT2mdxqXGc9F9XsRnsNswzxUdejBF6war4XqqxsrcPoYoReLMGlR1piQ1dpcPQlY6p9qKlkpBGJFL3pnBLSSE0mj9_2-zDKmJ81stUr51yP17ky2GB3Ls5q4O8gD83CJjqZaW-6xNO5iJENr4UYK4AV7yzfWqLAI8
      responses:
        '200':
          description: The new AccessToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessToken'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      security: []
  /authentication/jwt:
    post:
      tags:
        - Authentication
      summary: Login - JWT
      operationId: authenticationJwt
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                jwt:
                  $ref: '#/components/schemas/accessToken/allOf/1/properties/tokenId'
              required:
                - jwt
      responses:
        '200':
          description: The new AccessToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessToken'
        '500':
          $ref: '#/components/responses/kapuaError'
      security: []
  /authentication/info:
    get:
      description: Returns all the Authentication and Authorization informations about the current session
      tags:
        - Authentication
      summary: Login Info
      operationId: authenticationLoginInfo
      responses:
        '200':
          description: An object conatining all the Authentication and Authorization informations about the current session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginInfo'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '500':
          $ref: '#/components/responses/kapuaError'
  /authentication/logout:
    post:
      tags:
        - Authentication
      summary: Logout
      operationId: authenticationLogout
      responses:
        '204':
          description: Logout Successful
        '401':
          $ref: '#/components/responses/unauthenticated'
        '500':
          $ref: '#/components/responses/kapuaError'
  /authentication/mfa:
    post:
      tags:
        - Authentication
      summary: 'MFA Login - User, Password and authenticationCode/trustKey'
      description: This resoruce is deprecated and will be removed in future releases. Please make use of /authentication/user and properties in UsernamePasswordCredentials.
      operationId: authenticationMfaUser
      parameters:
        - name: enableTrust
          in: query
          description: 'If true, the machine trust key is enabled for the MfaOption'
          schema:
            type: boolean
            default: false
          required: false
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: the username of the user
                  pattern: '^[a-zA-Z0-9\_\-]{3,}$'
                password:
                  type: string
                  description: the password of the user
                  pattern: '^.*(?=.{12,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!\"\#$%&''()*+,\-./:;<=>?@\[\]\\^_`{|}~]).*$'
                authenticationCode:
                  type: string
                  description: The MFA authentication code
                  pattern: '^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$'
                trustKey:
                  type: string
                  description: A long-lived key to be used within an authentication with MFA from a trusted machine
                  pattern: '^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$'
              required:
                - username
                - password
            examples:
              kapua-sys:
                description: Default kapua-sys login credentials (with dummy MFA)
                value:
                  username: kapua-sys
                  password: kapua-password
                  authenticationCode: 123456
      responses:
        '200':
          description: The new AccessToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessToken'
        '500':
          $ref: '#/components/responses/kapuaError'
      security: []
  '/{scopeId}/accessinfos':
    get:
      tags:
        - Access Info
      summary: Get all the AccessInfo
      operationId: accessInfoList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: userId
          in: query
          description: The ID of the User to use as a filter in the query
          schema:
            allOf:
              - $ref: '#/components/schemas/kapuaId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the AccessInfo objects available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessInfoListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Access Info
      summary: Create an AccessInfo
      operationId: accessInfoCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: The AccessInfoCreator object to create the new AccessInfo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accessInfoCreator'
        required: true
      responses:
        '201':
          description: The AccessInfo that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessInfoListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accessinfos/{accessInfoId}':
    get:
      tags:
        - Access Info
      summary: Get a single AccessInfo
      operationId: accessInfoGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - description: The ID of the AccessInfo on which to perform the operation
          name: accessInfoId
          in: path
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired AccessInfo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessInfo'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Access Info
      summary: Delete a single AccessInfo
      operationId: accessInfoDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
      responses:
        '204':
          description: The AccessInfo has been deleted
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accessinfos/_count':
    post:
      tags:
        - Access Info
      summary: Count the AccessInfos
      operationId: accessInfoCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accessinfos/_query':
    post:
      tags:
        - Access Info
      summary: Query the AccessInfos
      operationId: accessInfoQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessInfoListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accessinfos/{accessInfoId}/permissions':
    get:
      tags:
        - Access Permission
      summary: Get all the AccessPermissions
      operationId: accessPermissionList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the AccessPermission objects available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessPermissionListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Access Permission
      summary: Create an AccessPermission
      operationId: accessPermissionCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accessPermissionCreator'
      responses:
        '201':
          description: The AccessPermission that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessPermissionListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '409':
          $ref: '#/components/responses/entityUniqueness'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accessinfos/{accessInfoId}/permissions/{accessPermissionId}':
    get:
      tags:
        - Access Permission
      summary: Get a single AccessPermission
      operationId: accessPermissionGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
        - name: accessPermissionId
          in: path
          description: The ID of the AccessPermission on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired AccessPermission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessPermission'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Access Permission
      summary: Delete a single AccessPermission
      operationId: accessPermissionDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D~1permissions~1%7BaccessPermissionId%7D/get/parameters/2'
      responses:
        '204':
          description: The AccessPermission has been deleted
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accessinfos/{accessInfoId}/permissions/_count':
    post:
      tags:
        - Access Permission
      summary: Count the AccessPermissions
      operationId: accessPermissionCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accessinfos/{accessInfoId}/permissions/_query':
    post:
      tags:
        - Access Permission
      summary: Query the AccessPermissions
      operationId: accessPermissionQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessPermissionListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accessinfos/{accessInfoId}/roles':
    get:
      tags:
        - Access Role
      summary: Get all the AccessRoles
      operationId: accessRolesList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the AccessRole objects available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessRoleListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Access Role
      summary: Create an AccessRole
      operationId: accessRoleCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accessRoleCreator'
      responses:
        '201':
          description: The AccessRole that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessRoleListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accessinfos/{accessInfoId}/roles/{accessRoleId}':
    get:
      tags:
        - Access Role
      summary: Get a single AccessRole
      operationId: accessRoleGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
        - name: accessRoleId
          in: path
          description: The ID of the AccessRole on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired AccessRole
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessRole'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Access Role
      summary: Delete a single AccessRole
      operationId: accessRoleDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D~1roles~1%7BaccessRoleId%7D/get/parameters/2'
      responses:
        '204':
          description: The AccessRole has been deleted
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accessinfos/{accessInfoId}/roles/_count':
    post:
      tags:
        - Access Role
      summary: Count the AccessRoles
      operationId: accessRoleCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accessinfos/{accessInfoId}/roles/_query':
    post:
      tags:
        - Access Role
      summary: Query the AccessRoles
      operationId: accessRoleQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessRoleListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accounts':
    get:
      tags:
        - Account
      summary: Get all the Accounts
      operationId: accountList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: name
          in: query
          description: An optional string to filter Accounts according to their name
          schema:
            type: string
        - name: recursive
          in: query
          description: |
            An optional flag to include all accounts that are directly or indirectly children of the current one.
            Setting this to `true` and also using the `name` parameter will result in this last one beign ignored.
          schema:
            type: boolean
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Accounts available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Get all the Accounts in the given Scope
    post:
      tags:
        - Account
      summary: Create a new Account
      operationId: accountCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing the properties for the new Account to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accountCreator'
        required: true
      responses:
        '201':
          description: The Account that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accounts/{accountId}':
    get:
      tags:
        - Account
      summary: Get a single Account
      operationId: accountGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: accountId
          in: path
          description: The ID of the Account on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: 'Get the details of a given Account, according to the `accountId` path parameter.'
    put:
      tags:
        - Account
      summary: Update a single Account
      operationId: accountUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accounts~1%7BaccountId%7D/get/parameters/1'
      requestBody:
        description: An object containing the new properties for the Account to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account'
            example:
              type: account
              optlock: 2
              name: acme-inc
              expirationDate: '2019-12-31T00:00:00.000Z'
              organization:
                addressLine1: 123 Looney Tunes Drive
                addressLine2: Block 1
                addressLine3: Apartment 25
                city: Somewhere City
                country: United States
                email: wile.coyote@acme.inc
                name: ACME Inc.
                personName: Wile Ethelbert Coyote
                phoneNumber: +1 (555) 123 4567
                stateProvinceCounty: Green County GC
                zipPostCode: '00100'
              parentAccountPath: /1/3315290947379772881
        required: true
      responses:
        '200':
          description: The details of the updated Account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: 'Update the details of a given Account, according to the `accountId` path parameter. Please note that some fields may be readonly for integrity purposes.'
    delete:
      tags:
        - Account
      summary: Delete a single Account
      operationId: accountDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accounts~1%7BaccountId%7D/get/parameters/1'
      responses:
        '204':
          description: The Account has been deleted
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: 'Delete the given account, according to the `accountId` path parameter.'
  '/{scopeId}/accounts/_count':
    post:
      tags:
        - Account
      summary: Count the Accounts
      operationId: accountCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Returns the count of how many Accounts are present in the given Scope
  '/{scopeId}/accounts/_query':
    post:
      tags:
        - Account
      summary: Query the Accounts
      operationId: accountQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Returns a list of the Accounts matching the given query in the Scope. Predicates are not currently supported.
  '/{scopeId}/credentials':
    get:
      tags:
        - Credential
      summary: Get all the Credentials
      operationId: credentialList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: userId
          in: query
          description: The optional id to filter results
          schema:
            $ref: '#/components/schemas/kapuaId'
        - $ref: '#/components/parameters/sortParam'
        - name: sortDir
          in: query
          description: 'The sort direction. Can be ASCENDING (default), DESCENDING. Case-insensitive (except for "clientId" parameter).'
          schema:
            type: string
            enum:
              - ASCENDING
              - DESCENDING
            default: ASCENDING
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Credentials available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credentialListResult'
              example:
                type: credentialListResult
                limitExceeded: false
                size: 2
                items:
                  - id: LgJHjS2jvdE
                    scopeId: AQ
                    createdOn: '2023-03-09T13:58:30.385Z'
                    createdBy: AQ
                    modifiedOn: '2023-03-09T13:58:30.385Z'
                    modifiedBy: AQ
                    optlock: 0
                    userId: AQ
                    credentialType: PASSWORD
                    status: ENABLED
                    expirationDate: '2023-04-09T13:58:30.385Z'
                    loginFailures: 0
                    firstLoginFailure: '2023-03-09T13:58:30.385Z'
                    loginFailuresReset: '2023-03-10T13:58:30.385Z'
                    lockoutReset: '2023-03-09T14:58:30.385Z'
                  - id: LgREjS2jadE
                    scopeId: AQ
                    createdOn: '2023-03-09T13:58:30.385Z'
                    createdBy: AQ
                    modifiedOn: '2023-03-09T13:58:30.385Z'
                    modifiedBy: AQ
                    optlock: 0
                    userId: AQ
                    credentialType: API_KEY
                    status: ENABLED
                    expirationDate: '2023-04-09T13:58:30.385Z'
                    loginFailures: 0
                    firstLoginFailure: '2023-03-09T13:58:30.385Z'
                    loginFailuresReset: '2023-03-10T13:58:30.385Z'
                    lockoutReset: '2023-03-09T14:58:30.385Z'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Credential
      summary: Create a new Credential
      operationId: credentialCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing the properties for the new Credential to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credentialCreator'
            examples:
              password:
                description: Password
                value:
                  userId: AQ
                  credentialType: PASSWORD
                  credentialKey: New-password-123!
                  credentialStatus: ENABLED
                  expirationDate: '2019-12-31T00:00:00.000Z'
              apikey:
                description: API Key
                value:
                  userId: AQ
                  credentialType: API_KEY
                  credentialStatus: ENABLED
                  expirationDate: '2019-12-31T00:00:00.000Z'
        required: true
      responses:
        '201':
          description: The Credential that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credential'
              examples:
                Password:
                  value:
                    id: LgJHjS2jvdE
                    scopeId: AQ
                    createdOn: '2023-03-09T13:58:30.385Z'
                    createdBy: AQ
                    modifiedOn: '2023-03-09T13:58:30.385Z'
                    modifiedBy: AQ
                    optlock: 0
                    userId: AQ
                    credentialType: PASSWORD
                    status: ENABLED
                    expirationDate: '2023-04-09T13:58:30.385Z'
                    loginFailures: 0
                    firstLoginFailure: '2023-03-09T13:58:30.385Z'
                    loginFailuresReset: '2023-03-10T13:58:30.385Z'
                    lockoutReset: '2023-03-09T14:58:30.385Z'
                API Key:
                  value:
                    id: LgJHjS2jvdE
                    scopeId: AQ
                    createdOn: '2023-03-09T13:58:30.385Z'
                    createdBy: AQ
                    modifiedOn: '2023-03-09T13:58:30.385Z'
                    modifiedBy: AQ
                    credentialKey: $2a$12$BjLeC/gqcnEyk.XNo2qorul.a/v4HDuOUlfmojdSZXRSFTjymPdVm
                    optlock: 0
                    userId: AQ
                    credentialType: PASSWORD
                    status: ENABLED
                    expirationDate: '2023-04-09T13:58:30.385Z'
                    loginFailures: 0
                    firstLoginFailure: '2023-03-09T13:58:30.385Z'
                    loginFailuresReset: '2023-03-10T13:58:30.385Z'
                    lockoutReset: '2023-03-09T14:58:30.385Z'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/credentials/{credentialId}':
    get:
      tags:
        - Credential
      summary: Get a single Credential
      operationId: credentialGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: credentialId
          in: path
          description: The ID of the Credential on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credential'
              examples:
                Password:
                  value:
                    id: LgJHjS2jvdE
                    scopeId: AQ
                    createdOn: '2023-03-09T13:58:30.385Z'
                    createdBy: AQ
                    modifiedOn: '2023-03-09T13:58:30.385Z'
                    modifiedBy: AQ
                    optlock: 0
                    userId: AQ
                    credentialType: PASSWORD
                    status: ENABLED
                    expirationDate: '2023-04-09T13:58:30.385Z'
                    loginFailures: 0
                    firstLoginFailure: '2023-03-09T13:58:30.385Z'
                    loginFailuresReset: '2023-03-10T13:58:30.385Z'
                    lockoutReset: '2023-03-09T14:58:30.385Z'
                API Key:
                  value:
                    id: LgJHjS2jvdE
                    scopeId: AQ
                    createdOn: '2023-03-09T13:58:30.385Z'
                    createdBy: AQ
                    modifiedOn: '2023-03-09T13:58:30.385Z'
                    modifiedBy: AQ
                    optlock: 0
                    userId: AQ
                    credentialType: PASSWORD
                    status: ENABLED
                    expirationDate: '2023-04-09T13:58:30.385Z'
                    loginFailures: 0
                    firstLoginFailure: '2023-03-09T13:58:30.385Z'
                    loginFailuresReset: '2023-03-10T13:58:30.385Z'
                    lockoutReset: '2023-03-09T14:58:30.385Z'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Credential
      summary: Update a single Credential
      operationId: credentialUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1credentials~1%7BcredentialId%7D/get/parameters/1'
      requestBody:
        description: An object containing the new properties for the Credential to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credential'
        required: true
      responses:
        '200':
          description: The details of the updated Credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credential'
              example:
                id: LgJHjS2jvdE
                scopeId: AQ
                createdOn: '2023-03-09T13:58:30.385Z'
                createdBy: AQ
                modifiedOn: '2023-03-09T13:58:30.385Z'
                modifiedBy: AQ
                optlock: 0
                userId: AQ
                credentialType: PASSWORD
                status: ENABLED
                expirationDate: '2023-04-09T13:58:30.385Z'
                loginFailures: 0
                firstLoginFailure: '2023-03-09T13:58:30.385Z'
                loginFailuresReset: '2023-03-10T13:58:30.385Z'
                lockoutReset: '2023-03-09T14:58:30.385Z'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Credential
      summary: Delete a single Credential
      operationId: credentialDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1credentials~1%7BcredentialId%7D/get/parameters/1'
      responses:
        '204':
          description: The Credential has been deleted
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/credentials/_count':
    post:
      tags:
        - Credential
      summary: Count the Credentials
      operationId: credentialCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/credentials/_query':
    post:
      tags:
        - Credential
      summary: Query the Credentials
      operationId: credentialQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credentialListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/credentials/{credentialId}/unlock':
    post:
      tags:
        - Credential
      summary: Unlock a Credential
      deprecated: true
      operationId: credentialUnlockDeprecated
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1credentials~1%7BcredentialId%7D/get/parameters/1'
      responses:
        '204':
          description: The Credential has been unlocked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credential'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/credentials/{credentialId}/_unlock':
    post:
      tags:
        - Credential
      summary: Unlock a Credential
      operationId: credentialUnlock
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1credentials~1%7BcredentialId%7D/get/parameters/1'
      responses:
        '204':
          description: The Credential has been unlocked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credential'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/data/channels':
    get:
      tags:
        - Data Channel
      summary: Query the Data Channels
      operationId: dataChannelQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: clientId
          in: query
          schema:
            type: string
          description: The ClientID to filter results
        - name: name
          in: query
          schema:
            type: string
          description: The channel name to filter results. It allows '#' wildcard in last channel level
        - description: The sort parameter
          name: sortParam
          in: query
          schema:
            type: string
        - description: The sort direction. Can be ascending (default) or descending.
          name: sortDir
          in: query
          schema:
            type: string
            enum:
              - ASCENDING
              - DESCENDING
            default: ASCENDING
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channelInfoListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/data/channels/_count':
    post:
      tags:
        - Data Channel
      summary: Count the ChannelInfos
      operationId: dataChannelCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/data/channels/{channelInfoId}':
    get:
      tags:
        - Data Channel
      summary: Get a single ChannelInfo
      operationId: channelInfoGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: channelInfoId
          in: path
          description: The ID of the ChannelInfo on which to perform the operation
          schema:
            type: string
          required: true
      responses:
        '200':
          description: The desired ChannelInfo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channelInfo'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/data/clients':
    get:
      tags:
        - Data Client
      summary: Query the Data Clients
      operationId: dataClientQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: clientId
          in: query
          schema:
            type: string
          description: The ClientID to filter results
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientInfoListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/data/clients/_count':
    post:
      tags:
        - Data Client
      summary: Count the ClientInfos
      operationId: dataClientCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/data/clients/{clientInfoId}':
    get:
      tags:
        - Data Client
      summary: Get a single ClientInfo
      operationId: clientInfoGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: clientInfoId
          in: path
          description: The ID of the ClientInfo on which to perform the operation
          schema:
            type: string
          required: true
      responses:
        '200':
          description: The desired ClientInfo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientInfo'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/data/messages':
    get:
      tags:
        - Data Message
      summary: Query the Data Messages
      operationId: dataMessageQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - description: The ClientID to use as a filter for messages
          name: clientId
          in: query
          schema:
            type: string
        - description: The Channel to use as a filter for messages
          name: channel
          in: query
          schema:
            type: string
        - description: Restrict the search only to this channel ignoring its children. Only meaningful if channel is set
          name: strictChannel
          in: query
          schema:
            type: boolean
        - description: The start date to filter the results. Must come before endDate parameter
          name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - description: The end date to filter the results. Must come after startDate parameter
          name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - description: 'The metric name to filter results. If filled, `metricType`, `metricMinValue` and `metricMaxValue` are also required'
          name: metricName
          in: query
          schema:
            type: string
        - description: The metric type to filter results
          name: metricType
          in: query
          schema:
            type: string
        - description: The minimum metric value to filter results
          name: metricMin
          in: query
          schema:
            type: string
        - description: The maximum metric value to filter results
          name: metricMax
          in: query
          schema:
            type: string
        - description: The sort direction. Can be ascending or descending (default).
          name: sortDir
          in: query
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: DESC
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataMessageListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Data Message
      summary: Store a new Message
      operationId: dataMessageStore
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataMessage'
            example:
              type: jsonDatastoreMessage
              capturedOn: '2019-09-12T09:25:05.096Z'
              channel:
                type: kapuaDataChannel
                semanticParts:
                  - heater
                  - data
              clientId: Client-Id-1
              deviceId: WyczTs_GuDM
              payload:
                metrics:
                  - valueType: string
                    value: 5
                    name: temperatureExternal
                  - valueType: string
                    value: 20
                    name: temperatureInternal
                  - valueType: string
                    value: 30
                    name: temperatureExhaust
                  - valueType: string
                    value: 0
                    name: errorCode
              receivedOn: '2019-09-12T09:25:05.102Z'
              sentOn: '2019-09-12T09:25:05.096Z'
              datastoreId: bb07d7fc-dc62-492f-b8da-7e28df69e112
              timestamp: '2019-09-12T09:25:05.096Z'
      responses:
        '200':
          description: The ID of the new DataMessage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataMessageInsertResponse'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/data/messages/_count':
    post:
      tags:
        - Data Message
      summary: Count the MessageInfos
      operationId: dataMessageCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/data/messages/{datastoreMessageId}':
    get:
      tags:
        - Data Message
      summary: Get a single DataMessage
      operationId: dataMessageGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: datastoreMessageId
          in: path
          description: The ID of the MetricInfo on which to perform the operation
          schema:
            type: string
          required: true
      responses:
        '200':
          description: The desired DataMessage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataMessageListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/data/metrics':
    get:
      tags:
        - Data Metric
      summary: Query the Data Metrics
      operationId: dataMetricQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: clientId
          in: query
          schema:
            type: string
          description: The client ID to filter results
        - name: channel
          in: query
          schema:
            type: string
          description: The channel to filter results. It allows '#' wildcard in last channel level
        - name: name
          in: query
          schema:
            type: string
          description: The metric name to filter results
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metricInfoListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/data/metrics/_count':
    post:
      tags:
        - Data Metric
      summary: Count the MetricInfos
      operationId: dataMetricCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/data/metrics/{metricInfoId}':
    get:
      tags:
        - Data Metric
      summary: Get a single MetricInfo
      operationId: metricInfoGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: metricInfoId
          in: path
          description: The ID of the MetricInfo on which to perform the operation
          schema:
            type: string
          required: true
      responses:
        '200':
          description: The desired MetricInfo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metricInfo'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices':
    get:
      tags:
        - Device
      summary: Get all the Devices
      operationId: deviceList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: tagId
          in: query
          description: The tag id to filter results
          schema:
            $ref: '#/components/schemas/kapuaId'
        - name: clientId
          in: query
          description: The client id to filter results
          schema:
            type: string
        - name: status
          in: query
          description: The connection status to filter results
          schema:
            $ref: '#/components/schemas/connection/allOf/1/properties/status'
        - name: fetchAttributes
          in: query
          schema:
            type: array
            items:
              $ref: '#/components/schemas/fetchAttribute'
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/sortParam'
        - name: sortDir
          in: query
          description: 'The sort direction. Can be ASCENDING (default), DESCENDING. Case-insensitive (except for "clientId" parameter).'
          schema:
            type: string
            enum:
              - ASCENDING
              - DESCENDING
            default: ASCENDING
        - name: matchTerm
          in: query
          description: |
            A term to match on different fields. Every entity whose at least one of the specified fields starts with this value will be matched.
            Matches on the following fields:

            - CLIENT_ID
            - DISPLAY_NAME
            - SERIAL_NUMBER
            - MODEL_ID
            - MODEL_NAME
            - BIOS_VERSION
            - FIRMWARE_VERSION
            - OS_VERSION
            - JVM_VERSION
            - OSGI_FRAMEWORK_VERSION
            - APPLICATION_FRAMEWORK_VERSION
            - CONNECTION_INTERFACE
            - CONNECTION_IP
          schema:
            type: string
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Devices available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceListResult'
              examples:
                standard:
                  value:
                    type: deviceListResult
                    limitExceeded: false
                    size: 1
                    items:
                      - type: device
                        id: WyczTs_GuDM
                        scopeId: AQ
                        createdOn: 2019-09-12T09:04:37.315Z
                        createdBy: Ag
                        modifiedOn: 2019-09-12T09:04:37.603Z
                        modifiedBy: Ag
                        optlock: 2
                        clientId: Client-Id-1
                        connectionId: Gd1BfeWwh3s
                        status: ENABLED
                        displayName: null
                        lastEventId: YYHQ2i1S-P0
                        serialNumber: ESF-Docker-RHEL
                        modelId: ESF-Docker-RHEL
                        modelName: ESF-Docker-RHEL
                        biosVersion: N/A
                        firmwareVersion: N/A
                        osVersion: 4.9.184-linuxkit
                        jvmVersion: 25.161-b12 mixed mode
                        osgiFrameworkVersion: 1.8.0
                        applicationFrameworkVersion: ESF_6.0.0
                        connectionInterface: 'lo (00:00:00:00:00:00)'
                        connectionIp: 127.0.0.1
                        applicationIdentifiers: heaterPROV-V2DEPLOY-V2VPNCLIENT-V2CONF-V1CERT-V1ASSET-V1CMD-V1
                        acceptEncoding: gzip
                        tagIds: []
                with-fetch-attributes:
                  value:
                    type: deviceListResult
                    limitExceeded: false
                    size: 1
                    items:
                      - type: device
                        id: WyczTs_GuDM
                        scopeId: AQ
                        createdOn: 2019-09-12T09:04:37.315Z
                        createdBy: Ag
                        modifiedOn: 2019-09-12T09:04:37.603Z
                        modifiedBy: Ag
                        optlock: 2
                        clientId: Client-Id-1
                        connectionId: Gd1BfeWwh3s
                        connection:
                          id: Gd1BfeWwh3s
                          scopeId: AQ
                          createdOn: 2019-09-12T09:04:32.101Z
                          createdBy: Ag
                          modifiedOn: 2019-09-12T09:04:32.101Z
                          modifiedBy: Ag
                          optlock: 1
                          status: CONNECTED
                          clientId: Client-Id-1
                          userId: Ag
                          allowUserChange: false
                          userCouplingMode: INHERITED
                          protocol: MQTT
                          clientIp: 'tcp://172.21.0.1:59596'
                          serverIp: broker
                        status: ENABLED
                        displayName: null
                        lastEventId: YYHQ2i1S-P0
                        lastEvent:
                          id: YYHQ2i1S-P0
                          scopeId: AQ
                          createdOn: 2019-09-12T09:04:37.392Z
                          createdBy: Ag
                          deviceId: WyczTs_GuDM
                          receivedOn: 2019-09-12T09:04:32.646Z
                          position:
                            altitude: 0
                            latitude: 0
                            longitude: 0
                          resource: BIRTH
                          action: CREATE
                          responseCode: ACCEPTED
                          eventMessage: 'acceptEncoding=gzip~~applicationFramework=Kura~~applicationFrameworkVersion=ESF_6.0.0~~applicationIdentifiers=heaterPROV-V2DEPLOY-V2VPNCLIENT-V2CONF-V1CERT-V1ASSET-V1CMD-V1~~availableProcessors=4~~bios=N/A~~biosVersion=N/A~~connectionInterface=lo (00:00:00:00:00:00)~~connectionIp=127.0.0.1~~containerFramework=Eclipse~~containerFrameworkVersion=1.8.0~~displayName=~~firmware=N/A~~firmwareVersion=N/A~~jvm=Java HotSpot(TM) 64-Bit Server VM~~jvmProfile=Java(TM) SE Runtime Environment 1.8.0_161-b12~~jvmVersion=25.161-b12 mixed mode~~modelId=ESF-Docker-RHEL~~modelName=ESF-Docker-RHEL~~os=Linux~~osArch=amd64~~osVersion=4.9.184-linuxkit'
                        serialNumber: ESF-Docker-RHEL
                        modelId: ESF-Docker-RHEL
                        modelName: ESF-Docker-RHEL
                        biosVersion: N/A
                        firmwareVersion: N/A
                        osVersion: 4.9.184-linuxkit
                        jvmVersion: 25.161-b12 mixed mode
                        osgiFrameworkVersion: 1.8.0
                        applicationFrameworkVersion: ESF_6.0.0
                        connectionInterface: 'lo (00:00:00:00:00:00)'
                        connectionIp: 127.0.0.1
                        applicationIdentifiers: heaterPROV-V2DEPLOY-V2VPNCLIENT-V2CONF-V1CERT-V1ASSET-V1CMD-V1
                        acceptEncoding: gzip
                        tagIds: []
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Device
      summary: Create a new Device
      operationId: deviceCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing the properties for the new Device to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceCreator'
        required: true
      responses:
        '201':
          description: The Device that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/device'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}':
    get:
      tags:
        - Device
      summary: Get a single Device
      operationId: deviceGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: deviceId
          in: path
          description: The ID of the Device on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/device'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Device
      summary: Update a single Device
      operationId: deviceUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
      requestBody:
        description: An object containing the new properties for the Device to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/device'
            example:
              type: device
              optlock: 1
              status: ENABLED
              clientId: Client-Id-1
              displayName: Test Device
              serialNumber: '1234567890'
              modelId: Test Model
              biosVersion: N/A
              firmwareVersion: N/A
              osVersion: 3.13.0-93-generic
              jvmVersion: 24.111-b01 mixed mode
              osgiFrameworkVersion: 1.7.0
              acceptEncoding: gzip
              extendedProperties:
                - type: deviceExtendedProperty
                  groupName: Hardware Info
                  name: CPU Family
                  value: ARM
                - type: deviceExtendedProperty
                  groupName: Hardware Info
                  name: CPU Cores
                  value: 4
              tagIds: []
        required: true
      responses:
        '200':
          description: The details of the updated Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/device'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Device
      summary: Delete a single Device
      operationId: deviceDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
      responses:
        '204':
          description: The Device has been deleted
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/_query':
    post:
      tags:
        - Device
      summary: Query the Devices
      operationId: deviceQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/_count':
    post:
      tags:
        - Device
      summary: Count the Devices
      operationId: deviceCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/assets':
    get:
      tags:
        - Device Management - Asset
      summary: Get the Assets Definitions of a single Device
      operationId: deviceAssetList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The list of Assets definition of a single Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceAssetDefinitions'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Device Management - Asset
      summary: Get the Assets Definitions of a single Device
      operationId: deviceAssetListFiltered
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        description: An object containing the list of Assets to use as a filter
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceAssetDefinitions'
            example:
              deviceAsset:
                - name: asset2
      responses:
        '200':
          description: The list of Assets definition of a single Device according to the filter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceAssetDefinitions'
              example:
                type: deviceAssets
                deviceAsset:
                  - name: asset2
                    channels:
                      - valueType: integer
                        name: Channel-1
                        mode: READ
                      - valueType: integer
                        name: Channel-2
                        mode: WRITE
                      - valueType: integer
                        name: Channel-3
                        mode: READ_WRITE
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/assets/_read':
    post:
      tags:
        - Device Management - Asset
      summary: Read the values for the Assets of a single Device
      operationId: deviceAssetRead
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        description: An object containing the list of Assets to use as a filter
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceAssetDefinitions'
            example:
              deviceAsset:
                - name: asset2
        required: true
      responses:
        '200':
          description: The Asset list for the desired Device complete with values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceAssetValues'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/assets/_write':
    post:
      tags:
        - Device Management - Asset
      summary: Write the values for the Assets of a single Device
      operationId: deviceAssetWrite
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        description: An Asset list to be updated on the desired Devica
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceAssetValues'
            example:
              type: deviceAssets
              deviceAsset:
                - name: asset2
                  channels:
                    - valueType: integer
                      value: 12
                      name: Channel-2
                    - valueType: integer
                      value: 80
                      name: Channel-3
        required: true
      responses:
        '200':
          description: The updated Asset list for the desired Device with updated values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceAssetValues'
              example:
                type: deviceAssets
                deviceAsset:
                  - name: asset2
                    channels:
                      - valueType: integer
                        value: 12
                        name: Channel-2
                        timestamp: '2019-09-12T15:40:18.278Z'
                      - valueType: integer
                        value: 80
                        name: Channel-3
                        timestamp: '2019-09-12T15:40:18.278Z'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/bundles':
    get:
      tags:
        - Device Management - Bundle
      summary: Get the Bundles installed on a single Device
      operationId: deviceBundleList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The list of Bundles installed on a single Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceBundles'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/bundles/{bundleId}/_start':
    post:
      tags:
        - Device Management - Bundle
      summary: Start the desired Bundle on a single Device
      operationId: deviceBundleStart
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1bundles~1%7BbundleId%7D~1_stop/post/parameters/2'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '204':
          description: The Bundle has been successfully started
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/bundles/{bundleId}/_stop':
    post:
      tags:
        - Device Management - Bundle
      summary: Stop the desired Bundle on a single Device
      operationId: deviceBundleStop
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - name: bundleId
          in: path
          description: The ID of the Bundle on which to perform the operation
          schema:
            type: string
          required: true
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '204':
          description: The Bundle has been successfully stopped
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/commands/_execute':
    post:
      tags:
        - Device Management - Command
      summary: Execute a Command
      operationId: deviceCommandExecute
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/commandInput'
            examples:
              singleArgument:
                description: A command with a single argument
                value:
                  command: ls
                  arguments:
                    argument: '-lisa'
                  timeout: 60000
              multipleArguments:
                description: A command with multiple arguments
                value:
                  command: ls
                  arguments:
                    argument:
                      - '-l'
                      - '-i'
                      - '-s'
                      - '-a'
                  timeout: 60000
        required: true
      responses:
        '200':
          description: The output of the Command executed on a single Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commandOutput'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/configurations':
    get:
      tags:
        - Device Management - Configuration
      summary: Read multiple Configurations
      operationId: deviceConfigurationsRead
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The list of the Configurations on a single Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/componentConfigurations'
            application/xml:
              schema:
                $ref: '#/components/schemas/componentConfigurations'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Device Management - Configuration
      summary: Update multiple Configurations
      operationId: deviceConfigurationsWrite
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/componentConfigurationsInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/componentConfigurationsInput'
        required: true
      responses:
        '204':
          description: The updated list of Configurations on a single Device
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/configurations/{componentId}':
    get:
      tags:
        - Device Management - Configuration
      summary: Read a single Configuration
      operationId: deviceConfigurationRead
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - name: componentId
          in: path
          description: The ID of the Component on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The Configuration details of a single Service on a single Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/componentConfigurations'
            application/xml:
              schema:
                $ref: '#/components/schemas/componentConfigurations'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Device Management - Configuration
      summary: Update a single Configuration
      operationId: deviceConfigurationWrite
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1configurations~1%7BcomponentId%7D/get/parameters/2'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/componentConfigurationInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/componentConfigurationInput'
        required: true
      responses:
        '204':
          description: The updated Configuration details of a single Service on a single Device
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/inventory':
    get:
      tags:
        - Device Management - Inventory
      summary: Get the inventory from a single Device
      operationId: deviceInventoryGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The inventory from the Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceInventory'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/inventory/bundles':
    get:
      tags:
        - Device Management - Inventory
      summary: Get the bundle inventory from a single Device
      operationId: deviceInventoryBundleGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The bundle inventory from the Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceInventoryBundles'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/inventory/bundles/_start':
    post:
      tags:
        - Device Management - Inventory
      summary: Starts the bundle inventory in a Device
      operationId: deviceInventoryBundleStart
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceInventoryBundle'
      responses:
        '204':
          description: The inventory bundle has been started
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/inventory/bundles/_stop':
    post:
      tags:
        - Device Management - Inventory
      summary: Stops the bundle inventory in a Device
      operationId: deviceInventoryBundleStop
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceInventoryBundle'
      responses:
        '204':
          description: The inventory bundle has been stopped
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/inventory/containers':
    get:
      tags:
        - Device Management - Inventory
      summary: Get the container inventory from a single Device
      operationId: deviceInventoryContainerGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The container inventory from the Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceInventoryContainers'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/inventory/containers/_start':
    post:
      tags:
        - Device Management - Inventory
      summary: Starts the container inventory in a Device
      operationId: deviceInventoryContainerStart
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceInventoryContainer'
      responses:
        '204':
          description: The inventory container has been started
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/inventory/containers/_stop':
    post:
      tags:
        - Device Management - Inventory
      summary: Stops the container inventory in a Device
      operationId: deviceInventoryContainerStop
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceInventoryContainer'
      responses:
        '204':
          description: The inventory container has been stopped
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/inventory/system':
    get:
      tags:
        - Device Management - Inventory
      summary: Get the system packages inventory from a single Device
      operationId: deviceInventorySystemGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The system packages inventory from the Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceInventoryPackages'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/inventory/packages':
    get:
      tags:
        - Device Management - Inventory
      summary: Get the deployment packages inventory from a single Device
      operationId: deviceInventoryPackagesGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The deployment packages inventory from the Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceInventoryDeploymentPackages'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/keystore':
    get:
      tags:
        - Device Management - Keystore
      summary: Get the keystores list from a single Device
      operationId: deviceKeystoresGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The keystores list from the Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceKeystores'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/keystore/items':
    get:
      tags:
        - Device Management - Keystore
      summary: Get the keystore items from a single Device
      operationId: deviceKeystoreItemsGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - name: keystoreId
          in: query
          description: The keystore id to filter the results.
          schema:
            type: string
        - name: alias
          in: query
          description: The alias to filter the results.
          schema:
            type: string
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The keystore items from the Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceKeystoreItems'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/keystore/item':
    get:
      tags:
        - Device Management - Keystore
      summary: Get a keystore item from a single Device
      operationId: deviceKeystoreItemGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - name: keystoreId
          in: query
          description: The keystore id to filter the results.
          required: true
          schema:
            type: string
        - name: alias
          in: query
          description: The alias to filter the results.
          required: true
          schema:
            type: string
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The keystore item from the Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceKeystoreItem'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Device Management - Keystore
      summary: Delete a keystore item from a single Device
      operationId: deviceKeystoreItemDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - name: keystoreId
          in: query
          description: The keystore id of the item to delete.
          required: true
          schema:
            type: string
        - name: alias
          in: query
          description: The alias of the item to delete.
          required: true
          schema:
            type: string
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '204':
          description: The keystore item has been deleted
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/keystore/items/certificateInfo':
    post:
      tags:
        - Device Management - Keystore
      summary: Creates a certificate from the Certificate Info Servuce in a Device
      operationId: deviceKeystoreCertificateInfoCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                keystoreId:
                  type: string
                alias:
                  type: string
                certificateInfoId:
                  $ref: '#/components/schemas/kapuaId'
              example:
                keystoreId: SSLKeystore
                alias: ssl-eclipse
                certificateInfoId: IaIA6xbNR7C
      responses:
        '204':
          description: The certificate has been created into the device keystore
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/keystore/items/certificateRaw':
    post:
      tags:
        - Device Management - Keystore
      summary: Creates a certificate in a Device
      operationId: deviceKeystoreCertificateRawCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceKeystoreCertificate'
      responses:
        '204':
          description: The certificate has been created into the device keystore
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/keystore/items/keypair':
    post:
      tags:
        - Device Management - Keystore
      summary: Creates a key pair in a Device
      operationId: deviceKeystoreKeypairCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceKeystoreKeypair'
      responses:
        '204':
          description: The keypair has been created into the device keystore
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/keystore/items/csr':
    post:
      tags:
        - Device Management - Keystore
      summary: Request a certificate signing request from a Device
      operationId: deviceKeystoreCSR
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceKeystoreCSRInfo'
      responses:
        '204':
          description: The certificate signing request has been returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceKeystoreCSR'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/operations/{operationId}/notifications':
    get:
      tags:
        - Device Management - Notification
      summary: Get all the Device Registry Notifications
      operationId: deviceRegistryNotificationList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1operations~1%7BoperationId%7D/get/parameters/2'
        - name: resource
          in: query
          description: The resource of the DeviceEvent in which to search results
          schema:
            type: string
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Device Management Registty Notifications available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceNotificationListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/operations/{operationId}/notifications/{notificationId}':
    get:
      tags:
        - Device Management - Notification
      summary: Get a single Device Registry Notification
      operationId: deviceRegistryNotificationGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1operations~1%7BoperationId%7D/get/parameters/2'
        - name: notificationId
          in: path
          description: The ID of the Registry Notification on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Registry Notification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceNotification'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Device Management - Notification
      summary: Delete a single Registry Notification
      operationId: deviceRegistryNotificationDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1operations~1%7BoperationId%7D/get/parameters/2'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1operations~1%7BoperationId%7D~1notifications~1%7BnotificationId%7D/get/parameters/3'
      responses:
        '204':
          description: The Registry Notification has been deleted
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/operations/{operationId}/notifications/_query':
    post:
      tags:
        - Device Management - Notification
      summary: Query the Registry Notifications
      operationId: deviceRegistryNotificationQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1operations~1%7BoperationId%7D/get/parameters/2'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceNotificationListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/operations/{operationId}/notifications/_count':
    post:
      tags:
        - Device Management - Notification
      summary: Count the Registry Notifications
      operationId: deviceRegistryNotificationCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1operations~1%7BoperationId%7D/get/parameters/2'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/operations':
    get:
      tags:
        - Device Management - Operation
      summary: Get all the Device Registry Operations
      operationId: deviceRegistryOperationList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - name: resource
          in: query
          description: The resource of the DeviceManagementOperation in which to search results
          schema:
            type: string
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Device Management Registty Operations available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceOperationListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '409':
          $ref: '#/components/responses/entityUniqueness'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/operations/{operationId}':
    get:
      tags:
        - Device Management - Operation
      summary: Get a single Device Registry Operation
      operationId: deviceRegistryOperationGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - name: operationId
          in: path
          description: The ID of the Registry Operation on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Registry Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceOperation'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Device Management - Operation
      summary: Delete a single Registry Operation
      operationId: deviceRegistryOperationDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1operations~1%7BoperationId%7D/get/parameters/2'
      responses:
        '204':
          description: The Registry Operation has been deleted
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/operations/_query':
    post:
      tags:
        - Device Management - Operation
      summary: Query the Registry Operations
      operationId: deviceRegistryOperationQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceOperationListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/operations/_count':
    post:
      tags:
        - Device Management - Operation
      summary: Count the Registry Operations
      operationId: deviceRegistryOperationCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/packages':
    get:
      tags:
        - Device Management - Package
      summary: Get the Packages installed on a single Device
      operationId: devicePackageList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The list of Packages installed on a single Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/devicePackages'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/packages/_download':
    post:
      tags:
        - Device Management - Package
      summary: Download and install a Package
      operationId: devicePackageDownload
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/devicePackageDownloadRequest'
            examples:
              basic:
                summary: Basic
                description: A request with basic options
                value:
                  uri: 'https://download.eclipse.org/kura/releases/4.1.0/org.eclipse.kura.demo.heater_1.0.500.dp'
                  name: heater
                  version: 1.0.500
              complete:
                summary: Complete
                description: A request with all available options used
                value:
                  uri: 'https://download.eclipse.org/kura/releases/4.1.0/org.eclipse.kura.demo.heater_1.0.500.dp'
                  name: heater
                  version: 1.0.500
                  username: username
                  password: password
                  fileHash: 'MD5:0d04154164145cd6b2167fdd457ed28f'
                  fileType: DEPLOYMENT_PACKAGE
                  install: true
                  reboot: false
                  rebootDelay: 0
                  advancedOptions:
                    restart: false
                    blockSize: 128
                    blockDelay: 0
                    blockTimeout: 5000
                    notifyBlockSize: 256
                    installVerifyURI: 'https://download.eclipse.org/kura/releases/4.1.0/org.eclipse.kura.demo.heater_1.0.500.verifier.sh'
        required: true
      responses:
        '200':
          description: The corresponding Device Management Operation to track the progress of the Device Package Download Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceOperation'
        '204':
          description: |
            The Package Install request has been successfully received. However, this does NOT mean that the package has been successfully installed, since the Package Install
            is an asynchronous operation and may still be in progress. APIs are available at `device/{deviceId}/operations` and `device/{deviceId}/operations/{operationId}/notifications`
            to track asynchronous operations.
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/packages/_uninstall':
    post:
      tags:
        - Device Management - Package
      summary: Uninstall a Package
      operationId: devicePackageUninstall
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/devicePackageUninstallRequest'
            examples:
              basic:
                summary: Basic
                description: A request with only required properties
                value:
                  name: org.eclipse.kura.demo.heater
                  version: 1.0.500
              complete:
                summary: Complete
                description: A request with all properties
                value:
                  name: org.eclipse.kura.demo.heater
                  version: 1.0.500
                  reboot: false
                  rebootDelay: 0
      responses:
        '200':
          description: The corresponding Device Management Operation to track the progress of the Device Package Uninstall Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceOperation'
        '204':
          description: |
            The Package Install request has been successfully received. However, this does NOT mean that the package has been successfully installed, since the Package Install
            is an asynchronous operation and may still be in progress. APIs are available at `device/{deviceId}/operations` and `device/{deviceId}/operations/{operationId}/notifications`
            to track asynchronous operations.
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/requests':
    post:
      tags:
        - Device Management - Request
      summary: Perform a Request
      operationId: deviceRequestExec
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestInput'
        required: true
      responses:
        '200':
          description: The list of Requests installed on a single Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/requestOutput'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/snapshots':
    get:
      tags:
        - Device Management - Snapshot
      summary: Get all Snapshots
      operationId: deviceSnapshotList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The list of Snapshots available on a single Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snapshots'
            application/xml:
              schema:
                $ref: '#/components/schemas/snapshots'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/snapshots/{snapshotId}':
    get:
      tags:
        - Device Management - Snapshot
      summary: Get a single Snapshot
      operationId: deviceSnapshotGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - name: snapshotId
          description: The ID of the Snapshot on which to perform the operation
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The list of the Configurations related to the given Snapshot on a single Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/componentConfigurations'
            application/xml:
              schema:
                $ref: '#/components/schemas/componentConfigurations'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/snapshots/{snapshotId}/_rollback':
    post:
      tags:
        - Device Management - Snapshot
      summary: Rollback to Snapshot
      operationId: deviceSnapshotRollback
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1snapshots~1%7BsnapshotId%7D/get/parameters/2'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '204':
          description: The Snapshot has been applied
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/deviceconnections':
    get:
      tags:
        - Device Connection
      summary: Get all the Connections
      operationId: connectionList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices/get/parameters/2'
        - name: clientIp
          in: query
          description: The client ip to filter results
          schema:
            type: string
        - name: protocol
          in: query
          description: The connection protocol to filter results
          schema:
            type: string
        - $ref: '#/paths/~1%7BscopeId%7D~1devices/get/parameters/3'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Connections available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connectionListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/deviceconnections/{connectionId}':
    get:
      tags:
        - Device Connection
      summary: Get a single Connection
      operationId: connectionGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: connectionId
          in: path
          description: The ID of the Connection on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Connection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connection'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/deviceconnections/{connectionId}/options':
    get:
      tags:
        - Device Connection
      summary: Get the option for a Connection
      operationId: connectionOptionGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1deviceconnections~1%7BconnectionId%7D/get/parameters/1'
      responses:
        '200':
          description: The Options of the desired Connection
          content:
            application/json:
              schema:
                $ref: '#/paths/~1%7BscopeId%7D~1deviceconnections~1%7BconnectionId%7D~1options/put/requestBody/content/application~1json/schema'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Device Connection
      summary: Update the option for a Connection
      operationId: connectionOptionUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1deviceconnections~1%7BconnectionId%7D/get/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/kapuaUpdatableEntity'
                - type: object
                  properties:
                    allowUserChange:
                      type: boolean
                    userCouplingMode:
                      $ref: '#/components/schemas/connection/allOf/1/properties/userCouplingMode'
                    reservedUserId:
                      allOf:
                        - $ref: '#/components/schemas/kapuaId'
                  example:
                    type: deviceConnectionOption
                    id: Gd1BfeWwh3s
                    scopeId: AQ
                    createdOn: '2019-09-12T09:04:32.101Z'
                    createdBy: Ag
                    modifiedOn: '2019-09-13T08:04:49.927Z'
                    modifiedBy: Ag
                    optlock: 17
                    allowUserChange: false
                    userCouplingMode: INHERITED
      responses:
        '200':
          description: The updated Options of the desired Connection
          content:
            application/json:
              schema:
                $ref: '#/paths/~1%7BscopeId%7D~1deviceconnections~1%7BconnectionId%7D~1options/put/requestBody/content/application~1json/schema'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/deviceconnections/_count':
    post:
      tags:
        - Device Connection
      summary: Count the Connections
      operationId: connectionCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/deviceconnections/_query':
    post:
      tags:
        - Device Connection
      summary: Query the Connections
      operationId: connectionQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connectionListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/events':
    get:
      tags:
        - Device Event
      summary: Get all the DeviceEvents
      operationId: deviceEventList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - name: resource
          in: query
          description: The resource of the DeviceEvent in which to search results
          schema:
            type: string
        - description: The start date to filter the results.
          name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - description: The end date to filter the results.
          name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Device Events available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceEventListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/events/{deviceEventId}':
    get:
      tags:
        - Device Event
      summary: Get a single DeviceEvent
      operationId: deviceEventGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - name: deviceEventId
          in: path
          description: The ID of the Device Event on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Device Event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceEvent'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Device Event
      summary: Delete a single DeviceEvent
      operationId: deviceEventDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1events~1%7BdeviceEventId%7D/get/parameters/2'
      responses:
        '204':
          description: The Device Event has been deleted
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/events/_count':
    post:
      tags:
        - Device Event
      summary: Count the Device Events
      operationId: deviceEventCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/events/_query':
    post:
      tags:
        - Device Event
      summary: Query the Device Event
      operationId: deviceEventQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceEventListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/domains':
    get:
      tags:
        - Domain
      summary: Get all the Domains
      operationId: domainList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: name
          in: query
          description: The domain name to filter results
          schema:
            type: string
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Domains available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domainListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/domains/{domainId}':
    get:
      tags:
        - Domain
      summary: Get a single Domain
      operationId: domainGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: domainId
          in: path
          description: The ID of the Domain on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Domain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/domains/_count':
    post:
      tags:
        - Domain
      summary: Count the Domains
      operationId: domainCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/domains/_query':
    post:
      tags:
        - Domain
      summary: Query the Domains
      operationId: domainQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domainListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/endpointInfos':
    get:
      tags:
        - Endpoint Info
      summary: Get all the EndpointInfos
      operationId: endpointInfoList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: usage
          in: query
          description: The endpointInfo usage to filter results
          schema:
            type: string
        - name: endpointType
          in: query
          description: The type of the Endpoints to query for
          schema:
            allOf:
              - $ref: '#/components/schemas/endpointInfoCreator/allOf/1/properties/endpointType'
              - default: resource
          required: false
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/sortParam'
        - name: sortDir
          in: query
          description: 'The sort direction. Can be ASCENDING (default), DESCENDING. Case-insensitive (except for "clientId" parameter).'
          schema:
            type: string
            enum:
              - ASCENDING
              - DESCENDING
            default: ASCENDING
        - name: matchTerm
          in: query
          description: |
            A term to match on different fields. Every entity whose at least one of the specified fields starts with this value will be matched.
            Matches on the following fields:

              - SCHEMA
              - DNS
          schema:
            type: string
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the EndpointInfos available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpointInfoListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Endpoint Info
      summary: Create a new EndpointInfo
      operationId: endpointInfoCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing the properties for the new EndpointInfo to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/endpointInfoCreator'
        required: true
      responses:
        '201':
          description: The EndpointInfo that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpointInfo'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/entityUniqueness'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/endpointInfos/{endpointInfoId}':
    get:
      tags:
        - Endpoint Info
      summary: Get a single EndpointInfo
      operationId: endpointInfoGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: endpointInfoId
          in: path
          description: The ID of the EndpointInfo on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired EndpointInfo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpointInfo'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Endpoint Info
      summary: Update a single EndpointInfo
      operationId: endpointInfoUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1endpointInfos~1%7BendpointInfoId%7D/get/parameters/1'
      requestBody:
        description: An object containing the new properties for the EndpointInfo to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/endpointInfo'
            example:
              type: endpointInfo
              optlock: 1
              dns: 10.200.12.144
              port: 1883
              schema: mqtt
              secure: false
              usages:
                - name: MESSAGE_BROKER
                - name: PROVISION
              endpointType: resource
        required: true
      responses:
        '200':
          description: The details of the updated EndpointInfo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpointInfo'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/entityUniqueness'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Endpoint Info
      summary: Delete a single EndpointInfo
      operationId: endpointInfoDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1endpointInfos~1%7BendpointInfoId%7D/get/parameters/1'
      responses:
        '204':
          description: The EndpointInfo has been deleted
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/endpointInfos/_count':
    post:
      tags:
        - Endpoint Info
      summary: Count the EndpointInfos
      operationId: endpointInfoCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1endpointInfos/get/parameters/2'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/endpointInfos/_query':
    post:
      tags:
        - Endpoint Info
      summary: Query the EndpointInfos
      operationId: endpointInfoQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1endpointInfos/get/parameters/2'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpointInfoListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/groups':
    get:
      tags:
        - Group
      summary: Get all the Groups
      operationId: groupList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: name
          in: query
          description: The group name to filter results
          schema:
            type: string
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/sortParam'
        - name: sortDir
          in: query
          description: 'The sort direction. Can be ASCENDING (default), DESCENDING. Case-insensitive (except for "clientId" parameter).'
          schema:
            type: string
            enum:
              - ASCENDING
              - DESCENDING
            default: ASCENDING
        - name: matchTerm
          in: query
          description: |
            A term to match on different fields. Every entity whose at least one of the specified fields starts with this value will be matched.
            Matches on the following fields:

              - DESCRIPTION
              - NAME
          schema:
            type: string
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Groups available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Group
      summary: Create a new Group
      operationId: groupCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing the properties for the new Group to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groupCreator'
        required: true
      responses:
        '201':
          description: The Group that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/groups/{groupId}':
    get:
      tags:
        - Group
      summary: Get a single Group
      operationId: groupGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: groupId
          in: path
          description: The ID of the Group on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Group
      summary: Update a single Group
      operationId: groupUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1groups~1%7BgroupId%7D/get/parameters/1'
      requestBody:
        description: An object containing the new properties for the Group to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group'
            example:
              type: group
              optlock: 1
              name: group-1
              description: An Access Group
        required: true
      responses:
        '200':
          description: The details of the updated Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Group
      summary: Delete a single Group
      operationId: groupDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1groups~1%7BgroupId%7D/get/parameters/1'
      responses:
        '204':
          description: The Group has been deleted
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/groups/_count':
    post:
      tags:
        - Group
      summary: Count the Groups
      operationId: groupCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/groups/_query':
    post:
      tags:
        - Group
      summary: Query the Groups
      operationId: groupQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs':
    get:
      tags:
        - Job
      summary: Get all the Jobs
      operationId: jobList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: name
          in: query
          description: The job name to filter results
          schema:
            type: string
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/askTotalCount'
      responses:
        '200':
          description: The list of the Jobs available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Job
      summary: Create a new Job
      operationId: jobCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing the properties for the new Job to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jobCreator'
        required: true
      responses:
        '201':
          description: The Job that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}':
    get:
      tags:
        - Job
      summary: Get a single Job
      operationId: jobGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: jobId
          in: path
          description: The ID of the Job on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Job
      summary: Update a single Job
      operationId: jobUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        description: An object containing the new properties for the Job to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/job'
            example:
              type: job
              optlock: 1
        required: true
      responses:
        '200':
          description: The details of the updated Job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Job
      summary: Delete a single Job
      operationId: jobDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - name: forced
          in: query
          description: Delete the Job forcibly. It can only be used by the system administrator.
          schema:
            type: boolean
            default: false
      responses:
        '204':
          description: The Job has been deleted
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/_count':
    post:
      tags:
        - Job
      summary: Count the Jobs
      operationId: jobCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/_query':
    post:
      tags:
        - Job
      summary: Query the Jobs
      operationId: jobQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/_start':
    post:
      tags:
        - Job Engine
      summary: Start a single Job
      operationId: jobStart
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jobStartOptions'
        required: true
      responses:
        '204':
          description: The Start operation has been received by the Job Engine
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/_stop':
    post:
      tags:
        - Job Engine
      summary: Stop a single Job
      operationId: jobStop
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      responses:
        '204':
          description: The Stop operation has been received by the Job Engine
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/_isRunning':
    post:
      tags:
        - Job Engine
      summary: Check if multiple Jobs are running
      operationId: multipleJobIsRunning
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                jobIds:
                  type: array
                  items:
                    $ref: '#/components/schemas/kapuaId'
              example:
                jobIds:
                  - dX63xIXNstA
                  - TqcLqDS4Wj4
                  - AQ
      responses:
        '200':
          description: |
            An object representing the running status of multiple Jobs.
            Please note that an items that only contains the `jobId` property
            but not the `isRunning` property means that an error occurred while
            retrieving the status of that specific job.
          content:
            application/json:
              schema:
                type: object
                properties:
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/isJobRunning'
                example:
                  list:
                    - jobId: AQ
                    - jobId: TqcLqDS4Wj4
                      isRunning: false
                    - jobId: dX63xIXNstA
                      isRunning: false
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/_isRunning':
    get:
      tags:
        - Job Engine
      summary: Check if a single Job is running
      operationId: jobIsRunning
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      responses:
        '200':
          description: An object representing the running status of a Job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/isJobRunning'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/executions/{executionId}/_resume':
    post:
      tags:
        - Job Engine
      summary: Resume a single Job Execution
      operationId: jobResumeExecution
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D~1executions~1%7BexecutionId%7D~1_stop/post/parameters/2'
      responses:
        '204':
          description: The Job Engine has received the Resume Execution request
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/executions/{executionId}/_stop':
    post:
      tags:
        - Job Engine
      summary: Stop a single Job Execution
      operationId: jobStopExecution
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - name: executionId
          in: path
          description: The ID of the Job Execution on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '204':
          description: The Job Engine has received the Stop Execution request
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/executions':
    get:
      tags:
        - Job - Execution
      summary: Get all the Jobs Executions
      operationId: jobExecutionList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - description: The start date to filter the results.
          name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - description: The end date to filter the results.
          name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/askTotalCount'
      responses:
        '200':
          description: The list of the Executions of the Job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobExecutionListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/executions/{executionId}':
    get:
      tags:
        - Job - Execution
      summary: Get a single Job Execution
      operationId: jobExecutionGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - name: executionId
          in: path
          description: The ID of the Job Execution on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Job Execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobExecution'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/executions/{executionId}/targets':
    get:
      tags:
        - Job - Execution
      summary: Get all the targets involved in a single Job Execution
      operationId: jobExecutionListTarget
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D~1executions~1%7BexecutionId%7D/get/parameters/2'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the targets involved in a single Job Execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobTargetListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/executions/_count':
    post:
      tags:
        - Job - Execution
      summary: Count the Jobs Executions
      operationId: jobExecutionCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/executions/_query':
    post:
      tags:
        - Job - Execution
      summary: Query the Jobs Executions
      operationId: jobExecutionQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobExecutionListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/targets':
    get:
      tags:
        - Job - Target
      summary: Get all the Jobs Targets
      operationId: jobTargetList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/askTotalCount'
      responses:
        '200':
          description: The list of the Targets of the Job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobTargetListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Job - Target
      summary: Create a new Job Target
      operationId: jobTargetCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        description: An object containing the properties for the new Job Target to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jobTargetCreator'
        required: true
      responses:
        '201':
          description: The Job Target that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/targets/{targetId}':
    get:
      tags:
        - Job - Target
      summary: Get a single Job Target
      operationId: jobTargetGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - name: targetId
          in: path
          description: The entity ID of the on which perform the operations
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Job Target
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobTarget'
              examples:
                Successfully processed Job Target:
                  value:
                    type: jobTarget
                    id: Y-vYl9TKaf8
                    scopeId: AQ
                    createdOn: '2019-12-06T11:00:02.000Z'
                    createdBy: AQ
                    modifiedOn: '2019-12-06T11:01:00.000Z'
                    modifiedBy: AQ
                    optlock: 2
                    jobId: auSoU2ph1bY
                    jobTargetId: VBk_ZDZSOV0
                    status: PROCESS_OK
                    stepIndex: 0
                Failed processed Job Target:
                  value:
                    type: jobTarget
                    id: Y-vYl9TKaf8
                    scopeId: AQ
                    createdOn: '2019-12-06T11:00:02.000Z'
                    createdBy: AQ
                    modifiedOn: '2019-12-06T11:01:00.000Z'
                    modifiedBy: AQ
                    optlock: 2
                    jobId: SaSaU2ph1bY
                    jobTargetId: VAR1ZDZSOV0
                    status: PROCESS_FAILED
                    statusMessage: Device not connected
                    stepIndex: 0
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Job - Target
      summary: Delete a single Job Target
      operationId: jobTargetDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D~1targets~1%7BtargetId%7D/get/parameters/2'
      responses:
        '204':
          description: The Job Target has been deleted
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/targets/{targetId}/executions':
    get:
      tags:
        - Job - Target
      summary: Get all the Executions in which a single Job Target was involved
      operationId: jobTargetListExecution
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D~1targets~1%7BtargetId%7D/get/parameters/2'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: A list of all the Executions in which a single Job Target was involved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobExecutionListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/targets/_count':
    post:
      tags:
        - Job - Target
      summary: Count the Jobs Targets
      operationId: jobTargetCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/targets/_query':
    post:
      tags:
        - Job - Target
      summary: Query the Jobs Targets
      operationId: jobTargetQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobTargetListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/triggers':
    get:
      tags:
        - Job - Trigger
      summary: Get all the Jobs Triggers
      operationId: jobTriggerList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - name: name
          in: query
          description: The job trigger name to filter results
          schema:
            type: string
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/askTotalCount'
      responses:
        '200':
          description: The list of the Trigger of the Job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobTriggerListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Job - Trigger
      summary: Create a new Job Trigger
      operationId: jobTriggerCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        description: An object containing the properties for the new Job Trigger to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jobTriggerCreator'
        required: true
      responses:
        '201':
          description: The Job Trigger that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/triggers/{triggerId}':
    get:
      tags:
        - Job - Trigger
      summary: Get a single Job Trigger
      operationId: jobTriggerGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - name: triggerId
          in: path
          description: The ID of the Job Trigger on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Job Trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobTrigger'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Job - Trigger
      summary: Update a single Job Trigger
      operationId: jobTriggerUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D~1triggers~1%7BtriggerId%7D/get/parameters/2'
      requestBody:
        description: An object containing the new properties for the Job Trigger to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jobTrigger'
        required: true
      responses:
        '200':
          description: The details of the updated Job Trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobTrigger'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Job - Trigger
      summary: Delete a single Job Trigger
      operationId: jobTriggerDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D~1triggers~1%7BtriggerId%7D/get/parameters/2'
      responses:
        '204':
          description: The Job Trigger has been deleted
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/triggers/_count':
    post:
      tags:
        - Job - Trigger
      summary: Count the Jobs Triggers
      operationId: jobTriggerCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/triggers/_query':
    post:
      tags:
        - Job - Trigger
      summary: Query the Jobs Triggers
      operationId: jobTriggerQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobTriggerListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/triggerDefinitions':
    get:
      tags:
        - Job - Trigger Definition
      summary: Get all the Trigger Definitions
      operationId: triggerDefinitionList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Trigger Definitions available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/triggerDefinitionListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/triggerDefinitions/{triggerDefinitionId}':
    get:
      tags:
        - Job - Trigger Definition
      summary: Get a single Trigger Definition
      operationId: triggerDefinitionGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: triggerDefinitionId
          in: path
          description: The ID of the Trigger Definition on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Trigger Definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/triggerDefinition'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/triggerDefinitions/_query':
    post:
      tags:
        - Job - Trigger Definition
      summary: Query the Trigger Definitions
      operationId: triggerDefinitionQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/triggerDefinitionListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/triggerDefinitions/_count':
    post:
      tags:
        - Job - Trigger Definition
      summary: Count the Trigger Definitions
      operationId: triggerDefinitionCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/triggers/{triggerId}/fired':
    get:
      tags:
        - Job - Trigger Fired
      summary: Get all the Jobs Trigger Fired
      operationId: jobTriggerFiredList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - name: triggerId
          in: path
          description: The ID of the Job Trigger on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
        - name: status
          in: query
          description: |
            The optional status of the Fired Trigger

            Allowed values:
            - FIRED
            - FAILED
          schema:
            type: string
            enum:
              - FIRED
              - FAILED
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Job Trigger Fired available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/firedTriggerListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/triggers/{triggerId}/fired/_count':
    post:
      tags:
        - Job - Trigger Fired
      summary: Count the Jobs Trigger Fired
      operationId: jobTriggerFiredCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D~1triggers~1%7BtriggerId%7D~1fired/get/parameters/2'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/triggers/{triggerId}/fired/_query':
    post:
      tags:
        - Job - Trigger Fired
      summary: Query the Jobs Trigger Fired
      operationId: jobTriggerFiredQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D~1triggers~1%7BtriggerId%7D~1fired/get/parameters/2'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The list of the Job Trigger Fired available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/firedTriggerListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/steps':
    get:
      tags:
        - Job - Step
      summary: Get all the Jobs Steps
      operationId: jobStepList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - name: name
          in: query
          description: The job step name to filter results
          schema:
            type: string
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/askTotalCount'
      responses:
        '200':
          description: The list of the Steps of the Job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobStepListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Job - Step
      summary: Create a new Job Step
      operationId: jobStepCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        description: An object containing the properties for the new Job Step to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jobStepCreator'
        required: true
      responses:
        '201':
          description: The Job Step that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobStep'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/entityUniqueness'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/steps/{stepId}':
    get:
      tags:
        - Job - Step
      summary: Get a single Job Step
      operationId: jobStepGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - name: stepId
          in: path
          description: The ID of the Job Step on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Job Step
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobStep'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Job - Step
      summary: Update a single Job Step
      operationId: jobStepUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D~1steps~1%7BstepId%7D/get/parameters/2'
      requestBody:
        description: An object containing the new properties for the Job Step to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jobStep'
        required: true
      responses:
        '200':
          description: The details of the updated Job Step
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobStep'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Job - Step
      summary: Delete a single Job Step
      operationId: jobStepDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D~1steps~1%7BstepId%7D/get/parameters/2'
      responses:
        '204':
          description: The Job Step has been deleted
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/steps/_count':
    post:
      tags:
        - Job - Step
      summary: Count the Jobs Steps
      operationId: jobStepCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/steps/_query':
    post:
      tags:
        - Job - Step
      summary: Query the Jobs Steps
      operationId: jobStepQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobStepListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobStepDefinitions':
    get:
      tags:
        - Job - Step Definition
      summary: Get all the Jobs Step Definitions
      operationId: jobStepDefinitionList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Jobs Step Definitions available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobStepDefinitionListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobStepDefinitions/{jobStepDefinitionId}':
    get:
      tags:
        - Job - Step Definition
      summary: Get a single Job Step Definition
      operationId: jobStepDefinitionGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: jobStepDefinitionId
          in: path
          description: The ID of the Job Step Definition on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Job Step Definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobStepDefinition'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobStepDefinitions/_query':
    post:
      tags:
        - Job - Step Definition
      summary: Query the Jobs Step Definitions
      operationId: jobStepDefinitionQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobStepDefinitionListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobStepDefinitions/_count':
    post:
      tags:
        - Job - Step Definition
      summary: Count the Jobs Step Definitions
      operationId: jobStepDefinitionCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/roles':
    get:
      tags:
        - Role
      summary: Get all the roles
      operationId: roleList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: name
          in: query
          description: The role name to filter results
          schema:
            type: string
        - name: matchTerm
          in: query
          description: |
            A term to match on different fields. Every entity whose at least one of the specified fields starts with this value will be matched.
            Matches on the following fields:

              - DESCRIPTION
              - NAME
          schema:
            type: string
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/sortParam'
        - name: sortDir
          in: query
          description: 'The sort direction. Can be ASCENDING (default), DESCENDING. Case-insensitive (except for "clientId" parameter).'
          schema:
            type: string
            enum:
              - ASCENDING
              - DESCENDING
            default: ASCENDING
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Roles available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roleListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Role
      summary: Create a new Role
      operationId: roleCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing the properties for the new Role to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roleCreator'
        required: true
      responses:
        '201':
          description: The Role that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/role'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/roles/{roleId}':
    get:
      tags:
        - Role
      summary: Get a single Role
      operationId: roleGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: roleId
          in: path
          description: The ID of the Role on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/role'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Role
      summary: Update a single Role
      operationId: roleUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1roles~1%7BroleId%7D/get/parameters/1'
      requestBody:
        description: An object containing the new properties for the Role to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/role'
            example:
              optlock: 1
              name: new-role-2
              description: A new Description for a new Role
        required: true
      responses:
        '200':
          description: The details of the updated Role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/role'
              example:
                type: role
                id: KmhOD4JHfwk
                scopeId: AQ
                createdOn: '2019-09-16T07:33:26.719Z'
                createdBy: AQ
                modifiedOn: '2019-09-16T07:41:37.001Z'
                modifiedBy: AQ
                optlock: 2
                name: new-role-2
                description: A new Description for a new Role
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Role
      summary: Delete a single Role
      operationId: roleDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1roles~1%7BroleId%7D/get/parameters/1'
      responses:
        '204':
          description: The Role has been deleted
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/roles/_count':
    post:
      tags:
        - Role
      summary: Count the Roles
      operationId: roleCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/roles/_query':
    post:
      tags:
        - Role
      summary: Query the Roles
      operationId: roleQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roleListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/roles/{roleId}/permissions':
    get:
      tags:
        - Role
      summary: Get all the Role Permissions
      operationId: rolePermissionList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1roles~1%7BroleId%7D/get/parameters/1'
        - name: name
          in: query
          description: The domain name to filter results
          schema:
            type: string
        - name: action
          in: query
          description: The action to filter results
          schema:
            type: string
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the RolePermissions available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rolePermissionListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Role
      summary: Create a new RolePermission
      operationId: rolePermissionCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1roles~1%7BroleId%7D/get/parameters/1'
      requestBody:
        description: An object containing the properties for the new RolePermission to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rolePermissionCreator'
            example:
              permission:
                domain: account
                action: read
                forwardable: true
        required: true
      responses:
        '201':
          description: The Role Permissionthat has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rolePermission'
              example:
                type: rolePermission
                id: BpbQqk31GLc
                scopeId: AQ
                createdOn: '2019-09-16T07:49:51.117Z'
                createdBy: AQ
                roleId: OYLRT30Z9sA
                permission:
                  domain: domain
                  action: read
                  forwardable: true
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/entityUniqueness'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/roles/{roleId}/permissions/{rolePermissionId}':
    get:
      tags:
        - Role
      summary: Get a single RolePermission
      operationId: rolePermissionGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1roles~1%7BroleId%7D/get/parameters/1'
        - name: rolePermissionId
          in: path
          description: The ID of the RolePermission on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired RolePermission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rolePermission'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Role
      summary: Delete a single RolePermission
      operationId: rolePermissionDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1roles~1%7BroleId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1roles~1%7BroleId%7D~1permissions~1%7BrolePermissionId%7D/get/parameters/2'
      responses:
        '204':
          description: The RolePermission has been deleted
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/roles/{roleId}/permissions/_count':
    post:
      tags:
        - Role
      summary: Count the RolePermissions
      operationId: rolePermissionCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1roles~1%7BroleId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/roles/{roleId}/permissions/_query':
    post:
      tags:
        - Role
      summary: Query the RolePermissions
      operationId: rolePermissionQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1roles~1%7BroleId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rolePermissionListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/roles/{roleId}/users':
    get:
      tags:
        - Role
      summary: Get all the Users for the given Role
      operationId: roleListUsers
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1roles~1%7BroleId%7D/get/parameters/1'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Users assigned to the given Role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/serviceConfigurations':
    get:
      tags:
        - Service Configuration
      summary: Read multiple Configurations
      operationId: serviceConfigurationsRead
      parameters:
        - $ref: '#/components/parameters/scopeId'
      responses:
        '200':
          description: The list of the Configurations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceComponentConfigurations'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Service Configuration
      summary: Update multiple Configurations
      operationId: serviceConfigurationsWrite
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serviceComponentConfigurationsInput'
        required: true
      responses:
        '200':
          description: The list of the Configurations
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/serviceConfigurations/{componentId}':
    get:
      tags:
        - Service Configuration
      summary: Read a single Configuration
      operationId: serviceConfigurationRead
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: componentId
          in: path
          description: The ID of the Component on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The Configuration details of a single Service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceComponentConfigurations'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Service Configuration
      summary: Update a single Configuration
      operationId: serviceConfigurationWrite
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1serviceConfigurations~1%7BcomponentId%7D/get/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serviceComponentConfigurationInput'
        required: true
      responses:
        '200':
          description: Updates the Configuration details of a single Service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceComponentConfiguration'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  /sys-info:
    get:
      tags:
        - System Info
      summary: Get the system info
      responses:
        '200':
          description: System info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/systemInfo'
  '/{scopeId}/streams/messages':
    post:
      tags:
        - Stream
      summary: Publish a message
      operationId: streamMessage
      description: 'Publishes a fire-and-forget message to a topic composed of [account-name] / [client-id] / [semtantic-parts]'
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: timeout
          in: query
          description: The timeout for the request in milliseconds
          schema:
            type: integer
            default: 30000
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataMessage'
            example:
              capturedOn: '2019-09-12T09:25:05.096Z'
              channel:
                type: kapuaDataChannel
                semanticParts:
                  - heater
                  - data
              clientId: Client-Id-1
              deviceId: IaIA6xbNR7E
              payload:
                metrics:
                  - valueType: string
                    value: 5
                    name: temperatureExternal
                  - valueType: string
                    value: 20
                    name: temperatureInternal
                  - valueType: string
                    value: 30
                    name: temperatureExhaust
                  - valueType: string
                    value: 0
                    name: errorCode
              receivedOn: '2019-09-12T09:25:05.102Z'
              sentOn: '2019-09-12T09:25:05.096Z'
              timestamp: '2019-09-12T09:25:05.096Z'
      responses:
        '204':
          description: The message has been sent successfully
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/tags':
    get:
      tags:
        - Tag
      summary: Get all the Tags
      operationId: tagList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: name
          in: query
          description: The tag name to filter results
          schema:
            type: string
        - name: matchTerm
          in: query
          description: |
            A term to match on different fields. Every entity whose at least one of the specified fields starts with this value will be matched.
            Matches on the following fields:

              - DESCRIPTION
              - NAME
          schema:
            type: string
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Tags available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tagListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Tag
      summary: Create a new Tag
      operationId: tagCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing the properties for the new Tag to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tagCreator'
        required: true
      responses:
        '201':
          description: The Tag that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tag'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/tags/{tagId}':
    get:
      tags:
        - Tag
      summary: Get a single Tag
      operationId: tagGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: tagId
          in: path
          description: The ID of the Tag on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tag'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Tag
      summary: Update a single Tag
      operationId: tagUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1tags~1%7BtagId%7D/get/parameters/1'
      requestBody:
        description: An object containing the new properties for the Tag to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tag'
            example:
              optlock: 1
              name: new-tag
              description: A new Description for a new Tag
        required: true
      responses:
        '200':
          description: The details of the updated Tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tag'
              example:
                type: tag
                id: FJ6-FLuIcok
                scopeId: AQ
                createdOn: '2019-09-16T08:52:32.562Z'
                createdBy: AQ
                modifiedOn: '2019-09-16T08:55:43.719Z'
                modifiedBy: AQ
                optlock: 2
                name: new-tag
                description: A new Description for a new Tag
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Tag
      summary: Delete a single Tag
      operationId: tagDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1tags~1%7BtagId%7D/get/parameters/1'
      responses:
        '204':
          description: The Tag has been deleted
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/tags/_count':
    post:
      tags:
        - Tag
      summary: Count the Tags
      operationId: tagCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/tags/_query':
    post:
      tags:
        - Tag
      summary: Query the Tags
      operationId: tagQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tagListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/users':
    get:
      tags:
        - User
      summary: Get all the Users
      operationId: userList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: name
          in: query
          description: The user name to filter results
          schema:
            type: string
        - name: matchTerm
          in: query
          description: |
            A term to match on different fields. Every entity whose at least one of the specified fields starts with this value will be matched.
            Matches on the following fields:

            - NAME
            - EMAIL
            - PHONE_NUMBER
            - DISPLAY_NAME
            - EXTERNAL_ID
            - DESCRIPTION
          schema:
            type: string
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Users available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - User
      summary: Create a new User
      operationId: userCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing the properties for the new User to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userCreator'
            examples:
              minimal:
                description: Create an User providing only the required information (name)
                value:
                  name: new-user
              complete:
                description: Create an User providing all the information
                value:
                  $ref: '#/components/schemas/userCreator'
        required: true
      responses:
        '201':
          description: The User that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
              examples:
                minimal:
                  description: An User created with only the required information (username)
                  value:
                    type: user
                    id: TvnAZL6Zzu0
                    scopeId: AQ
                    createdOn: '2019-09-11T09:07:09.853Z'
                    createdBy: AQ
                    modifiedOn: '2019-09-11T09:07:09.853Z'
                    modifiedBy: AQ
                    optlock: 1
                    name: new-user
                    status: ENABLED
                    userType: INTERNAL
                complete:
                  description: An User created providing all the information
                  value:
                    $ref: '#/components/schemas/user/allOf/2/example'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/users/{userId}':
    get:
      tags:
        - User
      summary: Get a single User
      operationId: userGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: userId
          in: path
          description: The ID of the User on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - User
      summary: Update a single User
      operationId: userUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1users~1%7BuserId%7D/get/parameters/1'
      requestBody:
        description: An object containing the new properties for the User to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
            example:
              type: user
              optlock: 2
              name: donald-duck
              displayName: Donald Duck
              email: donald.duck@duckburg.org
              phoneNumber: +1 (555) 816 1851
              status: ENABLED
              userType: INTERNAL
        required: true
      responses:
        '200':
          description: The details of the updated User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - User
      summary: Delete a single User
      operationId: userDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1users~1%7BuserId%7D/get/parameters/1'
      responses:
        '204':
          description: The User has been deleted
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/users/_count':
    post:
      tags:
        - User
      summary: Count the Users
      operationId: userCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/users/_query':
    post:
      tags:
        - User
      summary: Query the Users
      operationId: userQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userListResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/users/{userId}/mfa':
    get:
      tags:
        - User - Mfa
      summary: Get the MfaOption of this User
      operationId: mfaOptionGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1users~1%7BuserId%7D/get/parameters/1'
      responses:
        '200':
          description: The details of the desired MfaOption
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mfaOption'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - User - Mfa
      summary: Create a new MfaOption
      operationId: mfaOptionCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1users~1%7BuserId%7D/get/parameters/1'
      requestBody:
        description: An object containing the properties for the new MfaOption to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mfaOptionCreator'
        required: true
      responses:
        '201':
          description: The MfaOption that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mfaOption'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - User - Mfa
      summary: Delete a single MfaOption
      operationId: mfaOptionDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1users~1%7BuserId%7D/get/parameters/1'
      responses:
        '204':
          description: The MfaOption has been deleted
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/users/{userId}/mfa/disableTrust':
    delete:
      tags:
        - User - Mfa
      summary: Disable trusted machine for a MfaOption
      operationId: mfaOptionDisableTrust
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1users~1%7BuserId%7D/get/parameters/1'
      responses:
        '204':
          description: The trusted machine has been disabled for the User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mfaOption'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/user/credentials/password':
    post:
      tags:
        - User Credentials
      summary: Change the user password
      operationId: passwordChangeRequest
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/passwordChangeRequest'
      responses:
        '200':
          description: The details of the updated Credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credential'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Change logged user password
  '/{scopeId}/user/credentials/{credentialId}/_reset':
    post:
      tags:
        - User Credentials
      summary: Reset the password of a Credential
      operationId: credentialPasswordReset
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1credentials~1%7BcredentialId%7D/get/parameters/1'
      requestBody:
        description: The new password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/passwordResetRequest'
        required: true
      responses:
        '204':
          description: The updated Credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credential'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/user/profile/':
    get:
      tags:
        - User Profile
      summary: Get the User Profile
      operationId: userProfileGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
      responses:
        '200':
          description: The desired user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userProfile'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - User Profile
      summary: Change the User Profile
      operationId: userProfileUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userProfile'
      responses:
        '200':
          description: The user profile has been updated
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Change logged user profile
components:
  parameters:
    scopeId:
      name: scopeId
      in: path
      description: |
        The ID of the Scope where to perform the operation.
      schema:
        allOf:
          - $ref: '#/components/schemas/kapuaId'
        default: _
      required: true
    limit:
      name: limit
      in: query
      description: A Limit on the result size. The result set will not contain more items than this number
      schema:
        type: integer
        default: 50
    offset:
      name: offset
      in: query
      description: 'An Offset on the result size. Used to skip the first `n` items of a result set, with `n` equal to the value of `offset`'
      schema:
        type: integer
        default: 0
    askTotalCount:
      name: askTotalCount
      in: query
      description: 'If true, the total count of the entities matching the query will be included in the result set'
      schema:
        type: boolean
        default: false
    sortParam:
      name: sortParam
      in: query
      description: The name of the parameter that will be used as a sorting key
      schema:
        type: string
    sortDir:
      name: sortDir
      in: query
      description: 'The sort direction. Can be ASCENDING (default), DESCENDING. Case-insensitive.'
      schema:
        type: string
        enum:
          - ASCENDING
          - DESCENDING
        default: ASCENDING
  schemas:
    kapuaId:
      type: string
      pattern: '[A-Za-z0-9-_=]+'
      description: 'The standard format for any ID in Kapua. It''s encoded as a [base64url URL- and filename-safe (RFC 4648 Â§5)](https://tools.ietf.org/html/rfc4648#section-5)'
    kapuaEntity:
      description: 'A standard Entity, that doesn''t support edits and versioning. All the objects (except for Datastore objects) in Kapua are Entities'
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
            - description: The ID of the Entity
              readOnly: true
        scopeId:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
            - description: The ID of the Scope containing the Entity
              readOnly: true
        createdOn:
          description: The date and time when this entity was created
          type: string
          format: date-time
          readOnly: true
        createdBy:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
            - description: The ID of the Entity who created this Entity
              readOnly: true
    kapuaUpdatableEntity:
      allOf:
        - $ref: '#/components/schemas/kapuaEntity'
        - description: An Entity that also supports edits and versioning
          type: object
          properties:
            modifiedOn:
              description: The date and time when this entity was modified
              type: string
              format: date-time
              readOnly: true
            modifiedBy:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the Entity who modified this Entity
                  readOnly: true
            optlock:
              description: |
                The optlock field is used to detect that this entity has not been modified by someone else. When updating an entity, first do a find to get the latest version of the entity and note the value of the optlock. Then in the update operation, set the optlock value to match the value that you found. If someone else has updated the entity between your find and update operations, the update will fail and the db/server will return an error.\
                See this [StackOverflow question](http://stackoverflow.com/questions/129329/optimistic-vs-pessimistic-locking) for more information on optimistic locking
              type: integer
    kapuaNamedEntity:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - description: An UpdatableEntity that also has a name and a description
          type: object
          properties:
            name:
              description: The name of the Entity
              type: string
            description:
              description: The description of the Entity
              type: string
    kapuaQuery:
      description: A base object for all Queries
      type: object
      properties:
        limit:
          description: A Limit on the result size. The result set will not contain more items than this number
          type: integer
          default: 50
        offset:
          description: 'An Offset on the result size. Used to skip the first `n` items of a result set, with `n` equal to the value of `offset`'
          type: integer
          default: 0
        askTotalCount:
          description: 'A flag to ask the total results count in the response, in addition to the data set as requested with the `offset` and `limit` parameters'
          type: boolean
          default: false
      example:
        offset: 0
        limit: 50
    kapuaEntityCreator:
      description: An object that contains the informations needed to create an Entity
      type: object
    kapuaUpdatableEntityCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaEntityCreator'
        - description: An object that contains the informations needed to create an Updatable Entity
          type: object
    kapuaNamedEntityCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntityCreator'
        - description: An object that contains the informations needed to create a Named Entity
          type: object
          properties:
            name:
              description: The name of the Entity
              type: string
            description:
              description: The description of the Entity
              type: string
          required:
            - name
    kapuaError:
      description: The base object to represent an Error
      properties:
        message:
          type: string
          description: An extended description of the error that occurred when performing the operation
        kapuaErrorCode:
          type: string
          description: An human readable error code that can be used to
    kapuaListResult:
      description: A container for all the Entities List
      type: object
      properties:
        limitExceeded:
          description: A flag indicating if more results are available but were not returned because of the limit imposed in the query
          type: boolean
        size:
          description: The size of the list containing the items
          type: integer
        totalCount:
          description: The total count of the elements that matched the query. Available only if `askTotalCount` was `true` in the query object.
          type: integer
      required:
        - limitedExceeded
        - size
    kapuaCountResult:
      type: object
      properties:
        count:
          type: integer
          description: The total count of the Entities available in the Scope
    action:
      type: string
      enum:
        - READ
        - CREATE
        - WRITE
        - DELETE
        - OPTIONS
        - EXECUTE
        - SUBMIT
        - CANCEL
        - SENT
    accessInfo:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - description: An AccessInfo represents all the security objects (Roles and Permissions) that can be attached to a User. There will be exactly one AccessInfo object for every User
          type: object
          properties:
            userId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the User to which this AccessInfo is attached to
          example:
            type: accessInfo
            id: AQ
            scopeId: AQ
            createdOn: '2019-09-10T15:08:50.799Z'
            createdBy: AQ
            modifiedOn: '2019-09-10T15:08:50.799Z'
            modifiedBy: AQ
            optlock: 0
            userId: AQ
    accessInfoCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaEntityCreator'
        - description: An object that contains the informations needed to create an AccessInfo
          type: object
          properties:
            permissions:
              description: An Array of Permission objects to attach to the new AccessInfo
              type: array
              items:
                $ref: '#/components/schemas/permission'
            userId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the User to which the AccessInfo will be assigned
            roleIds:
              description: An Array of IDs whose Roles will be attached to the new AccessInfo
              type: array
              items:
                $ref: '#/components/schemas/kapuaId'
          example:
            permissions:
              - domain: broker
                action: connect
                targetScopeId: AQ
                forwardable: false
            userId: fjo0iXJEQh0
            roleIds:
              - CdIaNmq-Ggk
    accessInfoListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - description: A container for a list of AccessInfo objects
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/accessInfo'
          example:
            type: accessInfoListResult
            limitExceeded: false
            size: 2
            items:
              - type: accessInfo
                id: Ag
                scopeId: AQ
                createdOn: '2019-09-10T15:08:50.799Z'
                createdBy: AQ
                modifiedOn: '2019-09-10T15:08:50.799Z'
                modifiedBy: AQ
                optlock: 0
                userId: Ag
              - type: accessInfo
                id: AQ
                scopeId: AQ
                createdOn: '2019-09-10T15:08:50.799Z'
                createdBy: AQ
                modifiedOn: '2019-09-10T15:08:50.799Z'
                modifiedBy: AQ
                optlock: 0
                userId: AQ
    permission:
      description: The representation of a Permission
      type: object
      properties:
        domain:
          description: The domain name in which the Permission acts. `*` means "Any Domains"
          type: string
        action:
          description: The action that is permitted. `*` means "Any Action in the given Domain"
          type: string
        groupId:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
            - description: The ID of the Group to which the Permission applies. A `null` value means "Any group in the Scope"
        targetScopeId:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
            - description: The Scope ID to which the Permission applies. A `null` value means "Any scope in the system"
        forwardable:
          description: 'When `true`, this permission is also active descending the entire Accounts hierarchy'
          type: boolean
      example:
        domain: broker
        action: connect
        targetScopeId: AQ
        forwardable: false
    accessPermission:
      allOf:
        - $ref: '#/components/schemas/kapuaEntity'
        - description: An object that represents the link between an AccessInfo and a Permission
          type: object
          properties:
            accessInfoId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the AccessInfo
            permission:
              $ref: '#/components/schemas/permission'
          example:
            type: accessPermission
            id: AQ
            scopeId: AQ
            createdOn: '2019-11-12T14:15:47.000Z'
            createdBy: AQ
            accessInfoId: Ag
            permission:
              domain: broker
              action: connect
              targetScopeId: AQ
              forwardable: false
    accessPermissionCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaEntityCreator'
        - description: An object that contains the informations needed to create an AccessPermission
          type: object
          properties:
            accessInfoId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the AccessInfo to which attach the Permission
            permission:
              $ref: '#/components/schemas/permission'
          required:
            - accessInfoId
            - permission
    accessPermissionListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - description: A container for a list of AccessPermission objects
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/accessPermission'
          example:
            type: accessPermissionListResult
            limitExceeded: false
            size: 1
            items:
              - type: accessPermission
                id: Io4dVUnrBtE
                scopeId: AQ
                createdOn: 2019-09-11T14:14:15.786Z
                createdBy: AQ
                accessInfoId: FPRcCYjzgqs
                permission:
                  domain: broker
                  action: connect
                  forwardable: false
    accessRole:
      allOf:
        - $ref: '#/components/schemas/kapuaEntity'
        - description: An object that represents the link between an AccessInfo and a Role
          type: object
          properties:
            accessInfoId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the AccessInfo
            roleId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the Role attached to the AccessInfo
    accessRoleCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaEntityCreator'
        - description: An object that contains the informations needed to create an AccessRole
          type: object
          properties:
            accessInfoId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the AccessInfo to which attach the Permission
            roleId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the AccessInfo
          required:
            - accessInfoId
            - roleId
    accessRoleListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - description: A container for a list of AccessRole objects
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/accessRole'
    account:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - description: |
            An object that holds all the informations pertaining an Account, including the details about the Contacts of that account.\
            In Kapua an Account is the container of all other resources (Users, Devices, etc.), and is the equivalent of the concept of Tenant.\
            Every entity in Kapua will have a `scopeId` property, that holds the ID of the Account who holds that entity.
          type: object
          properties:
            organization:
              type: object
              properties:
                name:
                  type: string
                  description: The Name of the Organization
                addressLine1:
                  type: string
                  description: First line of the Address for the Organization
                addressLine2:
                  type: string
                  description: Second line of the Address for the Organization
                addressLine3:
                  type: string
                  description: Third line of the Address for the Organization
                zipPostCode:
                  type: string
                  description: The Zip / Postcode for the Organization
                city:
                  type: string
                  description: The City of the Organization
                stateProvinceCounty:
                  type: string
                  description: The State / Province / County of the Organization
                country:
                  type: string
                  description: The Country of the Organization
                personName:
                  type: string
                  description: The Name of the Person listed as a Contact for the Organization
                email:
                  type: string
                  description: The Email Address of the Person listed as a Contact for the Organization
                phoneNumber:
                  type: string
                  description: The Phone Number of the Person listed as a Contact for the Organization
              description: An object containing all the informations related to the Organization who holds the account
            expirationDate:
              type: string
              format: date-time
              description: 'The Expiration date and time for the Account. If empty, the Account has no expiration'
            parentAccountPath:
              type: string
              description: The full Scope ID Hierarchy for the Account
          example:
            type: account
            id: LgJHjS2jvdE
            scopeId: AQ
            createdOn: '2019-09-09T10:21:03.775Z'
            createdBy: AQ
            modifiedOn: '2019-09-09T10:21:03.789Z'
            modifiedBy: AQ
            optlock: 2
            name: acme-inc
            expirationDate: '2019-12-31T00:00:00.000Z'
            organization:
              addressLine1: 123 Looney Tunes Drive
              addressLine2: Block 1
              addressLine3: Apartment 25
              city: Somewhere City
              country: United States
              email: wile.coyote@acme.inc
              name: ACME Inc.
              personName: Wile Ethelbert Coyote
              phoneNumber: +1 (555) 123 4567
              stateProvinceCounty: 'Green County, GC'
              zipPostCode: '00100'
            parentAccountPath: /1/3315290947379772881
    accountCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntityCreator'
        - description: An object with all the information needed to create a new Account
          type: object
          properties:
            organizationName:
              type: string
              description: The Name of the Organization
            organizationAddressLine1:
              type: string
              description: First line of the Address for the Organization
            organizationAddressLine2:
              type: string
              description: Second line of the Address for the Organization
            organizationAddressLine3:
              type: string
              description: Third line of the Address for the Organization
            organizationZipPostCode:
              type: string
              description: The Zip / Postcode for the Organization
            organizationCity:
              type: string
              description: The City of the Organization
            organizationStateProvinceCounty:
              type: string
              description: The State / Province / County of the Organization
            organizationCountry:
              type: string
              description: The Country of the Organization
            organizatioPpersonName:
              type: string
              description: The Name of the Person listed as a Contact for the Organization
            organizationEmail:
              type: string
              format: email
              description: The Email Address of the Person listed as a Contact for the Organization
            phoneNumber:
              type: string
              description: The Phone Number of the Person listed as a Contact for the Organization
            expirationDate:
              type: string
              format: date-time
              description: The Expiration date and time for the Account
          required:
            - organizationName
            - organizationEmail
          example:
            name: acme-inc
            organizationName: ACME Inc.
            organizationEmail: wile.coyote@acme.inc
            organizationAddressLine1: 123 Looney Tunes Drive
            organizationAddressLine2: Block 1
            organizationAddressLine3: Apartment 25
            organizationZipPostCode: '00100'
            organizationCity: Somewhere City
            organizationStateProvinceCounty: 'Green County, GC'
            organizationCountry: United States
            organizationPersonName: Wile Ethelbert Coyote
            organizationPhoneNumber: +1 (555) 123 4567
            expirationDate: '2019-12-31T00:00:00.000Z'
    accountListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - description: A list container for Account objects
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/account'
          example:
            type: accountListResult
            size: 1
            limitExceeded: false
            items:
              - type: account
                id: LgJHjS2jvdE
                scopeId: AQ
                createdOn: '2019-09-09T10:21:03.775Z'
                createdBy: AQ
                modifiedOn: '2019-09-09T10:21:03.789Z'
                modifiedBy: AQ
                optlock: 2
                name: acme-inc
                organization:
                  addressLine1: 123 Looney Tunes Drive
                  addressLine2: Block 1
                  addressLine3: Apartment 25
                  city: Somewhere City
                  country: United States
                  email: wile.coyote@acme.inc
                  name: ACME Inc.
                  personName: Wile Ethelbert Coyote
                  phoneNumber: +1 (555) 123 4567
                  stateProvinceCounty: 'Green County, GC'
                  zipPostCode: '00100'
                parentAccountPath: /1/3315290947379772881
    accessToken:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - type: object
          properties:
            userId:
              $ref: '#/components/schemas/kapuaId'
            tokenId:
              type: string
              pattern: '^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$'
            expiresOn:
              type: string
              format: date-time
            invalidatedOn:
              type: string
              format: date-time
            refreshToken:
              type: string
              format: uuid
            refreshExpiresOn:
              type: string
              format: date-time
            trustKey:
              type: string
              description: A long-lived key to be used within an authentication with MFA from a trusted machine
              pattern: '^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$'
    loginInfo:
      type: object
      properties:
        accessPermission:
          type: array
          items:
            $ref: '#/components/schemas/accessPermission'
        accessToken:
          $ref: '#/components/schemas/accessToken'
        rolePermissions:
          type: array
          items:
            $ref: '#/components/schemas/rolePermission'
      example:
        type: loginInfo
        accessPermission:
          - id: Jfzafs5eUuw
            scopeId: AQ
            createdOn: '2019-11-15T14:43:11.451Z'
            createdBy: AQ
            accessInfoId: IKfvOdNER6M
            permission:
              domain: datastore
              action: read
              targetScopeId: AQ
              forwardable: false
        accessToken:
          id: RSP1npB7wZ4
          scopeId: AQ
          createdOn: '2019-11-15T14:43:27.547Z'
          createdBy: UlM9TGpJJ-g
          modifiedOn: '2019-11-15T14:43:27.547Z'
          modifiedBy: UlM9TGpJJ-g
          optlock: 1
          tokenId: eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJodHRwczovL3d3dy5lY2xpcHNlLm9yZy9rYXB1YSIsImlhdCI6MTU3MzgyOTAwNywiZXhwIjoxNTczODMwODA3LCJzdWIiOiJVbE05VEdwSkotZyIsInNJZCI6IkFRIn0.LgVFKAl1Ftd3g81MhtUglee5JjCqd-gGjilj1UAkDbKs4Xwgo1j9V-CBVPF4aop3r0x80U9YaVthYoPEikG2v4QaRHl7UGeikWOHk4g0lpeFCZvS_Kcag6VgbfYKKXd2C2ivtQE3enjZIUEz2UTEXz3KrcizuvgO4SP_PEz5hGkjqfbV2l1IM--_E8LQRBQoD7ixpGajaUlcrNlLsJcNgy8hRgyNp_Bqbyosd4oBttC4oDIyVA9Wmgq8aXUwFl7SZ42Kd4RIUUlMg-aAIAzWXVMQ2kCY1jYy7eNUmLszWdmPjMZsKbFcB5asXXYiHvZ_zy0x9AHFRnFte721ESjG3NLlvx8UKOWLFBkmlbvgPLd5fhlzTzim57ddpTjJpRsTM123VSwKL6Ul3ZZKiADrBVi4By-C4BhIkS9hVfa-HzfWlQKUOJvpa7PuUuRT1XzxxSTwIjgE4XuNdxHRqJpJPg0XtAuN67KXhmXjeQUaDi05GvpV3VyhtO6_GjjoLRd934N2hBdgS6FLIYkxBVMNSyqzjg9QO_A6Yzul5JK8T6H-f7ZhlYsx3trkWw0I9jetQguPveChFY0xbeTHSW0PwyNpyXKBzIUQhwCH2zoI9LxUy7TV7yn5wN3IW5MocnOXtKG49BTIbslT4eccoTWhtFQafGu8OF0TN-QyMf0eGTQ
          userId: UlM9TGpJJ-g
          expiresOn: '2019-11-15T15:13:27.506Z'
          refreshToken: e8a53e18-0c6b-4f3c-9929-409069a9c66e
          refreshExpiresOn: '2019-11-15T19:43:27.506Z'
        rolePermission:
          - id: a716DxmV9TI
            scopeId: AQ
            createdOn: '2019-11-15T14:42:28.859Z'
            createdBy: AQ
            roleId: OgkB8tR0kF4
            permission:
              domain: device
              action: read
              targetScopeId: AQ
              forwardable: false
          - id: O0X0yIQo6NU
            scopeId: AQ
            createdOn: '2019-11-15T14:42:04.153Z'
            createdBy: AQ
            roleId: EUkieLf-Y8M
            permission:
              domain: user
              targetScopeId: AQ
              forwardable: false
    credential:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - description: An object containing all the information for a single Credential
          type: object
          properties:
            userId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
            credentialType:
              type: string
              enum:
                - PASSWORD
                - API_KEY
                - JWT
            credentialKey:
              type: string
              readOnly: true
            status:
              type: string
              enum:
                - ENABLED
                - DISABLED
            expirationDate:
              type: string
              format: date-time
            loginFailures:
              description: |
                A count of how many times an user failed to login with this Credential.
                This field is cleared after a successful login
              type: integer
            firstLoginFailure:
              description: |
                The moment when the first login failure has been recorded with this credential.
                This field is cleared after a successful login
              type: string
              format: date-time
            loginFailuresReset:
              description: |
                The moment when the failure attempts for this Credential will be reset.
                This field is cleared after a successful login
              type: string
              format: date-time
            lockoutReset:
              description: |
                The moment when this Credential will be enabled again after a lockout due to too many failures.
                This field is cleared after a successful login
              type: string
              format: date-time
    credentialCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntityCreator'
        - type: object
          properties:
            userId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
            credentialType:
              type: string
              enum:
                - PASSWORD
                - API_KEY
                - JWT
            credentialKey:
              type: string
            credentialStatus:
              type: string
              enum:
                - ENABLED
                - DISABLED
            expirationDate:
              type: string
              format: date-time
          example:
            userId: AQ
            credentialType: PASSWORD
            credentialKey: new-password-123!
            credentialStatus: ENABLED
            expirationDate: '2019-12-31T00:00:00.000Z'
    credentialListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/credential'
    channelInfo:
      type: object
      properties:
        id:
          type: string
          format: base64
        scopeId:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
            - readOnly: true
        clientId:
          type: string
        name:
          type: string
        firstMessageId:
          type: string
          format: uuid
        firstMessageOn:
          type: string
          format: date-time
        lastMessageId:
          type: string
          format: uuid
        lastMessageOn:
          type: string
          format: date-time
      example:
        type: channelInfo
        id: xny9A7OkTUcSYxJIGf3oMZHyZIvi4AcsFqJJbY1N2yg=
        scopeId: AQ
        clientId: Client-Id-1
        name: ALERT
        firstMessageId: 18739b9f-6d8b-42c2-a536-507b37dd5f2a
        firstMessageOn: '2019-09-12T08:04:13.920Z'
        lastMessageId: a3e69394-1c20-4446-b596-6fcc4a2028fe
        lastMessageOn: '2019-09-12T08:14:13.230Z'
    channelInfoListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/channelInfo'
            totalCount:
              type: integer
          example:
            type: channelInfoListResult
            limitExceeded: false
            size: 3
            totalCount: 3
            items:
              - type: channelInfo
                id: xny9A7OkTUcSYxJIGf3oMZHyZIvi4AcsFqJJbY1N2yg=
                scopeId: AQ
                clientId: Client-Id-1
                name: ALERT
                firstMessageId: 18739b9f-6d8b-42c2-a536-507b37dd5f2a
                firstMessageOn: '2019-09-12T08:04:13.920Z'
                lastMessageId: a3e69394-1c20-4446-b596-6fcc4a2028fe
                lastMessageOn: '2019-09-12T08:14:13.230Z'
              - type: channelInfo
                id: vkyqKinEY2/UhxHHz2XRsmz02NtRK5KCsA7Fa1ot6CI=
                scopeId: AQ
                clientId: Client-Id-1
                name: DIAG
                firstMessageId: 308b0c38-76fa-4530-bb68-8c4c285c1f17
                firstMessageOn: '2019-09-12T08:04:13.887Z'
                lastMessageId: 8c59cd10-f23e-435e-a523-0aa8e952da1e
                lastMessageOn: '2019-09-12T09:04:49.710Z'
              - type: channelInfo
                id: X0BcZAV6FfD+Wi9n4x5VOdHmSV/E6UpOTetaqpXAb+w=
                scopeId: AQ
                clientId: Client-Id-1
                name: heater/data
                firstMessageId: 3cec54f7-9633-4a68-ad5b-48f57ea7f0f3
                firstMessageOn: '2019-09-12T09:03:20.959Z'
                lastMessageId: a8597968-d785-42dd-9e04-1f15d42df774
                lastMessageOn: '2019-09-12T09:05:06.527Z'
    clientInfo:
      type: object
      properties:
        id:
          type: string
        scopeId:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
            - readOnly: true
        clientId:
          type: string
        firstMessageId:
          type: string
          format: uuid
        firstMessageOn:
          type: string
          format: date-time
        lastMessageId:
          type: string
          format: uuid
        lastMessageOn:
          type: string
          format: date-time
      example:
        type: clientInfo
        id: JOyqK0XfNrKYD5qcAe6MJyl3TMd6AjwzKnqQofb8USg=
        scopeId: AQ
        clientId: Client-Id-1
        firstMessageId: a2320c45-6791-4525-a552-adb163928303
        firstMessageOn: 2019-09-12T08:14:13.228Z
        lastMessageId: bb07d7fc-dc62-492f-b8da-7e28df69e112
        lastMessageOn: 2019-09-12T09:25:05.096Z
    clientInfoListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/clientInfo'
            totalCount:
              type: integer
          example:
            type: clientInfoListResult
            limitExceeded: false
            size: 1
            items:
              type: clientInfo
              id: JOyqK0XfNrKYD5qcAe6MJyl3TMd6AjwzKnqQofb8USg=
              scopeId: AQ
              clientId: Client-Id-1
              firstMessageId: a2320c45-6791-4525-a552-adb163928303
              firstMessageOn: 2019-09-12T08:14:13.228Z
              lastMessageId: bb07d7fc-dc62-492f-b8da-7e28df69e112
              lastMessageOn: 2019-09-12T09:25:05.096Z
            totalCount: 1
    metric:
      type: object
      properties:
        valueType:
          type: string
        value:
          type: string
        name:
          type: string
    position:
      type: object
      properties:
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        altitude:
          type: number
          format: double
        precision:
          type: number
          format: double
        heading:
          type: number
          format: double
        speed:
          type: number
          format: double
        timestamp:
          type: string
          format: date-time
        satellites:
          type: integer
          format: int32
        status:
          type: integer
          format: int32
    dataMessage:
      type: object
      properties:
        datastoreId:
          type: string
          format: uuid
          readOnly: true
        scopeId:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
            - readOnly: true
        timestamp:
          type: string
          format: date-time
        deviceId:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
        clientId:
          type: string
        receivedOn:
          type: string
          format: date-time
        sentOn:
          type: string
          format: date-time
        capturedOn:
          type: string
          format: date-time
        position:
          $ref: '#/components/schemas/position'
        channel:
          type: object
          properties:
            semanticParts:
              type: array
              items:
                type: string
        payload:
          type: object
          properties:
            metrics:
              type: array
              items:
                $ref: '#/components/schemas/metric'
            body:
              type: string
              format: base64
      required:
        - clientId
        - deviceId
      example:
        type: jsonDatastoreMessage
        capturedOn: '2019-09-12T09:25:05.096Z'
        channel:
          type: kapuaDataChannel
          semanticParts:
            - heater
            - data
        clientId: Client-Id-1
        deviceId: WyczTs_GuDM
        payload:
          metrics:
            - valueType: string
              value: 5
              name: temperatureExternal
            - valueType: string
              value: 20
              name: temperatureInternal
            - valueType: string
              value: 30
              name: temperatureExhaust
            - valueType: string
              value: 0
              name: errorCode
        receivedOn: '2019-09-12T09:25:05.102Z'
        scopeId: AQ
        sentOn: '2019-09-12T09:25:05.096Z'
        datastoreId: bb07d7fc-dc62-492f-b8da-7e28df69e112
        timestamp: '2019-09-12T09:25:05.096Z'
    dataMessageInsertResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
    dataMessageListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/dataMessage'
          example:
            type: storableListResult
            limitExceeded: true
            size: 2
            items:
              - type: jsonDatastoreMessage
                capturedOn: '2019-09-12T09:35:04.383Z'
                channel:
                  type: kapuaDataChannel
                  semanticParts:
                    - heater
                    - data
                clientId: Client-Id-1
                deviceId: WyczTs_GuDM
                payload:
                  metrics:
                    - valueType: string
                      value: 5
                      name: temperatureExternal
                    - valueType: string
                      value: 20.25
                      name: temperatureInternal
                    - valueType: string
                      value: 30
                      name: temperatureExhaust
                    - valueType: string
                      value: -441478528
                      name: errorCode
                receivedOn: '2019-09-12T09:35:04.389Z'
                scopeId: AQ
                sentOn: '2019-09-12T09:35:04.383Z'
                datastoreId: 6349cec8-396b-4aac-bc2f-8fca9fe0c67c
                timestamp: '2019-09-12T09:35:04.383Z'
              - type: jsonDatastoreMessage
                capturedOn: '2019-09-12T09:25:05.096Z'
                channel:
                  type: kapuaDataChannel
                  semanticParts:
                    - heater
                    - data
                clientId: Client-Id-1
                deviceId: WyczTs_GuDM
                payload:
                  metrics:
                    - valueType: string
                      value: 5
                      name: temperatureExternal
                    - valueType: string
                      value: 20
                      name: temperatureInternal
                    - valueType: string
                      value: 30
                      name: temperatureExhaust
                    - valueType: string
                      value: 0
                      name: errorCode
                receivedOn: '2019-09-12T09:25:05.102Z'
                scopeId: AQ
                sentOn: '2019-09-12T09:25:05.096Z'
                datastoreId: bb07d7fc-dc62-492f-b8da-7e28df69e112
                timestamp: '2019-09-12T09:25:05.096Z'
            totalCount: 61
    metricInfo:
      type: object
      properties:
        id:
          type: string
          format: base64
        scopeId:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
            - readOnly: true
        clientId:
          type: string
        channel:
          type: string
        name:
          type: string
        metricType:
          type: string
        firstMessageId:
          type: string
          format: uuid
        firstMessageOn:
          type: string
          format: date-time
        lastMessageId:
          type: string
          format: uuid
        lastMessageOn:
          type: string
          format: date-time
      example:
        type: metricInfo
        id: oLVtE7wK67wO5Lxx4nZGsTEwbVjeo0xcFcnTvmhCxLU=
        scopeId: AQ
        clientId: Client-Id-1
        channel: ALERT
        name: alert_category
        metricType: string
        firstMessageId: c623d131-6f47-49af-9ba0-1474a90dd9ed
        firstMessageOn: '2019-09-12T08:04:13.918Z'
        lastMessageId: 653b4aee-e0d5-4af6-b120-ffc7c26057b9
        lastMessageOn: '2019-09-12T09:24:48.352Z'
    metricInfoListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/metricInfo'
          example:
            type: metricInfoListResult
            limitExceeded: false
            size: 2
            items:
              - type: metricInfo
                id: oLVtE7wK67wO5Lxx4nZGsTEwbVjeo0xcFcnTvmhCxLU=
                scopeId: AQ
                clientId: Client-Id-1
                channel: ALERT
                name: alert_category
                metricType: string
                firstMessageId: c623d131-6f47-49af-9ba0-1474a90dd9ed
                firstMessageOn: '2019-09-12T08:04:13.918Z'
                lastMessageId: 653b4aee-e0d5-4af6-b120-ffc7c26057b9
                lastMessageOn: '2019-09-12T09:24:48.352Z'
              - type: metricInfo
                id: q2vErAArLQ2rs/4m3eGZf5p6gqrCT+qZKxbeNPQrc+Q=
                scopeId: AQ
                clientId: Client-Id-1
                channel: ALERT
                name: alert_code
                metricType: string
                firstMessageId: c623d131-6f47-49af-9ba0-1474a90dd9ed
                firstMessageOn: '2019-09-12T08:04:13.918Z'
                lastMessageId: 653b4aee-e0d5-4af6-b120-ffc7c26057b9
                lastMessageOn: '2019-09-12T09:24:48.352Z'
            totalCount: 35
    fetchAttribute:
      type: string
      enum:
        - connection
        - lastEvent
    device:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - type: object
          properties:
            groupId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the Access Group to which this Device is assigned to
            clientId:
              type: string
              readOnly: true
              description: The Kura Client ID of this device
            connectionId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the Connection of this Device
                  readOnly: true
            connection:
              $ref: '#/components/schemas/connection'
            status:
              type: string
              enum:
                - ENABLED
                - DISABLED
            displayName:
              description: The Kura Display Name of this Device
              type: string
            lastEventId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the last recorded Event from this Device
                  readOnly: true
            lastEvent:
              $ref: '#/components/schemas/deviceEvent'
            serialNumber:
              description: The Serial Number of this Device
              type: string
            modelId:
              description: The Model ID (not an Kapua ID) of this Device
              type: string
            modelName:
              description: The Model Name of this Device
              type: string
            imei:
              description: The IMEI Code of this Device
              type: string
            imsi:
              description: The IMSI Code of this Device
              type: string
            iccid:
              description: The ICCID Code of this Device
              type: string
            biosVersion:
              description: The BIOS Version running on this Device
              type: string
            firmwareVersion:
              description: The Firmware Version of this Device
              type: string
            osVersion:
              description: The OS Version running on this Device
              type: string
            jvmVersion:
              description: The JVM Version running on this Device
              type: string
            osgiFrameworkVersion:
              description: The OSGi Framework Version running on this Device
              type: string
            applicationFrameworkVersion:
              description: The Application Framework Version running on this Device
              type: string
            connectionInterface:
              description: The Primary Connection Interface Name of this Device
              type: string
            connectionIp:
              description: The IP Address of the Primary Connection Interface on this Device
              type: string
            applicationIdentifiers:
              description: A string listing all the Kura Applications running on this Device
              type: string
            acceptEncoding:
              description: The MIME Encoding accepted by this Device
              type: string
            customAttribute1:
              description: A Custom Attribute of this Device - 1
              type: string
            customAttribute2:
              description: A Custom Attribute of this Device - 2
              type: string
            customAttribute3:
              description: A Custom Attribute of this Device - 3
              type: string
            customAttribute4:
              description: A Custom Attribute of this Device - 4
              type: string
            customAttribute5:
              description: A Custom Attribute of this Device - 5
              type: string
            extendedProperties:
              type: array
              items:
                allOf:
                  - allOf:
                      - type: object
                        properties:
                          groupName:
                            type: string
                          name:
                            type: string
                          value:
                            type: string
                    example:
                      type: deviceExtendedProperty
                      groupName: Hardware Info
                      name: CPU Family
                      value: ARM
            tagIds:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/kapuaId'
      example:
        type: device
        id: dIVxI5QpFUI
        scopeId: AQ
        createdOn: '2019-09-12T12:08:12.179Z'
        createdBy: AQ
        modifiedOn: '2019-09-12T12:08:12.179Z'
        modifiedBy: AQ
        optlock: 1
        clientId: testDevice
        status: ENABLED
        displayName: Test Device
        serialNumber: '1234567890'
        modelId: Test Model
        biosVersion: N/A
        firmwareVersion: N/A
        osVersion: 3.13.0-93-generic
        jvmVersion: 24.111-b01 mixed mode
        osgiFrameworkVersion: 1.7.0
        acceptEncoding: gzip
        extendedProperties:
          - type: deviceExtendedProperty
            groupName: Hardware Info
            name: CPU Family
            value: ARM
          - type: deviceExtendedProperty
            groupName: Hardware Info
            name: CPU Cores
            value: 4
        tagIds: []
    deviceCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntityCreator'
        - type: object
          properties:
            groupId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the Access Group to which this Device is assigned to
            clientId:
              type: string
              readOnly: true
              description: The Kura Client ID of this device
            status:
              $ref: '#/components/schemas/device/allOf/1/properties/status'
            lastEventId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the last recorded Event from this Device
                  readOnly: true
            displayName:
              description: The Kura Display Name of this Device
              type: string
            serialNumber:
              description: The Serial Number of this Device
              type: string
            modelId:
              description: The Model ID (not an Kapua ID) of this Device
              type: string
            modelName:
              description: The Model Name of this Device
              type: string
            imei:
              description: The IMEI Code of this Device
              type: string
            imsi:
              description: The IMSI Code of this Device
              type: string
            iccid:
              description: The ICCID Code of this Device
              type: string
            biosVersion:
              description: The BIOS Version running on this Device
              type: string
            firmwareVersion:
              description: The Firmware Version of this Device
              type: string
            osVersion:
              description: The OS Version running on this Device
              type: string
            jvmVersion:
              description: The JVM Version running on this Device
              type: string
            osgiFrameworkVersion:
              description: The OSGi Framework Version running on this Device
              type: string
            applicationFrameworkVersion:
              description: The Application Framework Version running on this Device
              type: string
            connectionInterface:
              description: The Primary Connection Interface Name of this Device
              type: string
            connectionIp:
              description: The IP Address of the Primary Connection Interface on this Device
              type: string
            applicationIdentifiers:
              description: A string listing all the Kura Applications running on this Device
              type: string
            acceptEncoding:
              description: The MIME Encoding accepted by this Device
              type: string
            customAttribute1:
              description: A Custom Attirbute of this Device - 1
              type: string
            customAttribute2:
              description: A Custom Attirbute of this Device - 2
              type: string
            customAttribute3:
              description: A Custom Attirbute of this Device - 3
              type: string
            customAttribute4:
              description: A Custom Attirbute of this Device - 4
              type: string
            customAttribute5:
              description: A Custom Attirbute of this Device - 5
              type: string
          required:
            - clientId
          example:
            clientId: testDevice
            status: ENABLED
            displayName: Test Device
            serialNumber: '1234567890'
            modelId: Test Model
            biosVersion: N/A
            firmwareVersion: N/A
            osVersion: 3.13.0-93-generic
            jvmVersion: 24.111-b01 mixed mode
            osgiFrameworkVersion: 1.7.0
            acceptEncoding: gzip
            deviceCredentialsMode: LOOSE
    deviceListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/device'
    deviceAssetDefinition:
      allOf:
        - $ref: '#/components/schemas/channelValue/allOf/0'
        - type: object
          properties:
            channels:
              type: array
              items:
                $ref: '#/components/schemas/channelDefinition'
            name:
              type: string
          example:
            name: asset1
            channels:
              - valueType: integer
                name: Channel-1
                mode: READ
              - valueType: integer
                name: Channel-2
                mode: WRITE
              - valueType: integer
                name: Channel-3
                mode: READ_WRITE
    deviceAssetDefinitions:
      description: A list container for the Assets of a Device
      type: object
      properties:
        deviceAsset:
          type: array
          items:
            $ref: '#/components/schemas/deviceAssetDefinition'
      example:
        type: deviceAssets
        deviceAsset:
          - name: asset1
            channels:
              - valueType: integer
                name: Channel-1
                mode: READ
              - valueType: integer
                name: Channel-2
                mode: WRITE
              - valueType: integer
                name: Channel-3
                mode: READ_WRITE
          - name: asset2
            channels:
              - valueType: integer
                name: Channel-1
                mode: READ
              - valueType: integer
                name: Channel-2
                mode: WRITE
              - valueType: integer
                name: Channel-3
                mode: READ_WRITE
    deviceAssetValue:
      allOf:
        - $ref: '#/components/schemas/channelValue/allOf/0'
        - type: object
          properties:
            channels:
              type: array
              items:
                $ref: '#/components/schemas/channelValue'
            name:
              type: string
          example:
            name: asset2
            channels:
              - valueType: integer
                value: 5
                name: Channel-1
                timestamp: '2019-09-12T14:50:24.446Z'
              - valueType: integer
                value: 8
                name: Channel-3
                timestamp: '2019-09-12T14:50:24.446Z'
    deviceAssetValues:
      description: A list container for the Assets of a Device
      type: object
      properties:
        deviceAsset:
          items:
            type: array
            items:
              $ref: '#/components/schemas/deviceAssetValue'
      example:
        type: deviceAssets
        deviceAsset:
          - name: asset2
            channels:
              - valueType: integer
                value: 5
                name: Channel-1
                timestamp: '2019-09-12T14:50:24.446Z'
              - valueType: integer
                value: 8
                name: Channel-3
                timestamp: '2019-09-12T14:50:24.446Z'
    channelDefinition:
      allOf:
        - $ref: '#/components/schemas/channelValue/allOf/0'
        - type: object
          properties:
            mode:
              type: string
              enum:
                - READ
                - WRITE
                - READ_WRITE
            name:
              type: string
            valueType:
              type: string
          example:
            valueType: integer
            name: Channel-1
            mode: READ
    channelValue:
      allOf:
        - description: |
            An **Asset**, as defined in Kura, is a logical representation of a field device, described by a list of **Channels**.
            The Asset uses a specific Driver instance to communicate with the underlying device and it models a generic device resource as a Channel.
            A register in a PLC or a GATT Characteristic in a Bluetooth device are examples of Channels.
            In this way, each Asset has multiple Channels for reading and writing data from/to an Industrial Device.
        - type: object
          properties:
            name:
              type: string
            valueType:
              type: string
            value:
              type: string
            timestamp:
              type: string
              format: date-time
          example:
            valueType: integer
            value: 5
            name: Channel-1
            timestamp: '2019-09-12T14:50:24.446Z'
    deviceBundle:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        state:
          type: string
        version:
          type: string
      example:
        id: 0
        name: org.eclipse.osgi
        state: ACTIVE
        version: 3.12.50.v20170928-1321
    deviceBundles:
      type: object
      properties:
        bundle:
          type: array
          items:
            $ref: '#/components/schemas/deviceBundle'
      example:
        type: deviceBundles
        bundle:
          - id: 0
            name: org.eclipse.osgi
            state: ACTIVE
            version: 3.12.50.v20170928-1321
          - id: 1
            name: org.eclipse.equinox.cm
            state: ACTIVE
            version: 1.2.0.v20170105-1446
    commandInput:
      description: An object containing the Command to be executed on a Device
      type: object
      properties:
        command:
          type: string
        password:
          type: string
          format: password
        arguments:
          properties:
            argument:
              oneOf:
                - description: An array of strings containing multiple arguments for the command
                  type: array
                  items:
                    type: string
                - description: A string containing the argument for the command
                  type: string
        timeout:
          type: integer
        workingDir:
          type: string
        body:
          type: string
          format: base64
        environment:
          type: array
          items:
            type: string
        runAsynch:
          type: boolean
        stdin:
          type: string
      example:
        command: ls
        arguments:
          argument: '-lisa'
        timeout: 60000
    commandOutput:
      description: The output of a Command executed on a Device
      type: object
      properties:
        stderr:
          type: string
        stdout:
          type: string
        exceptionMessage:
          type: string
        exceptionStack:
          type: string
        exitCode:
          type: integer
        hasTimedout:
          type: boolean
      example:
        type: deviceCommandOutput
        stderr: ''
        stdout: |
          total 40
          12503707 4 drwxrwxrwt 1 root root 4096 Sep 13 07:44 .
          12507178 4 drwxr-xr-x 1 root root 4096 Sep 12 08:03 ..
          61409843 4 drwxrwxrwt 2 root root 4096 Feb 28  2018 .ICE-unix
          61409845 4 drwxrwxrwt 2 root root 4096 Feb 28  2018 .Test-unix
          61409838 4 drwxrwxrwt 2 root root 4096 Feb 28  2018 .X11-unix
          61409844 4 drwxrwxrwt 2 root root 4096 Feb 28  2018 .XIM-unix
          61409846 4 drwxrwxrwt 2 root root 4096 Feb 28  2018 .font-unix
          12503708 4 drwxr-xr-x 3 root root 4096 Sep 12 08:03 .kura
          12507353 4 drwxr-xr-x 2 root root 4096 Sep 12 08:03 hsperfdata_root
          12507385 4 drwxr-xr-x 3 root root 4096 Sep 12 08:03 kura
        exitCode: 0
        hasTimedout: false
    componentConfiguration:
      type: object
      properties:
        id:
          type: string
        definition:
          type: object
          properties:
            id:
              type: string
            AD:
              type: array
              items:
                $ref: '#/components/schemas/attributeDefinition'
            Icon:
              type: array
              items:
                $ref: '#/components/schemas/icon'
            name:
              type: string
            description:
              type: string
        properties:
          type: object
          properties:
            property:
              type: array
              items:
                $ref: '#/components/schemas/propertyDefinition'
      example:
        id: org.eclipse.kura.wire.graph.WireGraphService
        definition:
          description: WireGraphService metatype
          id: org.eclipse.kura.wire.graph.WireGraphService
          name: WireGraphService
          AD:
            - cardinality: 0
              description: The default wire graph JSON
              id: WireGraph
              name: WireGraph
              required: true
              type: String
              Option: []
          Icon: []
        properties:
          property:
            - name: WireGraph
              array: false
              encrypted: false
              type: String
              value:
                - '{"components":[{"pid":"asset1","inputPortCount":1,"outputPortCount":1,"renderingProperties":{"position":{"x":-580,"y":-120},"inputPortNames":{},"outputPortNames":{}}},{"pid":"asset2","inputPortCount":1,"outputPortCount":1,"renderingProperties":{"position":{"x":-1100,"y":-100},"inputPortNames":{},"outputPortNames":{}}}],"wires":[]}'
            - name: kura.service.pid
              array: false
              encrypted: false
              type: String
              value:
                - org.eclipse.kura.wire.graph.WireGraphService
            - name: service.pid
              array: false
              encrypted: false
              type: String
              value:
                - org.eclipse.kura.wire.graph.WireGraphService
    componentConfigurationInput:
      type: object
      properties:
        id:
          type: string
        properties:
          type: object
          properties:
            property:
              type: array
              items:
                $ref: '#/components/schemas/propertyDefinition'
    componentConfigurations:
      type: object
      properties:
        configuration:
          type: array
          items:
            $ref: '#/components/schemas/componentConfiguration'
      example:
        type: deviceConfiguration
        configuration:
          - id: org.eclipse.kura.wire.graph.WireGraphService
            definition:
              description: WireGraphService metatype
              id: org.eclipse.kura.wire.graph.WireGraphService
              name: WireGraphService
              AD:
                - cardinality: 0
                  description: The default wire graph JSON
                  id: WireGraph
                  name: WireGraph
                  required: true
                  type: String
                  Option: []
              Icon: []
            properties:
              property:
                - name: WireGraph
                  array: false
                  encrypted: false
                  type: String
                  value:
                    - '{"components":[{"pid":"asset1","inputPortCount":1,"outputPortCount":1,"renderingProperties":{"position":{"x":-580,"y":-120},"inputPortNames":{},"outputPortNames":{}}},{"pid":"asset2","inputPortCount":1,"outputPortCount":1,"renderingProperties":{"position":{"x":-1100,"y":-100},"inputPortNames":{},"outputPortNames":{}}}],"wires":[]}'
                - name: kura.service.pid
                  array: false
                  encrypted: false
                  type: String
                  value:
                    - org.eclipse.kura.wire.graph.WireGraphService
                - name: service.pid
                  array: false
                  encrypted: false
                  type: String
                  value:
                    - org.eclipse.kura.wire.graph.WireGraphService
    componentConfigurationsInput:
      type: object
      properties:
        configuration:
          type: array
          items:
            $ref: '#/components/schemas/componentConfigurationInput'
      example:
        configuration:
          - id: org.eclipse.kura.wire.graph.WireGraphService
            properties:
              property:
                - name: kura.service.pid
                  array: false
                  encrypted: false
                  type: String
                  value:
                    - org.eclipse.kura.wire.graph.WireGraphService
    icon:
      type: object
      properties:
        resource:
          type: string
        size:
          type: integer
    propertyDefinition:
      type: object
      properties:
        name:
          type: string
        array:
          type: boolean
        encrypted:
          type: boolean
        type:
          type: string
        value:
          type: array
          items:
            type: string
      example:
        name: kura.service.pid
        array: false
        encrypted: false
        type: String
        value:
          - org.eclipse.kura.wire.graph.WireGraphService
    option:
      type: object
      properties:
        label:
          type: string
        value:
          type: string
    attributeDefinition:
      type: object
      properties:
        Option:
          type: array
          items:
            $ref: '#/components/schemas/option'
        default:
          type: string
        type:
          type: object
        cardinality:
          type: integer
        min:
          type: string
        max:
          type: string
        description:
          type: string
        id:
          type: string
        required:
          type: boolean
        name:
          type: string
      example:
        cardinality: 0
        description: The default wire graph JSON
        id: WireGraph
        name: WireGraph
        required: true
        type: String
        Option: []
    connection:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - type: object
          properties:
            status:
              type: string
              enum:
                - CONNECTED
                - DISCONNECTED
                - MISSING
                - 'NULL'
            clientId:
              type: string
            userId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
            allowUserChange:
              type: boolean
            userCouplingMode:
              type: string
              enum:
                - INHERITED
                - LOOSE
                - STRICT
            reservedUserId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
            protocol:
              type: string
            clientIp:
              type: string
            serverIp:
              type: string
              readOnly: true
          example:
            type: deviceConnection
            id: Gd1BfeWwh3s
            scopeId: AQ
            createdOn: '2019-09-12T09:04:32.101Z'
            createdBy: Ag
            modifiedOn: '2019-09-13T08:04:49.927Z'
            modifiedBy: Ag
            optlock: 17
            status: CONNECTED
            clientId: Client-Id-1
            userId: Ag
            allowUserChange: false
            userCouplingMode: INHERITED
            protocol: MQTT
            clientIp: 'tcp://172.21.0.1:44400'
            serverIp: broker
    connectionListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/connection'
          example:
            type: deviceConnectionListResult
            limitExceeded: false
            size: 1
            items:
              - type: deviceConnection
                id: Gd1BfeWwh3s
                scopeId: AQ
                createdOn: '2019-09-12T09:04:32.101Z'
                createdBy: Ag
                modifiedOn: '2019-09-13T08:04:49.927Z'
                modifiedBy: Ag
                optlock: 17
                status: CONNECTED
                clientId: Client-Id-1
                userId: Ag
                allowUserChange: false
                userCouplingMode: INHERITED
                protocol: MQTT
                clientIp: 'tcp://172.21.0.1:44400'
                serverIp: broker
    deviceEvent:
      allOf:
        - $ref: '#/components/schemas/kapuaEntity'
        - type: object
          properties:
            deviceId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
            sentOn:
              type: string
              format: date-time
            receivedOn:
              type: string
              format: date-time
            position:
              $ref: '#/components/schemas/position'
            resource:
              type: string
            action:
              $ref: '#/components/schemas/action'
            responseCode:
              type: string
              enum:
                - ACCEPTED
                - SENT
                - BAD_REQUEST
                - NOT_FOUND
                - INTERNAL_ERROR
            eventMessage:
              type: string
          example:
            id: YYHQ2i1S-P0
            scopeId: AQ
            createdOn: '2019-09-12T09:04:37.392Z'
            createdBy: Ag
            deviceId: WyczTs_GuDM
            receivedOn: '2019-09-12T09:04:32.646Z'
            position:
              altitude: 0
              latitude: 0
              longitude: 0
            resource: BIRTH
            action: CREATE
            responseCode: ACCEPTED
            eventMessage: 'acceptEncoding=gzip~~applicationFramework=Kura~~applicationFrameworkVersion=ESF_6.0.0~~applicationIdentifiers=heaterPROV-V2DEPLOY-V2VPNCLIENT-V2CONF-V1CERT-V1ASSET-V1CMD-V1~~availableProcessors=4~~bios=N/A~~biosVersion=N/A~~connectionInterface=lo (00:00:00:00:00:00)~~connectionIp=127.0.0.1~~containerFramework=Eclipse~~containerFrameworkVersion=1.8.0~~displayName=~~firmware=N/A~~firmwareVersion=N/A~~jvm=Java HotSpot(TM) 64-Bit Server VM~~jvmProfile=Java(TM) SE Runtime Environment 1.8.0_161-b12~~jvmVersion=25.161-b12 mixed mode~~modelId=ESF-Docker-RHEL~~modelName=ESF-Docker-RHEL~~os=Linux~~osArch=amd64~~osVersion=4.9.184-linuxkit #1 SMP Tue Jul 2 22:58:16 UTC 2019~~partNumber=ESF-Docker-RHEL~~serialNumber=ESF-Docker-RHEL~~totalMemory=1023488~~uptime=187894320'
    deviceEventListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/deviceEvent'
    inventoryItem:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        itemType:
          type: string
      example:
        name: adduser
        version: 3.118
        type: DEB
    deviceInventory:
      type: object
      properties:
        inventoryItems:
          type: array
          items:
            $ref: '#/components/schemas/inventoryItem'
      example:
        type: deviceInventory
        inventoryItems:
          - name: adduser
            version: 3.118
            itemType: DEB
          - name: redis
            version: latest
            itemType: DOCKER
    deviceInventoryBundle:
      type: object
      properties:
        id:
          type: string
          description: 'This is the ID of the bundle. Even if type is String, it must be a number!'
        name:
          type: string
        version:
          type: string
        status:
          type: string
        signed:
          type: boolean
      example:
        id: 0
        name: org.eclipse.osgi
        version: 3.16.0.v20200828-0759
        status: ACTIVE
        signed: false
    deviceInventoryBundles:
      type: object
      properties:
        inventoryBundles:
          type: array
          items:
            $ref: '#/components/schemas/deviceInventoryBundle'
      example:
        type: deviceInventoryBundles
        inventoryBundles:
          - id: 0
            name: org.eclipse.osgi
            version: 3.16.0.v20200828-0759
            status: ACTIVE
          - id: 1
            name: org.eclipse.equinox.cm
            version: 1.4.400.v20200422-1833
            status: RESOLVED
    deviceInventoryContainerState:
      type: string
      enum:
        - ACTIVE
        - INSTALLED
        - UNINSTALLED
        - UNKNOWN
    deviceInventoryContainer:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        containerType:
          type: string
        state:
          $ref: '#/components/schemas/deviceInventoryContainerState'
      example:
        name: docker_container_1
        version: 'nginx:latest'
        containerType: DOCKER
        state: ACTIVE
    deviceInventoryContainers:
      type: object
      properties:
        inventoryContainers:
          type: array
          items:
            $ref: '#/components/schemas/deviceInventoryContainer'
      example:
        type: deviceInventoryContainers
        inventoryBundles:
          - name: docker_container_1
            version: 'nginx:latest'
            containerType: DOCKER
            state: ACTIVE
          - name: docker_container_2
            version: 'haproxy:latest'
            containerType: DOCKER
            state: INSTALLED
    deviceInventoryPackage:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        packageType:
          type: string
      example:
        name: adduser
        packageType: DEB
        version: 3.118
    deviceInventoryPackages:
      type: object
      properties:
        systemPackages:
          type: array
          items:
            $ref: '#/components/schemas/deviceInventoryPackage'
      example:
        type: deviceInventorySystemPackages
        systemPackages:
          - name: adduser
            version: 3.118
            type: DEB
          - name: alsa-utils
            version: 1.1.8-2
            type: DEB
    deviceInventoryDeploymentPackage:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        packageBundles:
          type: array
          items:
            $ref: '#/components/schemas/deviceInventoryBundle'
      example:
        name: org.eclipse.kura.example.beacon
        version: 1.0.500
        packageBundles:
          - id: 0
            name: org.eclipse.kura.example.beacon
            version: 1.0.500
            status: ACTIVE
          - id: 1
            name: org.eclipse.kura.example.package
            version: 1.5.400
            status: RESOLVED
    deviceInventoryDeploymentPackages:
      type: object
      properties:
        systemPackages:
          type: array
          items:
            $ref: '#/components/schemas/deviceInventoryDeploymentPackage'
      example:
        type: deviceInventoryDeploymentPackages
        deploymentPackages:
          - name: org.eclipse.kura.example.beacon
            version: 1.0.500
            packageBundles:
              - id: 0
                name: org.eclipse.kura.example.beacon
                version: 1.0.500
                status: ACTIVE
              - id: 1
                name: org.eclipse.kura.example.package
                version: 1.5.400
                status: RESOLVED
          - name: org.eclipse.kura.example.heater
            version: 1.0.500
            packageBundles:
              - id: 0
                name: org.eclipse.kura.example.heater
                version: 1.0.500
                status: ACTIVE
    deviceKeystores:
      type: object
      properties:
        deviceKeystore:
          type: array
          items:
            $ref: '#/components/schemas/deviceKeystore'
      example:
        type: deviceKeystores
        deviceKeystore:
          - id: SSLKeystore
            size: 3
            keystoreType: jks
          - id: HTTPSKeystore
            size: 1
            keystoreType: jks
    deviceKeystore:
      type: object
      properties:
        id:
          type: string
        size:
          type: integer
        keystoreType:
          type: string
      example:
        id: SSLKeystore
        size: 3
        keystoreType: jks
    deviceKeystoreItems:
      type: object
      properties:
        keystoreItems:
          type: array
          items:
            $ref: '#/components/schemas/deviceKeystoreItem'
      example:
        type: deviceKeystoreItems
        keystoreItem:
          - keystoreId: SSLKeystore
            alias: ssl-eclipse
            itemType: TRUSTED_CERTIFICATE
            size: 2048
            algorithm: RSA
            subjectDN: mqtt.eclipse.org
            issuer: 'Let''s Encrypt Authority X3,O = Let''s Encrypt,C = US'
            notBefore: 'Jul 19 10:21:17 2019 GMT'
            notAfter: 'Oct 17 10:21:17 2019 GMT'
            certificate: |
              -----BEGIN CERTIFICATE-----
              MIIFVzCCBD+gAwIBAgISA38CzQctm3+HkSyZPnDL8TFsMA0GCSqGSIb3DQEBCwUA
              MEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD
              ExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xOTA3MTkxMDIxMTdaFw0x
              OTEwMTcxMDIxMTdaMBsxGTAXBgNVBAMTEG1xdHQuZWNsaXBzZS5vcmcwggEiMA0G
              CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQnt6ZBEZ/vDG0JLqVB45lO6xlLazt
              YpEqZlGBket6PtjUGLdE2XivTpjtUkERS1cvPBqT1DH/yEZ1CU7iT/gfZtZotR0c
              qEMogSGkmrN1sAV6Eb+xGT3sPm1WFeKZqKdzAScdULoweUgwbNXa9kAB1uaSYBTe
              cq2ynfxBKWL/7bVtoeXUOyyaiIxVPTYz5XgpjSUB+9ML/v/+084XhIKA/avGPOSi
              RHOB+BsqTGyGhDgAHF+CDrRt8U1preS9AKXUvZ0aQL+djV8Y5nXPQPR8c2wplMwL
              5W/YMrM/dBm64vclKQLVPyEPqMOLMqcf+LkfQi6WOH+JByJfywAlme6jAgMBAAGj
              ggJkMIICYDAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsG
              AQUFBwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFHc+PmokFlx8Fh/0Lob125ef
              fLNyMB8GA1UdIwQYMBaAFKhKamMEfd265tE5t6ZFZe/zqOyhMG8GCCsGAQUFBwEB
              BGMwYTAuBggrBgEFBQcwAYYiaHR0cDovL29jc3AuaW50LXgzLmxldHNlbmNyeXB0
              Lm9yZzAvBggrBgEFBQcwAoYjaHR0cDovL2NlcnQuaW50LXgzLmxldHNlbmNyeXB0
              Lm9yZy8wGwYDVR0RBBQwEoIQbXF0dC5lY2xpcHNlLm9yZzBMBgNVHSAERTBDMAgG
              BmeBDAECATA3BgsrBgEEAYLfEwEBATAoMCYGCCsGAQUFBwIBFhpodHRwOi8vY3Bz
              LmxldHNlbmNyeXB0Lm9yZzCCAQMGCisGAQQB1nkCBAIEgfQEgfEA7wB2AHR+2oMx
              rTMQkSGcziVPQnDCv/1eQiAIxjc1eeYQe8xWAAABbAn2/p8AAAQDAEcwRQIhAIBl
              IZC2ZCMDs7bkBQN79xNO84VFpe7bQcMeaqHsQH9jAiAYV5kdZBgl17M5RB44NQ+y
              Y/WOF1PWOrNrP3XdeEo7HAB1ACk8UZZUyDlluqpQ/FgH1Ldvv1h6KXLcpMMM9OVF
              R/R4AAABbAn2/o4AAAQDAEYwRAIgNYxfY0bjRfjhXjjAgyPRSLKq4O5tWTd2W4mn
              CpE3aCYCIGeKPyuuo9tvHbyVKF4bsoN76FmnOkdsYE0MCKeKkUOkMA0GCSqGSIb3
              DQEBCwUAA4IBAQCB0ykl1N2U2BMhzFo6dwrECBSFO+ePV2UYGrb+nFunWE4MMKBb
              dyu7dj3cYRAFCM9A3y0H967IcY+h0u9FgZibmNs+y/959wcbr8F1kvgpVKDb1FGs
              cuEArADQd3X+4TMM+IeIlqbGVXv3mYPrsP78LmUXkS7ufhMXsD5GSbSc2Zp4/v0o
              3bsJz6qwzixhqg30tf6siOs9yrpHpPnDnbRrahbwnYTpm6JP0lK53GeFec4ckNi3
              zT5+hEVOZ4JYPb3xVXkzIjSWmnDVbwC9MFtRaER9MhugKmiAp8SRLbylD0GKOhSB
              2BDf6JrzhIddKxQ75KgMZE6FQaC3Bz1DFyrj
              -----END CERTIFICATE-----
    deviceKeystoreItem:
      type: object
      properties:
        keystoreId:
          type: string
        alias:
          type: string
        itemType:
          type: string
        size:
          type: integer
        algorithm:
          type: string
        subjectDN:
          type: string
        subjectANs:
          type: array
          items:
            $ref: '#/components/schemas/deviceKeystoreSubjectAN'
        issuer:
          type: string
        notBefore:
          type: string
          format: date-time
        notAfter:
          type: string
          format: date-time
        certificate:
          type: string
        certificateChain:
          type: array
          items:
            type: string
      example:
        keystoreId: SSLKeystore
        alias: ssl-eclipse
        itemType: TRUSTED_CERTIFICATE
        size: 2048
        algorithm: RSA
        subjectDN: mqtt.eclipse.org
        issuer: 'Let''s Encrypt Authority X3,O = Let''s Encrypt,C = US'
        notBefore: 'Jul 19 10:21:17 2019 GMT'
        notAfter: 'Oct 17 10:21:17 2019 GMT'
        certificate: |
          -----BEGIN CERTIFICATE-----
          MIIFVzCCBD+gAwIBAgISA38CzQctm3+HkSyZPnDL8TFsMA0GCSqGSIb3DQEBCwUA
          MEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD
          ExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xOTA3MTkxMDIxMTdaFw0x
          OTEwMTcxMDIxMTdaMBsxGTAXBgNVBAMTEG1xdHQuZWNsaXBzZS5vcmcwggEiMA0G
          CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQnt6ZBEZ/vDG0JLqVB45lO6xlLazt
          YpEqZlGBket6PtjUGLdE2XivTpjtUkERS1cvPBqT1DH/yEZ1CU7iT/gfZtZotR0c
          qEMogSGkmrN1sAV6Eb+xGT3sPm1WFeKZqKdzAScdULoweUgwbNXa9kAB1uaSYBTe
          cq2ynfxBKWL/7bVtoeXUOyyaiIxVPTYz5XgpjSUB+9ML/v/+084XhIKA/avGPOSi
          RHOB+BsqTGyGhDgAHF+CDrRt8U1preS9AKXUvZ0aQL+djV8Y5nXPQPR8c2wplMwL
          5W/YMrM/dBm64vclKQLVPyEPqMOLMqcf+LkfQi6WOH+JByJfywAlme6jAgMBAAGj
          ggJkMIICYDAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsG
          AQUFBwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFHc+PmokFlx8Fh/0Lob125ef
          fLNyMB8GA1UdIwQYMBaAFKhKamMEfd265tE5t6ZFZe/zqOyhMG8GCCsGAQUFBwEB
          BGMwYTAuBggrBgEFBQcwAYYiaHR0cDovL29jc3AuaW50LXgzLmxldHNlbmNyeXB0
          Lm9yZzAvBggrBgEFBQcwAoYjaHR0cDovL2NlcnQuaW50LXgzLmxldHNlbmNyeXB0
          Lm9yZy8wGwYDVR0RBBQwEoIQbXF0dC5lY2xpcHNlLm9yZzBMBgNVHSAERTBDMAgG
          BmeBDAECATA3BgsrBgEEAYLfEwEBATAoMCYGCCsGAQUFBwIBFhpodHRwOi8vY3Bz
          LmxldHNlbmNyeXB0Lm9yZzCCAQMGCisGAQQB1nkCBAIEgfQEgfEA7wB2AHR+2oMx
          rTMQkSGcziVPQnDCv/1eQiAIxjc1eeYQe8xWAAABbAn2/p8AAAQDAEcwRQIhAIBl
          IZC2ZCMDs7bkBQN79xNO84VFpe7bQcMeaqHsQH9jAiAYV5kdZBgl17M5RB44NQ+y
          Y/WOF1PWOrNrP3XdeEo7HAB1ACk8UZZUyDlluqpQ/FgH1Ldvv1h6KXLcpMMM9OVF
          R/R4AAABbAn2/o4AAAQDAEYwRAIgNYxfY0bjRfjhXjjAgyPRSLKq4O5tWTd2W4mn
          CpE3aCYCIGeKPyuuo9tvHbyVKF4bsoN76FmnOkdsYE0MCKeKkUOkMA0GCSqGSIb3
          DQEBCwUAA4IBAQCB0ykl1N2U2BMhzFo6dwrECBSFO+ePV2UYGrb+nFunWE4MMKBb
          dyu7dj3cYRAFCM9A3y0H967IcY+h0u9FgZibmNs+y/959wcbr8F1kvgpVKDb1FGs
          cuEArADQd3X+4TMM+IeIlqbGVXv3mYPrsP78LmUXkS7ufhMXsD5GSbSc2Zp4/v0o
          3bsJz6qwzixhqg30tf6siOs9yrpHpPnDnbRrahbwnYTpm6JP0lK53GeFec4ckNi3
          zT5+hEVOZ4JYPb3xVXkzIjSWmnDVbwC9MFtRaER9MhugKmiAp8SRLbylD0GKOhSB
          2BDf6JrzhIddKxQ75KgMZE6FQaC3Bz1DFyrj
          -----END CERTIFICATE-----
    deviceKeystoreSubjectAN:
      type: object
      properties:
        ANType:
          type: string
        value:
          type: string
    deviceKeystoreCertificate:
      type: object
      properties:
        keystoreId:
          type: string
        alias:
          type: string
        certificate:
          type: string
      example:
        keystoreId: SSLKeystore
        alias: ssl-eclipse
        certificate: |
          -----BEGIN CERTIFICATE-----
          MIIFVzCCBD+gAwIBAgISA38CzQctm3+HkSyZPnDL8TFsMA0GCSqGSIb3DQEBCwUA
          MEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD
          ExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xOTA3MTkxMDIxMTdaFw0x
          OTEwMTcxMDIxMTdaMBsxGTAXBgNVBAMTEG1xdHQuZWNsaXBzZS5vcmcwggEiMA0G
          CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQnt6ZBEZ/vDG0JLqVB45lO6xlLazt
          YpEqZlGBket6PtjUGLdE2XivTpjtUkERS1cvPBqT1DH/yEZ1CU7iT/gfZtZotR0c
          qEMogSGkmrN1sAV6Eb+xGT3sPm1WFeKZqKdzAScdULoweUgwbNXa9kAB1uaSYBTe
          cq2ynfxBKWL/7bVtoeXUOyyaiIxVPTYz5XgpjSUB+9ML/v/+084XhIKA/avGPOSi
          RHOB+BsqTGyGhDgAHF+CDrRt8U1preS9AKXUvZ0aQL+djV8Y5nXPQPR8c2wplMwL
          5W/YMrM/dBm64vclKQLVPyEPqMOLMqcf+LkfQi6WOH+JByJfywAlme6jAgMBAAGj
          ggJkMIICYDAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsG
          AQUFBwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFHc+PmokFlx8Fh/0Lob125ef
          fLNyMB8GA1UdIwQYMBaAFKhKamMEfd265tE5t6ZFZe/zqOyhMG8GCCsGAQUFBwEB
          BGMwYTAuBggrBgEFBQcwAYYiaHR0cDovL29jc3AuaW50LXgzLmxldHNlbmNyeXB0
          Lm9yZzAvBggrBgEFBQcwAoYjaHR0cDovL2NlcnQuaW50LXgzLmxldHNlbmNyeXB0
          Lm9yZy8wGwYDVR0RBBQwEoIQbXF0dC5lY2xpcHNlLm9yZzBMBgNVHSAERTBDMAgG
          BmeBDAECATA3BgsrBgEEAYLfEwEBATAoMCYGCCsGAQUFBwIBFhpodHRwOi8vY3Bz
          LmxldHNlbmNyeXB0Lm9yZzCCAQMGCisGAQQB1nkCBAIEgfQEgfEA7wB2AHR+2oMx
          rTMQkSGcziVPQnDCv/1eQiAIxjc1eeYQe8xWAAABbAn2/p8AAAQDAEcwRQIhAIBl
          IZC2ZCMDs7bkBQN79xNO84VFpe7bQcMeaqHsQH9jAiAYV5kdZBgl17M5RB44NQ+y
          Y/WOF1PWOrNrP3XdeEo7HAB1ACk8UZZUyDlluqpQ/FgH1Ldvv1h6KXLcpMMM9OVF
          R/R4AAABbAn2/o4AAAQDAEYwRAIgNYxfY0bjRfjhXjjAgyPRSLKq4O5tWTd2W4mn
          CpE3aCYCIGeKPyuuo9tvHbyVKF4bsoN76FmnOkdsYE0MCKeKkUOkMA0GCSqGSIb3
          DQEBCwUAA4IBAQCB0ykl1N2U2BMhzFo6dwrECBSFO+ePV2UYGrb+nFunWE4MMKBb
          dyu7dj3cYRAFCM9A3y0H967IcY+h0u9FgZibmNs+y/959wcbr8F1kvgpVKDb1FGs
          cuEArADQd3X+4TMM+IeIlqbGVXv3mYPrsP78LmUXkS7ufhMXsD5GSbSc2Zp4/v0o
          3bsJz6qwzixhqg30tf6siOs9yrpHpPnDnbRrahbwnYTpm6JP0lK53GeFec4ckNi3
          zT5+hEVOZ4JYPb3xVXkzIjSWmnDVbwC9MFtRaER9MhugKmiAp8SRLbylD0GKOhSB
          2BDf6JrzhIddKxQ75KgMZE6FQaC3Bz1DFyrj
          -----END CERTIFICATE-----
    deviceKeystoreKeypair:
      type: object
      properties:
        keystoreId:
          type: string
        alias:
          type: string
        algorithm:
          type: string
        size:
          type: integer
        singnatureAlgorithm:
          type: string
        attributes:
          type: string
      example:
        type: deviceKeystoreKeypair
        keystoreId: SSLKeystore
        alias: ssl-eclipse
        algorithm: RSA
        size: '2048,'
        signatureAlgorithm: SHA256withRSA
        attributes: 'CN=Let''s Encrypt Authority X3,O=Let''s Encrypt,C=US'
    deviceKeystoreCSRInfo:
      type: object
      properties:
        keystoreId:
          type: string
        alias:
          type: string
        singnatureAlgorithm:
          type: string
        attributes:
          type: string
      example:
        keystoreId: HttpsKeystore
        alias: localhost
        signatureAlgorithm: SHA256withRSA
        attributes: 'CN=Kura, OU=IoT, O=Eclipse, C=US'
    deviceKeystoreCSR:
      type: object
      properties:
        signingRequest:
          type: string
      example:
        signingRequest: |
          -----BEGIN CERTIFICATE REQUEST-----
          MIICgTCCAWkCAQAwPDELMAkGA1UEBhMCVVMxEDAOBgNVBAoTB0VjbGlwc2UxDDAK
          BgNVBAsTA0lvVDENMAsGA1UEAxMES3VyYTCCASIwDQYJKoZIhvcNAQEBBQADggEP
          ADCCAQoCggEBAKpmnJeOJ7wczIMj3nUe+qxAtfJaXhUJkGy+bQuEfSEKRhA9QXAT
          bt6N5alSj9mHb0OcOESBdUEr8vt28d5qHyHUUJ3yOJH3qURGO3He8yqLuUmgMgdK
          Dtp5bGFy5ltW/F+ASB8vJlX2jaC/Tybq8KjPTzVeEIilyQ9LDQMLmH7l+WklkpsK
          LZHF+2fATJK7HISijozZiVfk8EFi5JXbGo9VFlKouwTU3V2NVY9f4cIftPb5pNs2
          lEL+ZkAuaPksHzkI0z+bPwR4+tlMTxgcQE25r7fPK3FYEuOugSV8zGghI1dBDAHx
          eHYVpduJPhz7RtdVw3x7eM7I1C2IrmfHaP0CAwEAAaAAMA0GCSqGSIb3DQEBCwUA
          A4IBAQAC8rvMaHZ+7szRm490O0nOj2wC0yngvciyBvCqEiKGmlOjeXxJAVjTG+r6
          tXe6Jce9weIRdbI0HHVWkNVBX7Z0xjuD/SjrXOKjx1gm1DTbkp97OTBXuPhuiNXq
          Ihvy/j0P/yFRAUP+YRkV6N5OE76fUst/VHUvMWbEEnH9qPGYmSwV4yBgsSRiL4km
          84uuNDaILuCuYqTMtfoPSrfcILrKMfmPRvNE5DNDbk/BsR33zyBXCjnd+/P61sKo
          VSn6maFDBHcZP2jkBOBr8QmW8jt3oR9qWX5LXBpEHkmki8cy6FEhUOGZIuPAd8Rj
          PfZ8kKHpraMQuOeg0ZsZcZzlZsa8
          -----END CERTIFICATE REQUEST-----
    deviceNotification:
      allOf:
        - $ref: '#/components/schemas/kapuaEntity'
        - properties:
            operationId:
              $ref: '#/components/schemas/kapuaId'
            progress:
              type: integer
            resource:
              type: string
            sentOn:
              type: string
              format: date-time
            status:
              $ref: '#/components/schemas/deviceOperation'
          example:
            type: managementOperationNotification
            id: RGoRWw9Pkhc
            scopeId: AQ
            createdOn: '2019-11-15T11:27:25.331Z'
            createdBy: Ag
            operationId: cjmXXKvLUY8
            progress: 0
            resource: download
            sentOn: '2019-11-15T11:27:25.267Z'
            status: RUNNING
    deviceNotificationListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/deviceNotification'
          example:
            type: managementOperationNotificationListResult
            limitExceeded: false
            size: 2
            items:
              - type: managementOperationNotification
                id: RGoRWw9Pkhc
                scopeId: AQ
                createdOn: '2019-11-15T11:27:25.331Z'
                createdBy: Ag
                operationId: cjmXXKvLUY8
                progress: 0
                resource: download
                sentOn: '2019-11-15T11:27:25.267Z'
                status: RUNNING
              - type: managementOperationNotification
                id: f1Hu1T8iIRw
                scopeId: AQ
                createdOn: '2019-11-15T11:27:32.331Z'
                createdBy: Ag
                operationId: cjmXXKvLUY8
                progress: 5
                resource: download
                sentOn: '2019-11-15T11:27:32.277Z'
                status: RUNNING
    operationProperty:
      type: object
      properties:
        name:
          type: string
        propertyType:
          type: string
        propertyValue:
          type: string
    deviceOperation:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - type: object
          properties:
            action:
              $ref: '#/components/schemas/action'
            appId:
              type: string
            deviceId:
              $ref: '#/components/schemas/kapuaId'
            endedOn:
              type: string
              format: date-time
            operationProperties:
              type: array
              items:
                $ref: '#/components/schemas/operationProperty'
            log:
              type: string
            operationId:
              $ref: '#/components/schemas/kapuaId'
            resource:
              type: string
            startedOn:
              type: string
              format: date-time
            status:
              type: string
              enum:
                - RUNNING
                - COMPLETED
                - FAILED
                - STALE
          example:
            type: deviceManagementOperation
            id: cjmXXKvLUY8
            scopeId: AQ
            createdOn: '2019-11-15T11:27:24.857Z'
            createdBy: AQ
            modifiedOn: '2019-11-15T11:30:01.975Z'
            modifiedBy: Ag
            optlock: 3
            action: EXECUTE
            appId: DEPLOY
            deviceId: UVjeGkGVT3A
            endedOn: '2019-11-15T11:30:01.568Z'
            operationProperties:
              - name: kapau.package.download.file.type
                propertyType: string
                propertyValue: DEPLOYMENT_PACKAGE
              - name: kapau.package.download.password
                propertyType: string
                propertyValue: kapua-password
              - name: kapau.package.download.username
                propertyType: string
                propertyValue: kapua-sys
              - name: kapua.package.download.block.delay
                propertyType: integer
                propertyValue: '1000'
              - name: kapua.package.download.block.size
                propertyType: integer
                propertyValue: '128'
              - name: kapua.package.download.block.timeout
                propertyType: integer
                propertyValue: '60000'
              - name: kapua.package.download.install
                propertyType: boolean
                propertyValue: 'true'
              - name: kapua.package.download.name
                propertyType: string
                propertyValue: heater
              - name: kapua.package.download.uri
                propertyType: java.net.URI
                propertyValue: 'http://download.eclipse.org/kura/releases/4.1.0/org.eclipse.kura.demo.heater_1.0.500.dp'
              - name: kapua.package.download.version
                propertyType: string
                propertyValue: 1.0.500
              - name: kapua.package.operation.id
                propertyType: org.eclipse.kapua.commons.model.id.KapuaEid
                propertyValue: '2588799701293395515'
              - name: kapua.package.reboot
                propertyType: boolean
                propertyValue: 'false'
            log: ''
            operationId: I-1DnL467js
            resource: DOWNLOAD
            startedOn: '2019-11-15T11:27:24.842Z'
            status: COMPLETED
    deviceOperationListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/deviceOperation'
          example:
            type: deviceManagementOperationListResult
            limitExceeded: false
            size: 1
            items:
              - type: deviceManagementOperation
                id: cjmXXKvLUY8
                scopeId: AQ
                createdOn: '2019-11-15T11:27:24.857Z'
                createdBy: AQ
                modifiedOn: '2019-11-15T11:30:01.975Z'
                modifiedBy: Ag
                optlock: 3
                action: EXECUTE
                appId: DEPLOY
                deviceId: UVjeGkGVT3A
                endedOn: '2019-11-15T11:30:01.568Z'
                operationProperties:
                  - name: kapau.package.download.file.type
                    propertyType: string
                    propertyValue: DEPLOYMENT_PACKAGE
                  - name: kapau.package.download.password
                    propertyType: string
                    propertyValue: kapua-password
                  - name: kapau.package.download.username
                    propertyType: string
                    propertyValue: kapua-sys
                  - name: kapua.package.download.block.delay
                    propertyType: integer
                    propertyValue: '1000'
                  - name: kapua.package.download.block.size
                    propertyType: integer
                    propertyValue: '128'
                  - name: kapua.package.download.block.timeout
                    propertyType: integer
                    propertyValue: '60000'
                  - name: kapua.package.download.install
                    propertyType: boolean
                    propertyValue: 'true'
                  - name: kapua.package.download.name
                    propertyType: string
                    propertyValue: heater
                  - name: kapua.package.download.uri
                    propertyType: java.net.URI
                    propertyValue: 'http://download.eclipse.org/kura/releases/4.1.0/org.eclipse.kura.demo.heater_1.0.500.dp'
                  - name: kapua.package.download.version
                    propertyType: string
                    propertyValue: 1.0.500
                  - name: kapua.package.operation.id
                    propertyType: org.eclipse.kapua.commons.model.id.KapuaEid
                    propertyValue: '2588799701293395515'
                  - name: kapua.package.reboot
                    propertyType: boolean
                    propertyValue: 'false'
                log: ''
                operationId: I-1DnL467js
                resource: DOWNLOAD
                startedOn: '2019-11-15T11:27:24.842Z'
                status: COMPLETED
    bundleInfo:
      type: object
      properties:
        name:
          type: string
          description: The bundle name
        version:
          type: string
          description: the bundle version
    devicePackage:
      type: object
      description: A Device Package
      properties:
        name:
          type: string
          description: The name of the package
        version:
          type: string
          description: The version of the package
        bundleInfos:
          type: object
          description: The bundles of this package
          properties:
            bundleInfo:
              type: array
              items:
                $ref: '#/components/schemas/bundleInfo'
        installDate:
          type: string
          description: The installation date of the package
          format: date-time
      example:
        name: org.eclipse.kura.demo.heater
        version: 1.0.300
        bundleInfos:
          bundleInfo:
            - name: org.eclipse.kura.demo.heater
              version: 1.0.300
    devicePackages:
      type: object
      properties:
        devicePackage:
          type: array
          items:
            $ref: '#/components/schemas/devicePackage'
      example:
        type: devicePackages
        devicePackage:
          - name: org.eclipse.kura.demo.heater
            version: 1.0.300
            bundleInfos:
              bundleInfo:
                - name: org.eclipse.kura.demo.heater
                  version: 1.0.300
    devicePackageDownloadRequestFileType:
      type: string
      description: The type of the URI resource content
      enum:
        - DEPLOYMENT_PACKAGE
        - EXECUTABLE_SCRIPT
    devicePackageDownloadRequest:
      type: object
      properties:
        uri:
          type: string
          description: The URI to download the resource
        name:
          type: string
          description: The name of the downloaded package
        version:
          type: string
          description: The version of the downloaded package
        username:
          type: string
          description: The username to use in the HTTP basic authentication when accessing the URI resource
        password:
          type: string
          description: The password to use in the HTTP basic authentication when accessing the URI resource
        fileHash:
          type: string
          description: The MD5 has to check resource integrity after download
        fileType:
          $ref: '#/components/schemas/devicePackageDownloadRequestFileType'
        install:
          type: boolean
          description: Whether to install or not the package after download
        reboot:
          type: boolean
          description: Whether to reboot the device after installation of the package
        rebootDelay:
          type: integer
          description: The delay in milliseconds to delay the reboot after installation
        advancedOptions:
          type: object
          properties:
            restart:
              type: boolean
              description: Whether or not to resume the partial download of the URI resource. The resource is identified by name and version provided
            blockSize:
              type: integer
              description: The block size in kBi to use while downloading the URI resource
            blockDelay:
              type: integer
              description: The delay in ms to delay each block download of the URI resource
            blockTimeout:
              type: integer
              description: The delay timeout to download each block of the URI resource
            notifyBlockSize:
              type: integer
              description: The amount of kBi to download before sending a new Operation Notification to the platform
            installVerifyURI:
              type: string
              description: The URI to download the script that can verify that the package installation has successfully completed.
      required:
        - uri
        - name
        - version
      example:
        uri: 'https://download.eclipse.org/kura/releases/4.1.0/org.eclipse.kura.demo.heater_1.0.500.dp'
        name: heater
        version: 1.0.500
        username: username
        password: password
        fileHash: 'MD5:0d04154164145cd6b2167fdd457ed28f'
        fileType: DEPLOYMENT_PACKAGE
        install: true
        reboot: false
        rebootDelay: 0
        advancedOptions:
          restart: false
          blockSize: 128
          blockDelay: 0
          blockTimeout: 5000
          notifyBlockSize: 256
          installVerifyURI: 'https://download.eclipse.org/kura/releases/4.1.0/org.eclipse.kura.demo.heater_1.0.500.verifier.sh'
    devicePackageUninstallRequest:
      type: object
      properties:
        name:
          type: string
          description: The package name to uninstall
        version:
          type: string
          description: The package verson to uninstall
        reboot:
          type: boolean
          description: Whether to reboot the device after uninstall of the package
        rebootDelay:
          type: integer
          description: The delay in milliseconds to delay the reboot after uninstallation
      required:
        - name
        - version
      example:
        name: org.eclipse.kura.demo.heater
        version: 1.0.500
        reboot: false
        rebootDelay: 0
    requestInput:
      type: object
      description: A Device Request
      properties:
        position:
          $ref: '#/components/schemas/position'
        channel:
          type: object
          properties:
            semanticParts:
              type: array
              items:
                type: string
            appName:
              type: string
            version:
              type: string
            method:
              $ref: '#/components/schemas/action'
            resources:
              type: array
              items:
                type: string
      example:
        channel:
          type: genericRequestChannel
          method: EXECUTE
          appName: CMD
          version: V1
          resources:
            - command
        payload:
          metrics:
            - valueType: string
              value: sleep
              name: command.command
            - valueType: string
              value: '180'
              name: command.argument
    requestOutput:
      type: object
      properties:
        id:
          type: string
          format: uuid
        scopeId:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
        deviceId:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
        clientId:
          type: string
        receivedOn:
          type: string
          format: date-time
        sentOn:
          type: string
          format: date-time
        capturedOn:
          type: string
          format: date-time
        position:
          $ref: '#/components/schemas/position'
        channel:
          type: object
          properties:
            appName:
              type: string
            version:
              type: string
            semanticParts:
              type: array
              items:
                type: string
        payload:
          type: object
          properties:
            exceptionMessage:
              type: string
            exceptionStack:
              type: string
            metrics:
              type: array
              items:
                type: object
            body:
              type: string
              format: base64
        responseCode:
          type: string
          enum:
            - ACCEPTED
            - SENT
            - BAD_REQUEST
            - NOT_FOUND
            - INTERNAL_ERROR
      example:
        capturedOn: '2019-09-13T13:53:09.447Z'
        channel:
          appName: CMD
          version: V1
        payload:
          metrics:
            - valueType: string
              value: 'false'
              name: command.timedout
            - valueType: string
              value: |
                sleep: missing operand
                Try 'sleep --help' for more information.
              name: command.stderr
            - valueType: string
              name: kapua.response.exception.stack
            - valueType: string
              name: kapua.response.exception.message
            - valueType: string
              value: '1'
              name: command.exit.code
            - valueType: string
              value: ''
              name: command.stdout
            - valueType: string
              value: '200'
              name: response.code
        receivedOn: '2019-09-13T13:53:09.466Z'
        scopeId: AQ
        sentOn: '2019-09-13T13:53:09.447Z'
    snapshot:
      type: object
      properties:
        id:
          type: string
        timestamp:
          type: integer
    snapshots:
      type: object
      properties:
        snapshotId:
          type: array
          items:
            $ref: '#/components/schemas/snapshot'
      example:
        type: deviceSnapshots
        snapshotId:
          - id: '0'
            timestamp: 0
          - id: '1568300687500'
            timestamp: 1568300687500
    domain:
      allOf:
        - $ref: '#/components/schemas/kapuaEntity'
        - type: object
          properties:
            groupable:
              type: boolean
            actions:
              type: array
              items:
                type: string
            name:
              type: string
          example:
            type: domain
            id: AQ
            createdOn: 2019-09-10T15:08:47.851Z
            createdBy: AQ
            name: account
            actions:
              - delete
              - write
              - read
            groupable: false
    domainListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/domain'
          example:
            type: domainListResult
            limitExceeded: false
            size: 1
            items:
              - type: domain
                id: AQ
                createdOn: 2019-09-10T15:08:47.851Z
                createdBy: AQ
                name: account
                actions:
                  - delete
                  - write
                  - read
                groupable: false
    usage:
      type: object
      properties:
        name:
          type: string
    endpointInfo:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - $ref: '#/components/schemas/endpointInfoCreator'
        - type: object
          example:
            type: endpointInfo
            id: PEMf9sotlls
            scopeId: AQ
            createdOn: '2019-09-13T14:52:19.850Z'
            createdBy: AQ
            modifiedOn: '2019-09-13T14:52:19.850Z'
            modifiedBy: AQ
            optlock: 1
            dns: 10.200.12.144
            port: 1883
            schema: mqtt
            secure: false
            usages:
              - name: MESSAGE_BROKER
              - name: PROVISION
            endpointType: resource
    endpointInfoCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntityCreator'
        - type: object
          properties:
            schema:
              type: string
            dns:
              type: string
            port:
              type: integer
            secure:
              type: boolean
            usages:
              type: array
              items:
                $ref: '#/components/schemas/usage'
            endpointType:
              type: string
              enum:
                - resource
                - cors
          example:
            schema: mqtt
            dns: 10.200.12.148
            port: '1883'
            secure: false
            usages:
              - name: MESSAGE_BROKER
              - name: PROVISION
            endpointType: resource
    endpointInfoListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/endpointInfo'
          example:
            type: endpointInfoListResult
            limitExceeded: false
            size: 1
            items:
              - type: endpointInfo
                id: PEMf9sotlls
                scopeId: AQ
                createdOn: '2019-09-13T14:52:19.850Z'
                createdBy: AQ
                modifiedOn: '2019-09-13T14:52:19.850Z'
                modifiedBy: AQ
                optlock: 1
                dns: 10.200.12.148
                port: 1883
                schema: mqtt
                secure: false
                usages:
                  - name: MESSAGE_BROKER
                  - name: PROVISION
                endpointType: resource
    group:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - type: object
          example:
            type: group
            id: Skm7PvmgOh0
            scopeId: AQ
            createdOn: '2019-09-13T15:16:09.174Z'
            createdBy: AQ
            modifiedOn: '2019-09-13T15:16:09.174Z'
            modifiedBy: AQ
            optlock: 1
            name: group-1
            description: An Access Group
    groupCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntityCreator'
        - type: object
          example:
            name: group-1
            description: An Access Group
    groupListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/group'
          example:
            type: groupListResult
            limitExceeded: false
            size: 1
            items:
              - type: group
                id: Skm7PvmgOh0
                scopeId: AQ
                createdOn: '2019-09-13T15:16:09.174Z'
                createdBy: AQ
                modifiedOn: '2019-09-13T15:16:09.174Z'
                modifiedBy: AQ
                optlock: 1
                name: group-1
                description: An Access Group
    job:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - type: object
          example:
            type: job
            id: auSoU2ph1bY
            scopeId: AQ
            createdOn: '2019-12-06T10:59:47.000Z'
            createdBy: AQ
            modifiedOn: '2019-12-06T10:59:47.000Z'
            modifiedBy: AQ
            optlock: 1
            name: new_job
    jobCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntityCreator'
      example:
        type: jobCreator
        name: newJob
        description: A new Job with a fancy description
    jobListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/job'
          example:
            type: jobListResult
            limitExceeded: false
            size: 1
            items:
              - type: job
                id: auSoU2ph1bY
                scopeId: AQ
                createdOn: '2019-12-06T10:59:47.000Z'
                createdBy: AQ
                modifiedOn: '2019-12-06T10:59:47.000Z'
                modifiedBy: AQ
                optlock: 1
                name: new_job
    isJobRunning:
      type: object
      properties:
        jobId:
          $ref: '#/components/schemas/kapuaId'
        isRunning:
          type: boolean
      example:
        isRunning: true
    jobStartOptions:
      type: object
      properties:
        targetIdSublist:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/kapuaId'
              - description: The ID of a Job Target
        resetStepIndex:
          type: boolean
        fromStepIndex:
          type: number
        enqueue:
          type: boolean
    jobExecution:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - type: object
          properties:
            startedOn:
              description: The moment when the job execution started
              type: string
              format: date-time
            endedOn:
              description: The moment when the job execution ended
              type: string
              format: date-time
            log:
              description: logs for the job execution
              type: string
            jobId:
              description: job id for this job execution
              $ref: '#/components/schemas/kapuaId'
            targetIds:
              type: array
              description: the IDs of the job target
              items:
                allOf:
                  - $ref: '#/components/schemas/kapuaId'
          example:
            type: jobExecution
            id: GTh9xBWezHY
            scopeId: AQ
            createdOn: '2019-12-06T11:00:58.000Z'
            createdBy: AQ
            modifiedOn: '2019-12-06T11:01:00.000Z'
            modifiedBy: AQ
            optlock: 2
            endedOn: '2019-12-06T12:01:00+01:00'
            jobId: {}
            log: "[INFO] 12/6/19 11:00 AM - Running before job...\n[INFO] 12/6/19 11:00 AM - Run configuration:\n[INFO] 12/6/19 11:00 AM - \tTarget count:           all\n[INFO] 12/6/19 11:00 AM - \tReset step index:       false\n[INFO] 12/6/19 11:00 AM - \tFrom step index:        0\n[INFO] 12/6/19 11:00 AM - \tResuming job execution: none\n[INFO] 12/6/19 11:00 AM - \tEnqueue:                false\n[INFO] 12/6/19 11:00 AM - Creating job execution...\n[INFO] 12/6/19 11:00 AM - Creating job execution... DONE!\n[INFO] 12/6/19 11:00 AM - Running before job... DONE!\n[INFO] 12/6/19 11:00 AM - Reading step: download package (index: 0)...\n[INFO] 12/6/19 11:00 AM - Reading step: download package (index: 0)... DONE!\n[INFO] 12/6/19 11:00 AM - RReading target: pahoClient (id: SbQbzB6oOOo)...\n[INFO] 12/6/19 11:00 AM - Reading target:pahoClient (id:SbQbzB6oOOo)... DONE!\n[INFO] 12/6/19 11:00 AM - Processing target: pahoClient (id: SbQbzB6oOOo)\n[INFO] 12/6/19 11:01 AM - Processing target: pahoClient (id: SbQbzB6oOOo) - DONE!\n[INFO] 12/6/19 11:01 AM - Reading target: client2 (id: A4QbzB6oZZo)...\n[INFO] 12/6/19 11:01 AM - Reading target: client2 (id: A4QbzB6oZZo)... DONE!\n[INFO] 12/6/19 11:01 AM - Writing target processing results...\n[INFO] 12/6/19 11:01 AM - Writing target processing results... DONE!\n[INFO] 12/6/19 11:01 AM - Running after job...\n"
            startedOn: '2019-12-06T12:00:58+01:00'
            targetIds:
              - Y-vYl9TKaf8
    jobExecutionListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/jobExecution'
          example:
            type: jobExecutionListResult
            limitExceeded: true
            size: 50
            items:
              - type: jobExecution
                id: GTh9xBWezHY
                scopeId: AQ
                createdOn: '2019-12-06T11:00:58.000Z'
                createdBy: AQ
                modifiedOn: '2019-12-06T11:01:00.000Z'
                modifiedBy: AQ
                optlock: 2
                endedOn: '2019-12-06T12:01:00+01:00'
                jobId: {}
                log: "[INFO] 12/6/19 11:00 AM - Running before job...\n[INFO] 12/6/19 11:00 AM - Run configuration:\n[INFO] 12/6/19 11:00 AM - \tTarget count:           all\n[INFO] 12/6/19 11:00 AM - \tReset step index:       false\n[INFO] 12/6/19 11:00 AM - \tFrom step index:        0\n[INFO] 12/6/19 11:00 AM - \tResuming job execution: none\n[INFO] 12/6/19 11:00 AM - \tEnqueue:                false\n[INFO] 12/6/19 11:00 AM - Creating job execution...\n[INFO] 12/6/19 11:00 AM - Creating job execution... DONE!\n[INFO] 12/6/19 11:00 AM - Running before job... DONE!\n[INFO] 12/6/19 11:00 AM - Reading step: download package (index: 0)...\n[INFO] 12/6/19 11:00 AM - Reading step: download package (index: 0)... DONE!\n[INFO] 12/6/19 11:00 AM - RReading target: pahoClient (id: SbQbzB6oOOo)...\n[INFO] 12/6/19 11:00 AM - Reading target:pahoClient (id:SbQbzB6oOOo)... DONE!\n[INFO] 12/6/19 11:00 AM - Processing target: pahoClient (id: SbQbzB6oOOo)\n[INFO] 12/6/19 11:01 AM - Processing target: pahoClient (id: SbQbzB6oOOo) - DONE!\n[INFO] 12/6/19 11:01 AM - Reading target: client2 (id: A4QbzB6oZZo)...\n[INFO] 12/6/19 11:01 AM - Reading target: client2 (id: A4QbzB6oZZo)... DONE!\n[INFO] 12/6/19 11:01 AM - Writing target processing results...\n[INFO] 12/6/19 11:01 AM - Writing target processing results... DONE!\n[INFO] 12/6/19 11:01 AM - Running after job...\n"
                startedOn: '2019-12-06T12:00:58+01:00'
                targetIds:
                  - Y-vYl9TKaf8
    jobStep:
      description: Step of the Job
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - type: object
          properties:
            jobId:
              type: string
            jobStepDefinitionId:
              type: string
            stepIndex:
              type: integer
            stepProperties:
              type: array
              items:
                description: Property of a Job's Step
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                      propertyType:
                        type: string
                      propertyValue:
                        type: string
          example:
            type: jobStep
            id: BL2MaF-ldS0
            scopeId: AQ
            createdOn: '2019-12-06T11:00:21.000Z'
            createdBy: AQ
            modifiedOn: '2019-12-06T11:00:21.000Z'
            modifiedBy: AQ
            optlock: 1
            name: step_one
            jobId: auSoU2ph1bY
            jobStepDefinitionId: Cg
            stepIndex: 0
            stepProperties:
              - name: commandInput
                propertyType: org.eclipse.kapua.service.device.management.command.DeviceCommandInput
                propertyValue: |-
                  <?xml version="1.0" encoding="UTF-8"?>
                   <commandInput>
                      <command>ls</command>
                      <timeout>30000</timeout>
                      <runAsynch>false</runAsynch>
                   </commandInput>
              - name: timeout
                propertyType: java.lang.Long
    jobStepCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntityCreator'
        - type: object
          properties:
            stepIndex:
              type: number
            jobStepDefinitionId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
            stepProperties:
              type: array
              items:
                $ref: '#/components/schemas/jobStepDefinitionProperty'
            jobStepProperties:
              type: array
              deprecated: true
              items:
                $ref: '#/components/schemas/jobStepDefinitionProperty'
      example:
        type: jobStepCreator
        name: Step 1
        description: A step with a description
        stepIndex: 0
        jobStepDefinitionId: Aw
        stepProperties:
          - name: bundleId
            propertyType: java.lang.String
            propertyValue: '999'
        jobStepProperties:
          - name: bundleId
            propertyType: java.lang.String
            propertyValue: '999'
    jobStepListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/jobStep'
          example:
            type: jobStepListResult
            limitExceeded: false
            size: 1
            items:
              - type: jobStep
                id: BL2MaF-ldS0
                scopeId: AQ
                createdOn: '2019-12-06T11:00:21.000Z'
                createdBy: AQ
                modifiedOn: '2019-12-06T11:00:21.000Z'
                modifiedBy: AQ
                optlock: 1
                name: step_one
                jobId: auSoU2ph1bY
                jobStepDefinitionId: Cg
                stepIndex: 0
                stepProperties:
                  - name: commandInput
                    propertyType: org.eclipse.kapua.service.device.management.command.DeviceCommandInput
                    propertyValue: |-
                      <?xml version="1.0" encoding="UTF-8"?>
                       <commandInput>
                          <command>ls</command>
                          <timeout>30000</timeout>
                          <runAsynch>false</runAsynch>
                       </commandInput>
                  - name: timeout
                    propertyType: java.lang.Long
    jobStepDefinition:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - type: object
          properties:
            stepType:
              type: string
            processorName:
              type: string
            readerName:
              type: string
            writerName:
              type: string
            stepProperties:
              type: array
              items:
                $ref: '#/components/schemas/jobStepDefinitionProperty'
      example:
        type: jobStepDefinition
        id: AQ
        createdOn: '2021-01-29T14:46:40.257Z'
        createdBy: AQ
        modifiedOn: '2021-01-29T14:46:40.257Z'
        modifiedBy: AQ
        optlock: 0
        name: Asset Write
        description: Writes to an asset using the Device Asset Management Service
        processorName: org.eclipse.kapua.service.device.management.asset.job.DeviceAssetWriteTargetProcessor
        stepProperties:
          - exampleValue: |-
              <?xml version="1.0" encoding="UTF-8"?>
              <deviceAssets>
                  <deviceAsset>
                      <name>assetName</name>
                      <channels>
                          <channel>
                              <valueType>binary</valueType>
                              <value>EGVzdCBzdHJpbmcgdmFsdWU=</value>
                              <name>binaryTest</name>
                          </channel>
                      </channels>
                  </deviceAsset>
              </deviceAssets>
            name: assets
            propertyType: org.eclipse.kapua.service.device.management.asset.DeviceAssets
            required: true
            secret: false
          - name: password
            propertyType: java.lang.String
            required: true
            secret: true
          - name: timeout
            propertyType: java.lang.Long
            propertyValue: '30000'
            required: false
            secret: false
        stepType: TARGET
    jobStepDefinitionProperty:
      type: object
      properties:
        name:
          type: string
        propertyType:
          type: string
        propertyValue:
          type: string
        required:
          type: boolean
        secret:
          type: boolean
        exampleValue:
          type: string
          readOnly: true
        minLength:
          type: integer
          readOnly: true
        maxLength:
          type: integer
          readOnly: true
        minValue:
          type: string
          readOnly: true
        maxValue:
          type: string
          readOnly: true
        validationRegex:
          type: string
          readOnly: true
    jobStepDefinitionListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/jobStepDefinition'
          example:
            type: jobStepDefinitionListResult
            limitExceeded: false
            size: 2
            items:
              - type: jobStepDefinition
                id: AQ
                createdOn: '2021-01-29T14:46:40.257Z'
                createdBy: AQ
                modifiedOn: '2021-01-29T14:46:40.257Z'
                modifiedBy: AQ
                optlock: 0
                name: Asset Write
                description: Writes to an asset using the Device Asset Management Service
                processorName: org.eclipse.kapua.service.device.management.asset.job.DeviceAssetWriteTargetProcessor
                stepProperties:
                  - exampleValue: |-
                      <?xml version="1.0" encoding="UTF-8"?>
                      <deviceAssets>
                          <deviceAsset>
                              <name>assetName</name>
                              <channels>
                                  <channel>
                                      <valueType>binary</valueType>
                                      <value>EGVzdCBzdHJpbmcgdmFsdWU=</value>
                                      <name>binaryTest</name>
                                  </channel>
                              </channels>
                          </deviceAsset>
                      </deviceAssets>
                    name: assets
                    propertyType: org.eclipse.kapua.service.device.management.asset.DeviceAssets
                    required: true
                    secret: false
                  - name: timeout
                    propertyType: java.lang.Long
                    propertyValue: '30000'
                    required: false
                    secret: false
                stepType: TARGET
              - type: jobStepDefinition
                id: Ag
                createdOn: '2021-01-29T14:46:48.061Z'
                createdBy: AQ
                modifiedOn: '2021-01-29T14:46:48.061Z'
                modifiedBy: AQ
                optlock: 0
                name: Bundle Start
                description: Starts a bundle using the Device Bundle Management Service
                processorName: org.eclipse.kapua.service.device.management.bundle.job.DeviceBundleStartTargetProcessor
                stepProperties:
                  - name: bundleId
                    propertyType: java.lang.String
                    required: true
                    secret: false
                  - name: password
                    propertyType: java.lang.String
                    required: true
                    secret: true
                  - name: timeout
                    propertyType: java.lang.Long
                    propertyValue: '30000'
                    required: false
                    secret: false
                stepType: TARGET
    jobTarget:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - $ref: '#/components/schemas/jobTargetCreator'
        - type: object
          properties:
            status:
              type: string
              enum:
                - PROCESS_OK
                - PROCESS_FAILED
                - PROCESS_AWAITING
                - AWAITING_COMPLETION
                - NOTIFIED_COMPLETION
            stepIndex:
              type: integer
            statusMessage:
              type: string
    jobTargetCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntityCreator'
        - type: object
          properties:
            jobId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the Job to attach the target to
            jobTargetId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the Device to attach the target to
          example:
            type: jobTargetCreator
            jobId: auSoU2ph1bY
            jobTargetId: JMQdKuPgUjE
    jobTargetListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/jobTarget'
          example:
            type: jobTargetListResult
            limitExceeded: false
            size: 1
            items:
              - type: jobTarget
                id: Y-vYl9TKaf8
                scopeId: AQ
                createdOn: '2019-12-06T11:00:02.000Z'
                createdBy: AQ
                modifiedOn: '2019-12-06T11:01:00.000Z'
                modifiedBy: AQ
                optlock: 2
                jobId: auSoU2ph1bY
                jobTargetId: VBk_ZDZSOV0
                status: PROCESS_OK
                stepIndex: 0
              - type: jobTarget
                id: Y-vYl9TKaf8
                scopeId: AQ
                createdOn: '2019-12-06T11:00:02.000Z'
                createdBy: AQ
                modifiedOn: '2019-12-06T11:01:00.000Z'
                modifiedBy: AQ
                optlock: 2
                jobId: baSSoU2ph1bY
                jobTargetId: VRG42ZDZSOV
                status: PROCESS_FAILED
                statusMessage: Device not connected
                stepIndex: 0
    jobTrigger:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - type: object
          example:
            type: trigger
            id: OlIPEFS4MYU
            scopeId: AQ
            createdOn: '2019-12-06T11:01:16.000Z'
            createdBy: AQ
            modifiedOn: '2019-12-06T11:01:16.000Z'
            modifiedBy: AQ
            optlock: 1
            name: cron
            endsOn: '2019-12-07T01:30:00+01:00'
            startsOn: '2019-12-06T12:00:00+01:00'
            triggerDefinitionId: AQ
            triggerProperties:
              - name: cronExpression
                propertyType: java.lang.String
                propertyValue: '* 0/5 * * * ?'
              - name: jobId
                propertyType: org.eclipse.kapua.model.id.KapuaId
                propertyValue: auSoU2ph1bY
              - name: scopeId
                propertyType: org.eclipse.kapua.model.id.KapuaId
                propertyValue: AQ
    jobTriggerCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntityCreator'
        - type: object
          properties:
            startsOn:
              type: string
              format: date-time
            endsOn:
              type: string
              format: date-time
            triggerDefinitionId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
            triggerProperties:
              type: array
              items:
                $ref: '#/components/schemas/triggerProperty'
      example:
        type: triggerCreator
        name: A trigger
        startsOn: '2021-01-31T00:00:00.000Z'
        triggerDefinitionId: AQ
        triggerProperties:
          - name: cronExpression
            propertyType: java.lang.String
            propertyValue: '* * * * * ? *'
    jobTriggerListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/jobTrigger'
          example:
            type: triggerListResult
            limitExceeded: false
            size: 3
            items:
              - type: trigger
                id: Q5psa2kJzks
                scopeId: AQ
                createdOn: '2019-12-06T11:00:49.000Z'
                createdBy: AQ
                modifiedOn: '2019-12-06T11:00:49.000Z'
                modifiedBy: AQ
                optlock: 1
                name: interval
                startsOn: '2019-12-06T12:00:00+01:00'
                triggerDefinitionId: Ag
                triggerProperties:
                  - name: interval
                    propertyType: java.lang.Integer
                    propertyValue: '3600'
                  - name: jobId
                    propertyType: org.eclipse.kapua.model.id.KapuaId
                    propertyValue: auSoU2ph1bY
                  - name: scopeId
                    propertyType: org.eclipse.kapua.model.id.KapuaId
                    propertyValue: AQ
              - type: trigger
                id: OlIPEFS4MYU
                scopeId: AQ
                createdOn: '2019-12-06T11:01:16.000Z'
                createdBy: AQ
                modifiedOn: '2019-12-06T11:01:16.000Z'
                modifiedBy: AQ
                optlock: 1
                name: cron
                endsOn: '2019-12-07T01:30:00+01:00'
                startsOn: '2019-12-06T12:00:00+01:00'
                triggerDefinitionId: AQ
                triggerProperties:
                  - name: cronExpression
                    propertyType: java.lang.String
                    propertyValue: '* 0/5 * * * ?'
                  - name: jobId
                    propertyType: org.eclipse.kapua.model.id.KapuaId
                    propertyValue: auSoU2ph1bY
                  - name: scopeId
                    propertyType: org.eclipse.kapua.model.id.KapuaId
                    propertyValue: AQ
              - type: trigger
                id: GOQMkJEQCPg
                scopeId: AQ
                createdOn: '2019-12-06T11:01:24.000Z'
                createdBy: AQ
                modifiedOn: '2019-12-06T11:01:24.000Z'
                modifiedBy: AQ
                optlock: 1
                name: device_conn
                startsOn: '2019-12-06T12:00:00+01:00'
                triggerDefinitionId: Aw
                triggerProperties:
                  - name: jobId
                    propertyType: org.eclipse.kapua.model.id.KapuaId
                    propertyValue: auSoU2ph1bY
                  - name: scopeId
                    propertyType: org.eclipse.kapua.model.id.KapuaId
                    propertyValue: AQ
    firedTrigger:
      allOf:
        - $ref: '#/components/schemas/kapuaEntity'
        - type: object
          example:
            type: firedTrigger
            id: OlIPEFS4MYU
            scopeId: AQ
            createdOn: '2019-12-06T11:01:16.000Z'
            createdBy: AQ
            firedOn: '2019-12-07T01:30:00+01:00'
            message: A error message
            status:
              $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D~1triggers~1%7BtriggerId%7D~1fired/get/parameters/3/schema'
            triggerId:
              $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D~1triggers~1%7BtriggerId%7D~1fired/get/parameters/2'
    firedTriggerListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/firedTrigger'
          example:
            - type: triggerListResult
              limitExceeded: false
              size: 3
              items:
                - type: firedTrigger
                  id: OlIPEFS4MYU
                  scopeId: AQ
                  createdOn: '2019-12-06T11:03:16.000Z'
                  createdBy: AQ
                  firedOn: '2019-12-06T11:03:16.000Z'
                  message: A error message
                  status: FAILED
                  triggerId: auSoU2ph1bY
                - type: firedTrigger
                  id: OlIPEFS4MYU
                  scopeId: AQ
                  createdOn: '2019-12-06T11:02:16.000Z'
                  createdBy: AQ
                  firedOn: '2019-12-06T11:02:16.000Z'
                  status: FIRED
                  triggerId: auSoU2ph1bY
                - type: firedTrigger
                  id: OlIPEFS4MYU
                  scopeId: AQ
                  createdOn: '2019-12-06T11:01:16.000Z'
                  createdBy: AQ
                  firedOn: '2019-12-06T11:01:16.000Z'
                  status: FIRED
                  triggerId: auSoU2ph1bY
    role:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - type: object
          example:
            type: role
            id: KmhOD4JHfwk
            scopeId: AQ
            createdOn: '2019-09-16T07:33:26.719Z'
            createdBy: AQ
            modifiedOn: '2019-09-16T07:33:26.719Z'
            modifiedBy: AQ
            optlock: 1
            name: new-role
            description: A new role
    roleCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntityCreator'
        - type: object
          properties:
            permissions:
              type: array
              items:
                $ref: '#/components/schemas/permission'
          example:
            name: new-role
            description: A new role
            permissions:
              - domain: broker
                action: connect
                forwardable: true
                targetScopeId: AQ
    roleListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/role'
          example:
            type: roleListResult
            limitExceeded: false
            size: 2
            items:
              - type: role
                id: AQ
                scopeId: AQ
                createdOn: '2019-09-10T15:08:50.701Z'
                createdBy: AQ
                modifiedOn: '2019-09-10T15:08:50.701Z'
                modifiedBy: AQ
                optlock: 0
                name: admin
              - type: role
                id: OYLRT30Z9sA
                scopeId: AQ
                createdOn: '2019-09-11T14:48:33.531Z'
                createdBy: AQ
                modifiedOn: '2019-09-11T14:48:33.531Z'
                modifiedBy: AQ
                optlock: 1
                name: role
                description: desc
    rolePermission:
      allOf:
        - $ref: '#/components/schemas/kapuaEntity'
        - type: object
          properties:
            roleId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
            permission:
              $ref: '#/components/schemas/permission'
          example:
            type: rolePermission
            id: BpbQqk31GLc
            scopeId: AQ
            createdOn: '2019-09-16T07:49:51.117Z'
            createdBy: AQ
            roleId: OYLRT30Z9sA
            permission:
              domain: domain
              action: read
              forwardable: true
    rolePermissionCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaEntityCreator'
        - type: object
          properties:
            permission:
              $ref: '#/components/schemas/permission'
          example:
            permission:
              domain: account
              action: read
              forwardable: true
    rolePermissionListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/rolePermission'
          example:
            type: rolePermissionListResult
            limitExceeded: false
            size: 2
            items:
              - type: rolePermission
                id: BPJyd1ObUK8
                scopeId: AQ
                createdOn: '2019-09-16T07:46:06.191Z'
                createdBy: AQ
                roleId: OYLRT30Z9sA
                permission:
                  domain: broker
                  action: connect
                  forwardable: true
              - type: rolePermission
                id: Zi4XYBuG7Xw
                scopeId: AQ
                createdOn: '2019-09-16T07:46:14.082Z'
                createdBy: AQ
                roleId: OYLRT30Z9sA
                permission:
                  domain: device
                  action: read
                  forwardable: true
    servicePropertyDefinition:
      type: object
      properties:
        name:
          description: The name of the field that is represented by this property
          type: string
        array:
          description: A flag indicating whether this property has an array value or not
          type: boolean
        encrypted:
          description: A flag indicating whether this property value is encrypted or not
          type: boolean
        type:
          description: The data type of this property
          type: string
        value:
          description: The value of this property
          type: array
          items:
            type: string
      example:
        name: maxNumberChildEntities
        array: false
        encrypted: false
        type: Integer
        value:
          - '0'
    serviceIcon:
      type: object
      properties:
        resource:
          type: string
        size:
          type: integer
    serviceComponentConfiguration:
      type: object
      properties:
        name:
          description: A name for the Service
          type: string
        id:
          description: An ID for the Service
          type: string
        definition:
          description: An object containing all the Property Definitions
          type: object
          properties:
            id:
              type: string
            AD:
              type: array
              items:
                $ref: '#/components/schemas/serviceAttributeDefinition'
            Icon:
              type: array
              items:
                $ref: '#/components/schemas/serviceIcon'
            name:
              type: string
            description:
              type: string
        properties:
          description: An object containing all the Property Values
          type: object
          properties:
            property:
              type: array
              items:
                $ref: '#/components/schemas/servicePropertyDefinition'
      example:
        name: AccountService
        id: org.eclipse.kapua.service.account.AccountService
        definition:
          description: 'This is the configuration for the kapua AccountService. '
          id: org.eclipse.kapua.service.account.AccountService
          name: AccountService
          AD:
            - cardinality: 0
              default: 'false'
              description: Whether to allow infinite child accounts for this account or not.
              id: infiniteChildEntities
              name: infiniteChildAccounts
              required: true
              type: Boolean
              Option: []
            - cardinality: 0
              default: '0'
              description: Maximum number of child accounts that are allowed to be created for this account. Valid if infiniteChildAccounts set to false.
              id: maxNumberChildEntities
              min: '0'
              name: maxNumberChildAccounts
              required: true
              type: Integer
              Option: []
          Icon:
            - resource: OSGI-INF/account-service.png
              size: 32
        properties:
          property:
            - name: maxNumberChildEntities
              array: false
              encrypted: false
              type: Integer
              value:
                - '0'
            - name: infiniteChildEntities
              array: false
              encrypted: false
              type: Boolean
              value:
                - 'true'
    serviceComponentConfigurationInput:
      type: object
      properties:
        id:
          type: string
        properties:
          type: object
          properties:
            property:
              type: array
              items:
                $ref: '#/components/schemas/servicePropertyDefinition'
      example:
        id: org.eclipse.kapua.service.account.AccountService
        properties:
          property:
            - name: maxNumberChildEntities
              type: Integer
              value:
                - '7'
            - name: infiniteChildEntities
              type: Boolean
              value:
                - 'true'
    serviceComponentConfigurations:
      type: object
      properties:
        configuration:
          type: array
          items:
            $ref: '#/components/schemas/serviceComponentConfiguration'
      example:
        type: serviceConfiguration
        configuration:
          - name: AccountService
            id: org.eclipse.kapua.service.account.AccountService
            definition:
              description: 'This is the configuration for the kapua AccountService. '
              id: org.eclipse.kapua.service.account.AccountService
              name: AccountService
              AD:
                - cardinality: 0
                  default: 'false'
                  description: Whether to allow infinite child accounts for this account or not.
                  id: infiniteChildEntities
                  name: infiniteChildAccounts
                  required: true
                  type: Boolean
                  Option: []
                - cardinality: 0
                  default: '0'
                  description: Maximum number of child accounts that are allowed to be created for this account. Valid if infiniteChildAccounts set to false.
                  id: maxNumberChildEntities
                  min: '0'
                  name: maxNumberChildAccounts
                  required: true
                  type: Integer
                  Option: []
              Icon:
                - resource: OSGI-INF/account-service.png
                  size: 32
            properties:
              property:
                - name: maxNumberChildEntities
                  array: false
                  encrypted: false
                  type: Integer
                  value:
                    - '0'
                - name: infiniteChildEntities
                  array: false
                  encrypted: false
                  type: Boolean
                  value:
                    - 'true'
          - name: CredentialService
            id: org.eclipse.kapua.service.authentication.credential.CredentialService
            definition:
              description: 'This is the configuration for the kapua CredentialService. '
              id: org.eclipse.kapua.service.authentication.credential.CredentialService
              name: CredentialService
              AD:
                - cardinality: 0
                  default: 'true'
                  description: User lockout policy enable.
                  id: lockoutPolicy.enabled
                  name: lockoutPolicy.enabled
                  required: true
                  type: Boolean
                  Option: []
                - cardinality: 0
                  default: '3'
                  description: Number of consecutive login failures before the user gets locked. Valid if lockout policy is enabled.
                  id: lockoutPolicy.maxFailures
                  min: '0'
                  name: lockoutPolicy.maxFailures
                  required: true
                  type: Integer
                  Option: []
                - cardinality: 0
                  default: '3600'
                  description: The amount of time in seconds required after the last login failure to automatically reset the failure counter.
                  id: lockoutPolicy.resetAfter
                  min: '0'
                  name: lockoutPolicy.resetAfter
                  required: true
                  type: Integer
                  Option: []
                - cardinality: 0
                  default: '10800'
                  description: For a locked user the amount of time in seconds required after the last login failure to automatically unlock the user.
                  id: lockoutPolicy.lockDuration
                  min: '0'
                  name: lockoutPolicy.lockDuration
                  required: true
                  type: Integer
                  Option: []
              Icon:
                - resource: OSGI-INF/user-service.png
                  size: 32
            properties:
              property:
                - name: lockoutPolicy.resetAfter
                  array: false
                  encrypted: false
                  type: Integer
                  value:
                    - '3600'
                - name: lockoutPolicy.lockDuration
                  array: false
                  encrypted: false
                  type: Integer
                  value:
                    - '10800'
                - name: lockoutPolicy.enabled
                  array: false
                  encrypted: false
                  type: Boolean
                  value:
                    - 'true'
                - name: lockoutPolicy.maxFailures
                  array: false
                  encrypted: false
                  type: Integer
                  value:
                    - '3'
    serviceComponentConfigurationsInput:
      type: object
      properties:
        configuration:
          type: array
          items:
            $ref: '#/components/schemas/serviceComponentConfigurationInput'
      example:
        type: serviceConfiguration
        configuration:
          - id: org.eclipse.kapua.service.account.AccountService
            properties:
              property:
                - name: maxNumberChildEntities
                  type: Integer
                  value:
                    - '15'
                - name: infiniteChildEntities
                  type: Boolean
                  value:
                    - false
          - id: org.eclipse.kapua.service.authentication.credential.CredentialService
            properties:
              property:
                - name: lockoutPolicy.resetAfter
                  type: Integer
                  value:
                    - '36000'
                - name: lockoutPolicy.lockDuration
                  type: Integer
                  value:
                    - '108000'
                - name: lockoutPolicy.enabled
                  type: Boolean
                  value:
                    - 'false'
                - name: lockoutPolicy.maxFailures
                  type: Integer
                  value:
                    - '30'
    serviceOption:
      type: object
      properties:
        label:
          type: string
        value:
          type: string
    serviceAttributeDefinition:
      description: The definition for a single configuration value
      type: object
      properties:
        Option:
          type: array
          items:
            $ref: '#/components/schemas/serviceOption'
        default:
          description: The default value for this field
          type: string
        type:
          description: The data type of this field
          type: object
        cardinality:
          description: The cardinality of this field
          type: integer
        min:
          description: The minimum allowed value for this field
          type: string
        max:
          description: The maximum allowed value for this field
          type: string
        description:
          description: The description of this field
          type: string
        id:
          description: An unique ID for this field
          type: string
        required:
          description: A flag indicating whether this field is required or not
          type: boolean
        name:
          description: A human readable name for this field
          type: string
      example:
        cardinality: 0
        default: 'false'
        description: Whether to allow infinite groups for this account or not.
        id: infiniteChildEntities
        name: infiniteChildGroups
        required: true
        type: Boolean
        Option: []
    systemInfo:
      type: object
      description: System info
      properties:
        version:
          type: string
          description: Version of the system
        revision:
          type: string
          description: Last commit hash of the system
        buildDate:
          type: string
          description: Build date of the system
        buildNumber:
          type: string
          description: Build number of the system
        buildBranch:
          type: string
          description: Build branch of the system
      example:
        buildBranch: release/2.0.0
        buildNumber: 142
        buildDate: '2023-03-02T08:50:59Z UTC'
        revision: e53c7b7d4208204a0791ec296fa3d4dbe2344585
        version: 2.0.0
    tag:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - type: object
          example:
            type: tag
            id: FJ6-FLuIcok
            scopeId: AQ
            createdOn: '2019-09-16T08:52:32.562Z'
            createdBy: AQ
            modifiedOn: '2019-09-16T08:52:32.562Z'
            modifiedBy: AQ
            optlock: 1
            name: tag-1
            description: A new Tag
    tagCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntityCreator'
        - type: object
          example:
            name: tag-1
            description: A new Tag
    tagListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/tag'
          example:
            type: tagListResult
            limitExceeded: false
            size: 1
            items:
              - type: tag
                id: FJ6-FLuIcok
                scopeId: AQ
                createdOn: '2019-09-16T08:52:32.562Z'
                createdBy: AQ
                modifiedOn: '2019-09-16T08:52:32.562Z'
                modifiedBy: AQ
                optlock: 1
                name: tag-1
                description: A new Tag
    triggerProperty:
      type: object
      properties:
        name:
          type: string
        propertyType:
          type: string
        propertyValue:
          type: string
      required:
        - name
        - propertyType
        - propertyValue
      example:
        name: jobId
        propertyType: org.eclipse.kapua.model.id.KapuaId
        propertyValue: AQ
    triggerDefinition:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - type: object
          properties:
            triggerType:
              type: string
              enum:
                - TIMER
                - EVENT
            processorName:
              type: string
            triggerProperties:
              type: array
              items:
                $ref: '#/components/schemas/triggerProperty'
      example:
        type: triggerDefinition
        id: AQ
        scopeId: AQ
        createdOn: '2021-01-29T14:45:04.460Z'
        createdBy: AQ
        modifiedOn: '2021-01-29T14:45:04.460Z'
        modifiedBy: AQ
        optlock: 0
        name: Cron Job
        description: Starts the job according to the given CRON expression
        processorName: org.eclipse.kapua.service.scheduler.trigger.quartz.job.KapuaJobLauncer
        triggerProperties:
          - name: cronExpression
            propertyType: java.lang.String
          - name: jobId
            propertyType: org.eclipse.kapua.model.id.KapuaId
          - name: scopeId
            propertyType: org.eclipse.kapua.model.id.KapuaId
        triggerType: TIMER
    triggerDefinitionListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/triggerDefinition'
          example:
            type: triggerDefinitionListResult
            limitExceeded: false
            size: 3
            items:
              - type: triggerDefinition
                id: AQ
                scopeId: AQ
                createdOn: '2021-01-29T14:45:04.460Z'
                createdBy: AQ
                modifiedOn: '2021-01-29T14:45:04.460Z'
                modifiedBy: AQ
                optlock: 0
                name: Cron Job
                description: Starts the job according to the given CRON expression
                processorName: org.eclipse.kapua.service.scheduler.trigger.quartz.job.KapuaJobLauncer
                triggerProperties:
                  - name: cronExpression
                    propertyType: java.lang.String
                  - name: jobId
                    propertyType: org.eclipse.kapua.model.id.KapuaId
                  - name: scopeId
                    propertyType: org.eclipse.kapua.model.id.KapuaId
                triggerType: TIMER
              - type: triggerDefinition
                id: Ag
                scopeId: AQ
                createdOn: '2021-01-29T14:45:04.614Z'
                createdBy: AQ
                modifiedOn: '2021-01-29T14:45:04.614Z'
                modifiedBy: AQ
                optlock: 0
                name: Interval Job
                description: Starts the job according to the given interval
                processorName: org.eclipse.kapua.service.scheduler.trigger.quartz.job.KapuaJobLauncer
                triggerProperties:
                  - name: interval
                    propertyType: java.lang.Integer
                  - name: jobId
                    propertyType: org.eclipse.kapua.model.id.KapuaId
                  - name: scopeId
                    propertyType: org.eclipse.kapua.model.id.KapuaId
                triggerType: TIMER
              - type: triggerDefinition
                id: Aw
                scopeId: AQ
                createdOn: '2021-01-29T14:45:04.781Z'
                createdBy: AQ
                modifiedOn: '2021-01-29T14:45:04.781Z'
                modifiedBy: AQ
                optlock: 0
                name: Device Connect
                description: Starts the job when the device target connects
                processorName: '???'
                triggerProperties:
                  - name: delay
                    propertyType: java.lang.Integer
                  - name: jobId
                    propertyType: org.eclipse.kapua.model.id.KapuaId
                  - name: scopeId
                    propertyType: org.eclipse.kapua.model.id.KapuaId
                triggerType: EVENT
    user:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - $ref: '#/components/schemas/userCreator'
        - type: object
          example:
            type: user
            id: AQ
            scopeId: AQ
            createdOn: '2019-09-10T15:08:54.781Z'
            createdBy: AQ
            modifiedOn: '2019-09-10T15:08:54.781Z'
            modifiedBy: AQ
            optlock: 0
            name: kapua-sys
            displayName: Kapua Sysadmin
            email: kapua-sys@eclipse.org
            phoneNumber: +1 555 123 4567
            status: ENABLED
            userType: INTERNAL
    userCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntityCreator'
        - type: object
          properties:
            status:
              type: string
              enum:
                - ENABLED
                - DISABLED
            displayName:
              type: string
            email:
              type: string
              format: email
            phoneNumber:
              type: string
            userType:
              type: string
              enum:
                - DEVICE
                - INTERNAL
                - EXTERNAL
            externalId:
              type: string
            externalUsername:
              type: string
            expirationDate:
              type: string
              format: date-time
          example:
            name: donald-duck
            status: ENABLED
            displayName: Donald Duck
            email: donald.duck@duckburg.org
            phoneNumber: +1 (555) 816 1851
            userType: INTERNAL
            expirationDate: '2019-12-31T00:00:00.000Z'
    userListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/user'
          example:
            type: userListResult
            limitExceeded: false
            size: 2
            users:
              - type: user
                id: AQ
                scopeId: AQ
                createdOn: '2019-09-10T15:08:54.781Z'
                createdBy: AQ
                modifiedOn: '2019-09-10T15:08:54.781Z'
                modifiedBy: AQ
                optlock: 0
                name: kapua-sys
                displayName: Kapua Sysadmin
                email: kapua-sys@eclipse.org
                phoneNumber: +1 555 123 4567
                status: ENABLED
                userType: INTERNAL
              - type: user
                id: Ag
                scopeId: AQ
                createdOn: '2019-09-10T15:08:54.781Z'
                createdBy: AQ
                modifiedOn: '2019-09-10T15:08:54.781Z'
                modifiedBy: AQ
                optlock: 0
                name: kapua-broker
                displayName: Kapua Broker
                email: kapua-broker@eclipse.org
                phoneNumber: +1 555 123 4567
                status: ENABLED
                userType: INTERNAL
    mfaOption:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - description: An object containing all the information for a single MfaOption
          type: object
          properties:
            userId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
            trustKey:
              description: |
                The key of the trusted machine.
              type: string
            trustExpirationDate:
              description: |
                The moment when the machine trust will expire.
              type: string
              format: date-time
          example:
            type: mfaOption
            id: Tu4UpgmN0A4
            scopeId: AQ
            createdOn: '2021-05-12T08:04:21.962Z'
            createdBy: AQ
            modifiedOn: '2021-05-12T08:04:21.962Z'
            modifiedBy: AQ
            optlock: '1,'
            userId: AQ
            trustKey: exampleTrustKey
            trustExpirationDate: '2020-31-12T00:00:00.000Z'
    mfaOptionCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntityCreator'
        - type: object
    passwordChangeRequest:
      allOf:
        - description: Represent a request for changing the user password
          type: object
          properties:
            currentPassword:
              type: string
            newPassword:
              type: string
          example:
            currentPassword: Welcome1234!
            newPassword: NewWelcome1234!
    passwordResetRequest:
      allOf:
        - description: Represent a request for resetting a user password
          type: object
          properties:
            newPassword:
              type: string
          example:
            newPassword: newPassword42!
    userProfile:
      allOf:
        - description: The user profile
          type: object
          properties:
            displayName:
              type: string
            phoneNumber:
              type: string
            email:
              type: string
          example:
            displayName: Foo42
            phoneNumber: '424202424'
            email: foo@bar.com
  requestBodies:
    kapuaQuery:
      description: An object to specify Query options
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/kapuaQuery'
      required: true
  responses:
    countResult:
      description: The count of the available Entities
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/kapuaCountResult'
    kapuaError:
      description: An error occurred while performing the request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/kapuaError'
    entityNotFound:
      description: The desired entity could not be found
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/kapuaError'
              - properties:
                  entityType:
                    description: The type of the entity that could not be found
                    type: string
                  entityId:
                    description: The ID of the entity that could not be found
                    type: string
    illegalArgument:
      description: An illegal value has been passes to the operation
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/kapuaError'
              - properties:
                  argumentName:
                    description: The name of the argument who holds an illegal value
                    type: string
                  argumentValue:
                    description: The illegal value passed to the operation
                    type: string
    illegalNullArgument:
      description: An illegal null argument has been passed to the operation
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/kapuaError'
              - properties:
                  argumentName:
                    type: string
                    description: The name of the argument who holds an illegal null value
    subjectUnauthorized:
      description: The user performing the operation does not have the required permissions
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/kapuaError'
              - properties:
                  permission:
                    description: 'The permission that is required to perform the operation, and that the current user is missing'
                    type: string
    unauthenticated:
      description: 'The provided AccessToken could not be found, or no AccessToken has been provided'
    entityUniqueness:
      description: An Entity with the same unique fields is already present in the system
  securitySchemes:
    kapuaToken:
      description: 'The default AccessToken Security Scheme. A [JWT](https://jwt.io) is used to represent the claims of a user'
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - kapuaToken: []
x-explorer-enabled: false
x-samples-languages:
  - java
  - python
  - node
  - javascript
  - ruby
  - curl