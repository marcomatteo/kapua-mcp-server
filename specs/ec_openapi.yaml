openapi: 3.0.3
info:
  title: Everyware Cloud REST API
  version: 6.0.8-10540
  contact:
    name: Eurotech
    url: 'https://www.eurotech.com'
  description: |
    # Introduction
    Everyware Cloud exposes a comprehensive set of Web Service APIs for application integration purposes. The Everyware Cloud REST API allows you to build applications that use Representational State Transfer HTTP calls to retrieve, modify, or publish platform data. For example through the APIs, you are able to access all the functionality of the Console or to control a device from your application built on top of Everyware Cloud.

    The Everyware Cloud platform conforms to standard REpresentational State Transfer (REST) protocol to expose its Application Programming Interfaces (API). REST has emerged over the past few years as a predominant Web service design model. REST-style architectures consist of clients and servers. Clients initiate requests to servers, while servers process requests and return appropriate responses. Requests and responses are built around the transfer of representations of resources. A resource can be essentially any coherent and meaningful concept that may be addressed. A representation of a resource is typically a document that captures the current or intended state of a resource

    Everyware Cloud RESTful APIs expose the standard action types (create, read, update, delete) over the platform objects. They are capable of retrieving a resource representation in XML or JSON format. You can use the REST HTTP Accept Header to specify the representation requested using the "application/xml" and "application/json" Media Types. As an alternative to the Accept header, you can specify the requested data representation by appending an ".xml" or ".json" suffix to the path part of your request URLs

    For more details on the Everyware Cloud REST APIs, please refer to:
    - [The Everyware Cloud Documentation - REST API Getting Started](https://ec.eurotech.com/docs/rest-getting-started)
servers:
  - description: Everyware Cloud REST API Endpoint hosted where this definition file is hosted
    url: /v1
  - description: Everyware Cloud REST API Endpoint custom
    url: '{scheme}://{host}:{port}/{basePath}'
    variables:
      scheme:
        default: https
        enum:
          - http
          - https
      host:
        description: Host name of the Everyware Cloud REST API Endpoint
        default: api.your-everyware-cloud.com
      port:
        description: Port number of the Everyware Cloud REST API Endpoint
        default: '8080'
      basePath:
        description: The Base path of the Everyware Cloud REST API Endpoint
        default: v1
  - description: Localhost Docker Compose
    url: 'http://localhost:8081/v1'
paths:
  /authentication/user:
    post:
      tags:
        - Authentication
      summary: Login - User and Password
      operationId: authenticationUser
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    user:
                      $ref: '#/paths/~1authentication~1mfa/post/requestBody/content/application~1json/schema/properties/username'
                    password:
                      $ref: '#/paths/~1authentication~1mfa/post/requestBody/content/application~1json/schema/properties/password'
                    authenticationCode:
                      $ref: '#/paths/~1authentication~1mfa/post/requestBody/content/application~1json/schema/properties/authenticationCode'
                    trustKey:
                      $ref: '#/paths/~1authentication~1mfa/post/requestBody/content/application~1json/schema/properties/trustKey'
                    trustMe:
                      type: boolean
                      description: Whether to generate a TrustKey or not.
            examples:
              Admin:
                value:
                  username: ec-sys
                  password: ec-password
              MFA with AuthenticationCode:
                value:
                  username: ec-sys
                  password: ec-password
                  authenticationCode: 123456
                  trustMe: true
              MFA with TrustKey:
                value:
                  username: ec-sys
                  password: ec-password
                  trustKey: 1c34b3d4-ca23-11ec-9d64-0242ac120002
        required: true
      responses:
        '200':
          description: The new AccessToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessToken'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '500':
          $ref: '#/components/responses/kapuaError'
      security: []
  /authentication/apikey:
    post:
      tags:
        - Authentication
      summary: Login - API Key
      operationId: authenticationApiKey
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKey:
                  type: string
                  format: base64
                  example: z8PEVr4XdBS/KKEKbVG9tJzj6DNNpSVCDpW53CWm
              required:
                - apiKey
      responses:
        '200':
          description: The new AccessToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessToken'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '500':
          $ref: '#/components/responses/kapuaError'
      security: []
  /authentication/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh an AccessToken
      description: |
        Creates a new AccessToken from an existing (even if expired) AccessToken and a Refresh Token that must be still valid.
        Regardless of the expiration date, the AccessToken provided to the refresh operation WILL be invalidated
      operationId: authenticationRefresh
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  format: uuid
                tokenId:
                  $ref: '#/components/schemas/accessToken/allOf/1/properties/tokenId'
              required:
                - refreshToken
                - tokenId
            example:
              refreshToken: 15395d03-ccad-4aed-a57a-cd0e289e822c
              tokenId: eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJodHRwczovL3d3dy5lY2xpcHNlLm9yZy9rYXB1YSIsImlhdCI6MTYyMjQ3NDE1NCwiZXhwIjoxNjIyNDc0MTU0LCJzdWIiOiJBUSIsInNJZCI6IkFRIn0.cVHkdXKbAtiOPUj1tyUQi9mRiRV9e6CwQ9RMLmAoX1UCK-POZcusqgSvuaaDzDIe-WNUjsalYYqNquxync8bvOF8Bx84rS8BJlB3anxCIaXwi7_5E9ZjmOSgvNiwgDPFVQsRo9MaNTe07jb3TsT1BPR9zo-i9-OEada6o4nhyaBNrAw_vybA3aLp6hamUNP1vHLRhlq0tnHgtGtitCW1_VBt4Eh0b41Enfs7G7hWv0Sj2CfwVIwAQzJ55MV5tnTjuD-eOD5xxeQGlWTol4Yc40jmOKjo2kshJlEQRNkp6mFzJ3EJxE8nBWhbWO4hd36eI0rB8pHxSdsFDbVAcxyRM44K7YuLENCk2mdMRgv9d7CKUTujvPw5vCoa5IQY7E47rWszwKAF2xJBU8hYwI8BhQWbB6efAaB-lkzq4rCziBU5WzTDZlries4WqPqM9mgfIPjlHP4po2b-RAK-89E-FejOvNefNcXqvqt5QPiNwj9bdLmhXlO4ladZ-wKw-22AYbqVhhoffOYT2mdxqXGc9F9XsRnsNswzxUdejBF6war4XqqxsrcPoYoReLMGlR1piQ1dpcPQlY6p9qKlkpBGJFL3pnBLSSE0mj9_2-zDKmJ81stUr51yP17ky2GB3Ls5q4O8gD83CJjqZaW-6xNO5iJENr4UYK4AV7yzfWqLAI8
      responses:
        '200':
          description: The new AccessToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessToken'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      security: []
  /authentication/jwt:
    post:
      tags:
        - Authentication
      summary: Login - JWT
      operationId: authenticationJwt
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                jwt:
                  $ref: '#/components/schemas/accessToken/allOf/1/properties/tokenId'
              required:
                - jwt
      responses:
        '200':
          description: The new AccessToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessToken'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '500':
          $ref: '#/components/responses/kapuaError'
      security: []
  /authentication/info:
    get:
      description: Returns all the Authentication and Authorization informations about the current session
      tags:
        - Authentication
      summary: Login Info
      operationId: authenticationLoginInfo
      responses:
        '200':
          description: An object conatining all the Authentication and Authorization informations about the current session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginInfo'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '500':
          $ref: '#/components/responses/kapuaError'
  /authentication/logout:
    post:
      tags:
        - Authentication
      summary: Logout
      operationId: authenticationLogout
      responses:
        '204':
          description: Logout Successful
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '500':
          $ref: '#/components/responses/kapuaError'
  /authentication/mfa:
    post:
      tags:
        - Authentication
      summary: 'MFA Login - User, Password and authenticationCode/trustKey'
      description: This resource is deprecated and will be removed in future releases. Please make use of /authentication/user and properties in UsernamePasswordCredentials.
      operationId: authenticationMfaUser
      deprecated: true
      parameters:
        - name: enableTrust
          in: query
          description: 'If true, the machine trust key is enabled for the MfaOption'
          schema:
            type: boolean
            default: false
          required: false
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: the username of the user
                  pattern: '^[a-zA-Z0-9\_\-]{3,}$'
                password:
                  type: string
                  description: the password of the user
                  pattern: '^.*(?=.{12,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!\"\#$%&''()*+,\-./:;<=>?@\[\]\\^_`{|}~]).*$'
                authenticationCode:
                  type: string
                  description: The MFA authentication code
                  pattern: '^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$'
                trustKey:
                  type: string
                  description: A long-lived key to be used within an authentication with MFA from a trusted machine
                  pattern: '^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$'
              required:
                - username
                - password
            examples:
              kapua-sys:
                description: Default kapua-sys login credentials (with dummy MFA)
                value:
                  username: kapua-sys
                  password: kapua-password
                  authenticationCode: 123456
      responses:
        '200':
          description: The new AccessToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessToken'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '500':
          $ref: '#/components/responses/kapuaError'
      security: []
  '/{scopeId}/authorization/claims':
    get:
      tags:
        - Authorization
      summary: Get all the Claims
      operationId: fetchUserClaims
      parameters:
        - $ref: '#/components/parameters/scopeId'
      responses:
        '200':
          description: The list of User's claims in the Scope
          content:
            application/json:
              schema:
                allOf:
                  - description: A container for a list of claim objects
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          type: string
                          description: 'Represent a user''s claims, in the format `domain:action`.'
                    example:
                      - 'job:read'
                      - 'device_management_registry:write'
                      - 'group:delete'
                      - 'device_lifecycle:read'
                      - 'certificate:read'
                      - 'device_lifecycle:delete'
                      - 'certificate:write'
                      - 'credential:read'
                      - 'event_store:write'
                      - 'device:write'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accessinfos':
    get:
      tags:
        - Access Info
      summary: Get all the AccessInfo
      operationId: accessInfoList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: userId
          in: query
          description: The ID of the User to use as a filter in the query
          schema:
            allOf:
              - $ref: '#/components/schemas/kapuaId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the AccessInfo objects available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessInfoListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Access Info
      summary: Create an AccessInfo
      operationId: accessInfoCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: The AccessInfoCreator object to create the new AccessInfo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accessInfoCreator'
        required: true
      responses:
        '201':
          description: The AccessInfo that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessInfoListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accessinfos/{accessInfoId}':
    get:
      tags:
        - Access Info
      summary: Get a single AccessInfo
      operationId: accessInfoGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - description: The ID of the AccessInfo on which to perform the operation
          name: accessInfoId
          in: path
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired AccessInfo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessInfo'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Access Info
      summary: Delete a single AccessInfo
      operationId: accessInfoDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
      responses:
        '204':
          description: The AccessInfo has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accessinfos/_count':
    post:
      tags:
        - Access Info
      summary: Count the AccessInfos
      operationId: accessInfoCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accessinfos/_query':
    post:
      tags:
        - Access Info
      summary: Query the AccessInfos
      operationId: accessInfoQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessInfoListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accessinfos/{accessInfoId}/permissions':
    get:
      tags:
        - Access Permission
      summary: Get all the AccessPermissions
      operationId: accessPermissionList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the AccessPermission objects available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessPermissionListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Access Permission
      summary: Create an AccessPermission
      operationId: accessPermissionCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accessPermissionCreator'
      responses:
        '201':
          description: The AccessPermission that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessPermissionListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '409':
          $ref: '#/components/responses/entityUniqueness'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accessinfos/{accessInfoId}/permissions/{accessPermissionId}':
    get:
      tags:
        - Access Permission
      summary: Get a single AccessPermission
      operationId: accessPermissionGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
        - name: accessPermissionId
          in: path
          description: The ID of the AccessPermission on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired AccessPermission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessPermission'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Access Permission
      summary: Delete a single AccessPermission
      operationId: accessPermissionDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D~1permissions~1%7BaccessPermissionId%7D/get/parameters/2'
      responses:
        '204':
          description: The AccessPermission has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accessinfos/{accessInfoId}/permissions/_count':
    post:
      tags:
        - Access Permission
      summary: Count the AccessPermissions
      operationId: accessPermissionCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accessinfos/{accessInfoId}/permissions/_query':
    post:
      tags:
        - Access Permission
      summary: Query the AccessPermissions
      operationId: accessPermissionQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessPermissionListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accessinfos/{accessInfoId}/roles':
    get:
      tags:
        - Access Role
      summary: Get all the AccessRoles
      operationId: accessRolesList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the AccessRole objects available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessRoleListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Access Role
      summary: Create an AccessRole
      operationId: accessRoleCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accessRoleCreator'
      responses:
        '201':
          description: The AccessRole that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessRoleListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accessinfos/{accessInfoId}/roles/{accessRoleId}':
    get:
      tags:
        - Access Role
      summary: Get a single AccessRole
      operationId: accessRoleGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
        - name: accessRoleId
          in: path
          description: The ID of the AccessRole on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired AccessRole
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessRole'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Access Role
      summary: Delete a single AccessRole
      operationId: accessRoleDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D~1roles~1%7BaccessRoleId%7D/get/parameters/2'
      responses:
        '204':
          description: The AccessRole has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accessinfos/{accessInfoId}/roles/_count':
    post:
      tags:
        - Access Role
      summary: Count the AccessRoles
      operationId: accessRoleCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accessinfos/{accessInfoId}/roles/_query':
    post:
      tags:
        - Access Role
      summary: Query the AccessRoles
      operationId: accessRoleQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1accessinfos~1%7BaccessInfoId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessRoleListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  /account:
    get:
      tags:
        - Current Account
      summary: Fetch current account
      description: Get the details of a current Account.
      operationId: getCurrentAccount
      responses:
        '200':
          description: The details of the current Account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Current Account
      summary: Update the details for the current Account
      operationId: putCurrentAccount
      requestBody:
        description: An object containing the new properties for the current Account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/currentAccountUpdateRequest'
        required: true
      responses:
        '200':
          description: The details of the updated Account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: 'Update the details of a given Account, according to the `accountId` path parameter. Please note that some fields may be readonly for integrity purposes.'
  '/{scopeId}/accounts':
    get:
      tags:
        - Account
      summary: Get all the Accounts
      operationId: accountList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: name
          in: query
          description: An optional string to filter Accounts according to their name
          schema:
            type: string
        - name: recursive
          in: query
          description: |
            An optional flag to include all accounts that are directly or indirectly children of the current one.
            Setting this to `true` and also using the `name` parameter will result in this last one beign ignored.
          schema:
            type: boolean
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - name: matchTerm
          in: query
          description: |
            A term to match on different fields. Every entity whose at least one of the specified fields starts with this value will be matched.
            Matches on the following fields:

            - NAME
            - ORGANIZATION_NAME
            - CONTACT_NAME
            - ORGANIZATION_EMAIL
          schema:
            type: string
      responses:
        '200':
          description: The list of the Accounts available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Get all the Accounts in the given Scope
    post:
      tags:
        - Account
      summary: Create a new Account
      operationId: accountCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing the properties for the new Account to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accountCreator'
        required: true
      responses:
        '201':
          description: The Account that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/accounts/_count':
    post:
      tags:
        - Account
      summary: Count the Accounts
      operationId: accountCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Returns the count of how many Accounts are present in the given Scope
  '/{scopeId}/accounts/_query':
    post:
      tags:
        - Account
      summary: Query the Accounts
      operationId: accountQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Returns a list of the Accounts matching the given query in the Scope. Predicates are not currently supported.
  '/{scopeId}/accounts/{accountId}':
    get:
      deprecated: true
      description: 'Deprecated. User the version without the /{scopeId} prefix. Get the details of a given Account, according to the `accountId` path parameter.'
      tags:
        - Account
      summary: Get a single Account
      operationId: deprecatedAccountGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1accounts~1%7BaccountId%7D/get/parameters/0'
      responses:
        '200':
          description: The details of the desired Account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      deprecated: true
      description: 'Deprecated. User the version without the /{scopeId} prefix. Update the details of a given Account, according to the `accountId` path parameter. Please note that some fields may be readonly for integrity purposes.'
      tags:
        - Account
      summary: Update a single Account
      operationId: deprecatedAccountUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1accounts~1%7BaccountId%7D/get/parameters/0'
      requestBody:
        description: An object containing the new properties for the Account to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accountUpdateRequest'
      responses:
        '200':
          description: The details of the updated Account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      deprecated: true
      description: 'Deprecated. User the version without the /{scopeId} prefix. Delete the given account, according to the `accountId` path parameter.'
      tags:
        - Account
      summary: Delete a single Account
      operationId: deprecatedAccountDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1accounts~1%7BaccountId%7D/get/parameters/0'
      responses:
        '204':
          description: The Account has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/accounts/{accountId}':
    get:
      description: 'Get the details of a given Account, according to the `accountId` path parameter.'
      tags:
        - Account
      summary: Get a single Account
      operationId: accountGet
      parameters:
        - name: accountId
          in: path
          description: The ID of the Account on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Account
      summary: Update a single Account
      operationId: accountUpdate
      parameters:
        - $ref: '#/paths/~1accounts~1%7BaccountId%7D/get/parameters/0'
      requestBody:
        description: An object containing the new properties for the Account to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accountUpdateRequest'
      responses:
        '200':
          description: The details of the updated Account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '422':
          description: Cannot update the current account via this method. Use PUT /account to do so.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/exceptionInfo'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      description: 'Delete the given account, according to the `accountId` path parameter.'
      tags:
        - Account
      summary: Delete a single Account
      operationId: accountDelete
      parameters:
        - $ref: '#/paths/~1accounts~1%7BaccountId%7D/get/parameters/0'
      responses:
        '204':
          description: The Account has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/certificates':
    get:
      tags:
        - Certificate
      summary: Get all the Certificates
      operationId: certificateList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: name
          in: query
          description: An optional string to filter Certificates according to their name
          schema:
            type: string
        - name: signature
          in: query
          description: An optional string to filter Certificates according to their signature
          schema:
            type: string
        - name: usage
          in: query
          description: An optional string to filter Certificates according to their usage
          schema:
            type: string
        - $ref: '#/components/parameters/askTotalCount'
        - name: matchTerm
          in: query
          description: |
            A term to match on different fields. Every entity whose at least one of the specified fields starts with this value will be matched.
            Matches on the following fields:

              - NAME
              - SERIAL
              - ALGORITHM
              - SUBJECT
          schema:
            type: string
        - name: includeInherited
          in: query
          description: Include inherited certificate in the result.
          schema:
            type: boolean
            default: true
        - $ref: '#/components/parameters/sortParam'
        - name: sortDir
          in: query
          description: 'The sort direction. Can be ASCENDING (default), DESCENDING. Case-insensitive (except for "clientId" parameter).'
          schema:
            type: string
            enum:
              - ASCENDING
              - DESCENDING
            default: ASCENDING
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Certificates available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/certificateInfoListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Get all the Certificates in the given Scope
    post:
      tags:
        - Certificate
      summary: Create a new Certificate
      operationId: certificateCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing the properties for the new Certificate to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/certificateCreator'
        required: true
      responses:
        '200':
          description: The Certificate that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/certificate'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/certificates/{certificateId}':
    get:
      tags:
        - Certificate
      summary: Get a single Certificate
      operationId: certificateGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: certificateId
          in: path
          description: The ID of the Certificate on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Certificate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/certificateInfo'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: 'Get the details of a given Certificate, according to the `certificateId` path parameter.'
    put:
      tags:
        - Certificate
      summary: Update a single Certificate
      operationId: certificateUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1certificates~1%7BcertificateId%7D/get/parameters/1'
      requestBody:
        description: An object containing the new properties for the Certificate to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/certificateInfo'
            example:
              type: certificate
              optlock: 2
              name: New Certificate with new name
              algorithm: SHA1withRSA
              ca: false
              certificate: |
                -----BEGIN CERTIFICATE-----
                MIICpjCCAY6gAwIBAgIUUv9zdUpgelk+PfJ/aXtV5jNS7iYwDQYJKoZIhvcNAQEF
                BQAwDTELMAkGA1UEBhMCQkUwHhcNMTcxMjA3MTMwNjEzWhcNMjcxMjA1MTMwNjEz
                WjANMQswCQYDVQQGEwJCRTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
                AIuyNVhHJCgraFjanoA4ng/FbrBQmLTPqBjR6mfqt7yWFQN5W5aOaVFj/LPO0WsL
                mVstVjJoaZnBQCtCCJF5dvy6vUNQ3zNSA5TyY4LdNZYYie4q10HunQSx3bqEJupd
                r2Xllbtnm3k3rspnDCaqwA+hJ8EAPvuHokSRplxjyg8TIdJlIHkbQ1pf6BfOsDJ4
                bD4BtfFPUeuaAjLwh/O6t6Xam6SQQ4209lQ2AgFlHQ6VK0Sp6JJ+tleAcyav14yy
                aM6biQkQLSytSXAVz+dISp3e8pzWF90lIftt9VI79kK4xNuQtgld6+eHVXsggItV
                mOiYILs9duyRdDoCrAKTlxUCAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAWUBd4vgE
                FGhCN0WaeHdMm0rKWUL6b1TmDgAhe1k7CFrX6lzC/p7wWsNKqlr3mUoSLW19mQCr
                UT6HJcXKj8f9bChULT2VlieezDMwhMBF+3Zy0NbTwRSsW9km2r+YDlZQ3+Csiq69
                PRr5Sy2qBIv8q18bRJiPGTebfvBccdEZPDdv7QAuEgimljAT1eGBybHH4zS2D7ON
                bJakl9xOOYJqcu+z9aBSlq9Xu0G9gAtNVbIlJAS67V9Odr/KkdTHgr0jhIBjs08t
                rOdsPHBJ5Ddj/ak9KLAXlBNVThI+fxkxaS1V6yFcL7AneTZkwl4XvDAGEWP3hA8X
                PQzDWWvM5zM2ig==
                -----END CERTIFICATE-----
              certificateUsages:
                - name: JWT
              forwardable: false
              issuer: C=BE
              keyUsageSettings: []
              notAfter: '2027-12-05T13:06:13.000Z'
              notBefore: '2017-12-07T13:06:13.000Z'
              serial: '473833991057963045777418180669716016888169033254'
              signature: WUBd4vgEFGhCN0WaeHdMm0rKWUL6b1TmDgAhe1k7CFrX6lzC/p7wWsNKqlr3mUoSLW19mQCrUT6HJcXKj8f9bChULT2VlieezDMwhMBF+3Zy0NbTwRSsW9km2r+YDlZQ3+Csiq69PRr5Sy2qBIv8q18bRJiPGTebfvBccdEZPDdv7QAuEgimljAT1eGBybHH4zS2D7ONbJakl9xOOYJqcu+z9aBSlq9Xu0G9gAtNVbIlJAS67V9Odr/KkdTHgr0jhIBjs08trOdsPHBJ5Ddj/ak9KLAXlBNVThI+fxkxaS1V6yFcL7AneTZkwl4XvDAGEWP3hA8XPQzDWWvM5zM2ig==
              status: SUSPENDED
              subject: C=BE
              version: 3
        required: true
      responses:
        '200':
          description: The details of the updated Certificate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/certificate'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: 'Update the details of a given Certificate, according to the `certificateId` path parameter. Please note that some fields may be readonly for integrity purposes.'
    delete:
      tags:
        - Certificate
      summary: Delete a single Certificate
      operationId: certificateDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1certificates~1%7BcertificateId%7D/get/parameters/1'
      responses:
        '200':
          description: The Certificate has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: 'Delete the given certificate, according to the `certificateId` path parameter.'
  '/{scopeId}/certificates/_count':
    post:
      tags:
        - Certificate
      summary: Count the Certificates
      operationId: certificateCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Returns the count of how many Certificates are present in the given Scope
  '/{scopeId}/certificates/_query':
    post:
      tags:
        - Certificate
      summary: Query the Certificates
      operationId: certificateQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/certificateInfoListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Returns a list of the Certificates matching the given query in the Scope. Predicates are not currently supported.
  '/{scopeId}/certificates/_generate':
    post:
      tags:
        - Certificate
      summary: Generate a new Certificate
      operationId: certificateGenerate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        content:
          application/json:
            schema:
              description: An object with all the details needed to generate a new Certificate instead of importing an existing one
              type: object
              properties:
                name:
                  description: A name for the Certificate
                  type: string
                subject:
                  description: The X.500 Name for the Subject of the new Certificate
                  type: string
                  format: x500name
                  externalDocs:
                    description: X.500 Name (Wikipedia)
                    url: 'https://en.wikipedia.org/wiki/X.500'
                issuer:
                  description: The X.500 Name for the Issuer of the new Certificate
                  type: string
                  format: x500name
                  externalDocs:
                    description: X.500 Name (Wikipedia)
                    url: 'https://en.wikipedia.org/wiki/X.500'
                keyLength:
                  description: The size of the Private Key for the new Certificate
                  type: integer
                  minimum: 512
                notBefore:
                  description: A date before which the Certificate is no longer valid
                  type: string
                  format: date-time
                notAfter:
                  description: A date after which the Certificate is no longer valid
                  type: string
                  format: date-time
                status:
                  $ref: '#/components/schemas/certificateInfo/allOf/1/properties/status'
              example:
                type: certificateGenerator
                name: A new Certificate with another name
                keyLength: 2048
                issuer: 'C=IT, O=Eurotech, CN=Eurotech CA'
                subject: 'C=IT, O=Eurotech, CN=Eurotech CA'
                notBefore: '2018-01-01T00:00:00.000Z'
                notAfter: '2019-01-01T00:00:00.000Z'
                status: VALID
                forwardable: true
                certificateUsages:
                  - name: DEVICE_MANAGEMENT
              required:
                - name
                - keyLength
                - issuer
                - subject
                - notBefore
                - notAfter
                - status
                - forwardable
      responses:
        '200':
          description: A new Certificate generated according to the informations in the `CertificateGenerator` object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/certificate'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Returns a new Certificate generated according to the informations in the `CertificateGenerator` object
  '/{scopeId}/clusters':
    get:
      tags:
        - Cluster
      summary: Get all the Clusters
      operationId: clusterList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - name: matchTerm
          in: query
          description: |
            A term to match on different fields. Every entity whose at least one of the specified fields starts with this value will be matched.
            Matches on the following fields:

              - NAME
          schema:
            type: string
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Clusters available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/clusters/{clusterId}':
    get:
      tags:
        - Cluster
      summary: Get a single Cluster
      operationId: clusterGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: clusterId
          in: path
          description: The ID of the Cluster on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Cluster
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cluster'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/clusters/_count':
    post:
      tags:
        - Cluster
      summary: Count the Clusters
      operationId: clusteryCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/clusters/_query':
    post:
      tags:
        - Cluster
      summary: Query the Clusters
      operationId: clusterQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/deploymentRegistry':
    get:
      tags:
        - Cluster - Deployment Registry
      summary: Get all the DeploymentRegistry entries
      operationId: deploymentRegistryList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: accountId
          in: query
          description: An optional Account ID to filter results
          schema:
            $ref: '#/components/schemas/kapuaId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the DeploymentRegistry entries available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deploymentRegistryListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Cluster - Deployment Registry
      summary: Create a new Deployment Registry entry
      operationId: deploymentRegistryCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing the properties for the new Deployment Registry entry to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deploymentRegistryCreator'
        required: true
      responses:
        '200':
          description: The Deployment Registry entry that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deploymentRegistry'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/deploymentRegistry/{deploymentRegistryId}':
    get:
      tags:
        - Cluster - Deployment Registry
      summary: Get a single Deployment Registry
      operationId: deploymentRegistryGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: deploymentRegistryId
          in: path
          description: The ID of the Deploymeny Registry entry on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Deployment Registry entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deploymentRegistry'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Cluster - Deployment Registry
      summary: Delete a single Deployment Registry entry
      operationId: deploymentRegistryDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1deploymentRegistry~1%7BdeploymentRegistryId%7D/get/parameters/1'
      responses:
        '200':
          description: The Deployment Registry entry has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/deploymentRegistry/_count':
    post:
      tags:
        - Cluster - Deployment Registry
      summary: Count the Deployment Registry entries
      operationId: deploymentRegistryCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/deploymentRegistry/_query':
    post:
      tags:
        - Cluster - Deployment Registry
      summary: Query the Deployment Registry entries
      operationId: deploymentRegistryQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deploymentRegistryListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/credentials':
    get:
      tags:
        - Credential
      summary: Get all the Credentials
      operationId: credentialList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: userId
          in: query
          description: The optional id to filter results
          schema:
            $ref: '#/components/schemas/kapuaId'
        - $ref: '#/components/parameters/sortParam'
        - name: sortDir
          in: query
          description: 'The sort direction. Can be ASCENDING (default), DESCENDING. Case-insensitive (except for "clientId" parameter).'
          schema:
            type: string
            enum:
              - ASCENDING
              - DESCENDING
            default: ASCENDING
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Credentials available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credentialListResult'
              example:
                type: credentialListResult
                limitExceeded: false
                size: 2
                items:
                  - id: LgJHjS2jvdE
                    scopeId: AQ
                    createdOn: '2023-03-09T13:58:30.385Z'
                    createdBy: AQ
                    modifiedOn: '2023-03-09T13:58:30.385Z'
                    modifiedBy: AQ
                    optlock: 0
                    userId: AQ
                    credentialType: PASSWORD
                    status: ENABLED
                    expirationDate: '2023-04-09T13:58:30.385Z'
                    loginFailures: 0
                    firstLoginFailure: '2023-03-09T13:58:30.385Z'
                    loginFailuresReset: '2023-03-10T13:58:30.385Z'
                    lockoutReset: '2023-03-09T14:58:30.385Z'
                  - id: LgREjS2jadE
                    scopeId: AQ
                    createdOn: '2023-03-09T13:58:30.385Z'
                    createdBy: AQ
                    modifiedOn: '2023-03-09T13:58:30.385Z'
                    modifiedBy: AQ
                    optlock: 0
                    userId: AQ
                    credentialType: API_KEY
                    status: ENABLED
                    expirationDate: '2023-04-09T13:58:30.385Z'
                    loginFailures: 0
                    firstLoginFailure: '2023-03-09T13:58:30.385Z'
                    loginFailuresReset: '2023-03-10T13:58:30.385Z'
                    lockoutReset: '2023-03-09T14:58:30.385Z'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Credential
      summary: Create a new Credential
      operationId: credentialCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing the properties for the new Credential to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credentialCreator'
            examples:
              password:
                description: Password
                value:
                  userId: AQ
                  credentialType: PASSWORD
                  credentialKey: New-password-123!
                  credentialStatus: ENABLED
                  expirationDate: '2019-12-31T00:00:00.000Z'
              apikey:
                description: API Key
                value:
                  userId: AQ
                  credentialType: API_KEY
                  credentialStatus: ENABLED
                  expirationDate: '2019-12-31T00:00:00.000Z'
        required: true
      responses:
        '201':
          description: The Credential that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credential'
              examples:
                Password:
                  value:
                    id: LgJHjS2jvdE
                    scopeId: AQ
                    createdOn: '2023-03-09T13:58:30.385Z'
                    createdBy: AQ
                    modifiedOn: '2023-03-09T13:58:30.385Z'
                    modifiedBy: AQ
                    optlock: 0
                    userId: AQ
                    credentialType: PASSWORD
                    status: ENABLED
                    expirationDate: '2023-04-09T13:58:30.385Z'
                    loginFailures: 0
                    firstLoginFailure: '2023-03-09T13:58:30.385Z'
                    loginFailuresReset: '2023-03-10T13:58:30.385Z'
                    lockoutReset: '2023-03-09T14:58:30.385Z'
                API Key:
                  value:
                    id: LgJHjS2jvdE
                    scopeId: AQ
                    createdOn: '2023-03-09T13:58:30.385Z'
                    createdBy: AQ
                    modifiedOn: '2023-03-09T13:58:30.385Z'
                    modifiedBy: AQ
                    credentialKey: $2a$12$BjLeC/gqcnEyk.XNo2qorul.a/v4HDuOUlfmojdSZXRSFTjymPdVm
                    optlock: 0
                    userId: AQ
                    credentialType: PASSWORD
                    status: ENABLED
                    expirationDate: '2023-04-09T13:58:30.385Z'
                    loginFailures: 0
                    firstLoginFailure: '2023-03-09T13:58:30.385Z'
                    loginFailuresReset: '2023-03-10T13:58:30.385Z'
                    lockoutReset: '2023-03-09T14:58:30.385Z'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/credentials/{credentialId}':
    get:
      tags:
        - Credential
      summary: Get a single Credential
      operationId: credentialGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: credentialId
          in: path
          description: The ID of the Credential on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credential'
              examples:
                Password:
                  value:
                    id: LgJHjS2jvdE
                    scopeId: AQ
                    createdOn: '2023-03-09T13:58:30.385Z'
                    createdBy: AQ
                    modifiedOn: '2023-03-09T13:58:30.385Z'
                    modifiedBy: AQ
                    optlock: 0
                    userId: AQ
                    credentialType: PASSWORD
                    status: ENABLED
                    expirationDate: '2023-04-09T13:58:30.385Z'
                    loginFailures: 0
                    firstLoginFailure: '2023-03-09T13:58:30.385Z'
                    loginFailuresReset: '2023-03-10T13:58:30.385Z'
                    lockoutReset: '2023-03-09T14:58:30.385Z'
                API Key:
                  value:
                    id: LgJHjS2jvdE
                    scopeId: AQ
                    createdOn: '2023-03-09T13:58:30.385Z'
                    createdBy: AQ
                    modifiedOn: '2023-03-09T13:58:30.385Z'
                    modifiedBy: AQ
                    optlock: 0
                    userId: AQ
                    credentialType: PASSWORD
                    status: ENABLED
                    expirationDate: '2023-04-09T13:58:30.385Z'
                    loginFailures: 0
                    firstLoginFailure: '2023-03-09T13:58:30.385Z'
                    loginFailuresReset: '2023-03-10T13:58:30.385Z'
                    lockoutReset: '2023-03-09T14:58:30.385Z'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Credential
      summary: Update a single Credential
      operationId: credentialUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1credentials~1%7BcredentialId%7D/get/parameters/1'
      requestBody:
        description: An object containing the new properties for the Credential to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credential'
        required: true
      responses:
        '200':
          description: The details of the updated Credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credential'
              example:
                id: LgJHjS2jvdE
                scopeId: AQ
                createdOn: '2023-03-09T13:58:30.385Z'
                createdBy: AQ
                modifiedOn: '2023-03-09T13:58:30.385Z'
                modifiedBy: AQ
                optlock: 0
                userId: AQ
                credentialType: PASSWORD
                status: ENABLED
                expirationDate: '2023-04-09T13:58:30.385Z'
                loginFailures: 0
                firstLoginFailure: '2023-03-09T13:58:30.385Z'
                loginFailuresReset: '2023-03-10T13:58:30.385Z'
                lockoutReset: '2023-03-09T14:58:30.385Z'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Credential
      summary: Delete a single Credential
      operationId: credentialDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1credentials~1%7BcredentialId%7D/get/parameters/1'
      responses:
        '204':
          description: The Credential has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/credentials/_count':
    post:
      tags:
        - Credential
      summary: Count the Credentials
      operationId: credentialCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/credentials/_query':
    post:
      tags:
        - Credential
      summary: Query the Credentials
      operationId: credentialQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credentialListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/credentials/{credentialId}/unlock':
    post:
      tags:
        - Credential
      summary: Unlock a Credential
      deprecated: true
      operationId: credentialUnlockDeprecated
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1credentials~1%7BcredentialId%7D/get/parameters/1'
      responses:
        '204':
          description: The Credential has been unlocked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credential'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/credentials/{credentialId}/_unlock':
    post:
      tags:
        - Credential
      summary: Unlock a Credential
      operationId: credentialUnlock
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1credentials~1%7BcredentialId%7D/get/parameters/1'
      responses:
        '204':
          description: The Credential has been unlocked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credential'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/data/channels':
    get:
      tags:
        - Data Channel
      summary: Query the Data Channels
      operationId: dataChannelQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: clientId
          in: query
          required: false
          collectionFormat: multi
          schema:
            type: array
            items:
              type: string
          description: The ClientID to filter results
        - name: name
          in: query
          schema:
            type: string
          description: The channel name to filter results. It allows '#' wildcard in last channel level
        - description: The sort parameter
          name: sortParam
          in: query
          schema:
            type: string
        - description: The sort direction. Can be ascending (default) or descending.
          name: sortDir
          in: query
          schema:
            type: string
            enum:
              - ASCENDING
              - DESCENDING
            default: ASCENDING
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channelInfoListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/data/channels/_count':
    post:
      tags:
        - Data Channel
      summary: Count the ChannelInfos
      operationId: dataChannelCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/data/channels/{channelInfoId}':
    get:
      tags:
        - Data Channel
      summary: Get a single ChannelInfo
      operationId: channelInfoGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: channelInfoId
          in: path
          description: The ID of the ChannelInfo on which to perform the operation
          schema:
            type: string
          required: true
      responses:
        '200':
          description: The desired ChannelInfo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channelInfo'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/data/clients':
    get:
      tags:
        - Data Client
      summary: Query the Data Clients
      operationId: dataClientQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: clientId
          in: query
          required: false
          collectionFormat: multi
          schema:
            type: array
            items:
              type: string
          description: The ClientID to filter results
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientInfoListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/data/clients/_count':
    post:
      tags:
        - Data Client
      summary: Count the ClientInfos
      operationId: dataClientCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/data/clients/{clientInfoId}':
    get:
      tags:
        - Data Client
      summary: Get a single ClientInfo
      operationId: clientInfoGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: clientInfoId
          in: path
          description: The ID of the ClientInfo on which to perform the operation
          schema:
            type: string
          required: true
      responses:
        '200':
          description: The desired ClientInfo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientInfo'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/data/messages':
    get:
      tags:
        - Data Message
      summary: Query the Data Messages
      operationId: dataMessageQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: clientId
          in: query
          required: false
          collectionFormat: multi
          schema:
            type: array
            items:
              type: string
          description: The ClientID to use as a filter for messages
        - description: The Channel to use as a filter for messages
          name: channel
          in: query
          schema:
            type: string
        - description: Restrict the search only to this channel ignoring its children. Only meaningful if channel is set
          name: strictChannel
          in: query
          schema:
            type: boolean
        - description: The start date to filter the results. Must come before endDate parameter
          name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - description: The end date to filter the results. Must come after startDate parameter
          name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - description: 'The metric name to filter results. If filled, `metricType`, `metricMinValue` and `metricMaxValue` are also required'
          name: metricName
          in: query
          schema:
            type: string
        - description: The metric type to filter results
          name: metricType
          in: query
          schema:
            type: string
        - description: The minimum metric value to filter results
          name: metricMin
          in: query
          schema:
            type: string
        - description: The maximum metric value to filter results
          name: metricMax
          in: query
          schema:
            type: string
        - description: The sort direction. Can be ascending or descending (default).
          name: sortDir
          in: query
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: DESC
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataMessageListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Data Message
      summary: Store a new Message
      operationId: dataMessageStore
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataMessage'
            example:
              type: jsonDatastoreMessage
              capturedOn: '2019-09-12T09:25:05.096Z'
              channel:
                type: kapuaDataChannel
                semanticParts:
                  - heater
                  - data
              clientId: Client-Id-1
              deviceId: WyczTs_GuDM
              payload:
                metrics:
                  - valueType: string
                    value: 5
                    name: temperatureExternal
                  - valueType: string
                    value: 20
                    name: temperatureInternal
                  - valueType: string
                    value: 30
                    name: temperatureExhaust
                  - valueType: string
                    value: 0
                    name: errorCode
              receivedOn: '2019-09-12T09:25:05.102Z'
              sentOn: '2019-09-12T09:25:05.096Z'
              datastoreId: bb07d7fc-dc62-492f-b8da-7e28df69e112
              timestamp: '2019-09-12T09:25:05.096Z'
      responses:
        '200':
          description: The ID of the new DataMessage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataMessageInsertResponse'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/data/messages/_count':
    post:
      tags:
        - Data Message
      summary: Count the MessageInfos
      operationId: dataMessageCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/data/messages/{datastoreMessageId}':
    get:
      tags:
        - Data Message
      summary: Get a single DataMessage
      operationId: dataMessageGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: datastoreMessageId
          in: path
          description: The ID of the MetricInfo on which to perform the operation
          schema:
            type: string
          required: true
      responses:
        '200':
          description: The desired DataMessage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataMessage'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/data/metrics':
    get:
      tags:
        - Data Metric
      summary: Query the Data Metrics
      operationId: dataMetricQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: clientId
          in: query
          required: false
          collectionFormat: multi
          schema:
            type: array
            items:
              type: string
          description: The ClientID to filter results
        - name: channel
          in: query
          schema:
            type: string
          description: The channel to filter results. It allows '#' wildcard in last channel level
        - name: name
          in: query
          schema:
            type: string
          description: The metric name to filter results
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metricInfoListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/data/metrics/_count':
    post:
      tags:
        - Data Metric
      summary: Count the MetricInfos
      operationId: dataMetricCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/data/metrics/{metricInfoId}':
    get:
      tags:
        - Data Metric
      summary: Get a single MetricInfo
      operationId: metricInfoGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: metricInfoId
          in: path
          description: The ID of the MetricInfo on which to perform the operation
          schema:
            type: string
          required: true
      responses:
        '200':
          description: The desired MetricInfo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metricInfo'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices':
    get:
      tags:
        - Device
      summary: Get all the Devices
      operationId: deviceList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: tagId
          in: query
          description: The tag id to filter results
          schema:
            $ref: '#/components/schemas/kapuaId'
        - name: clientId
          in: query
          description: The client id to filter results
          schema:
            type: string
        - name: status
          in: query
          description: The connection status to filter results
          schema:
            $ref: '#/components/schemas/connection/allOf/1/properties/status'
        - name: fetchAttributes
          in: query
          schema:
            type: array
            items:
              $ref: '#/components/schemas/fetchAttribute'
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/sortParam'
        - name: sortDir
          in: query
          description: 'The sort direction. Can be ASCENDING (default), DESCENDING. Case-insensitive (except for "clientId" parameter).'
          schema:
            type: string
            enum:
              - ASCENDING
              - DESCENDING
            default: ASCENDING
        - name: matchTerm
          in: query
          description: |
            A term to match on different fields. Every entity whose at least one of the specified fields starts with this value will be matched.
            Matches on the following fields:

            - CLIENT_ID
            - DISPLAY_NAME
            - SERIAL_NUMBER
            - MODEL_ID
            - MODEL_NAME
            - BIOS_VERSION
            - FIRMWARE_VERSION
            - OS_VERSION
            - JVM_VERSION
            - OSGI_FRAMEWORK_VERSION
            - APPLICATION_FRAMEWORK_VERSION
            - CONNECTION_INTERFACE
            - CONNECTION_IP
          schema:
            type: string
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Devices available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceListResult'
              examples:
                standard:
                  value:
                    type: deviceListResult
                    limitExceeded: false
                    size: 1
                    items:
                      - type: device
                        id: WyczTs_GuDM
                        scopeId: AQ
                        createdOn: '2019-09-12T09:04:37.315Z'
                        createdBy: Ag
                        modifiedOn: '2019-09-12T09:04:37.603Z'
                        modifiedBy: Ag
                        optlock: 2
                        clientId: Client-Id-1
                        connectionId: Gd1BfeWwh3s
                        status: ENABLED
                        displayName: null
                        lastEventId: YYHQ2i1S-P0
                        serialNumber: ESF-Docker-RHEL
                        modelId: ESF-Docker-RHEL
                        modelName: ESF-Docker-RHEL
                        biosVersion: N/A
                        firmwareVersion: N/A
                        osVersion: 4.9.184-linuxkit
                        jvmVersion: 25.161-b12 mixed mode
                        osgiFrameworkVersion: 1.8.0
                        applicationFrameworkVersion: ESF_6.0.0
                        connectionInterface: 'lo (00:00:00:00:00:00)'
                        connectionIp: 127.0.0.1
                        applicationIdentifiers: heaterPROV-V2DEPLOY-V2VPNCLIENT-V2CONF-V1CERT-V1ASSET-V1CMD-V1
                        acceptEncoding: gzip
                        tamperStatus: NOT_TAMPERED
                        tagIds: []
                with-fetch-attributes:
                  value:
                    type: deviceListResult
                    limitExceeded: false
                    size: 1
                    items:
                      - type: device
                        id: WyczTs_GuDM
                        scopeId: AQ
                        createdOn: '2019-09-12T09:04:37.315Z'
                        createdBy: Ag
                        modifiedOn: '2019-09-12T09:04:37.603Z'
                        modifiedBy: Ag
                        optlock: 2
                        clientId: Client-Id-1
                        connectionId: Gd1BfeWwh3s
                        connection:
                          id: Gd1BfeWwh3s
                          scopeId: AQ
                          createdOn: '2019-09-12T09:04:32.101Z'
                          createdBy: Ag
                          modifiedOn: '2019-09-12T09:04:32.101Z'
                          modifiedBy: Ag
                          optlock: 1
                          status: CONNECTED
                          clientId: Client-Id-1
                          userId: Ag
                          allowUserChange: false
                          userCouplingMode: INHERITED
                          protocol: MQTT
                          clientIp: 'tcp://172.21.0.1:59596'
                          serverIp: broker
                        status: ENABLED
                        displayName: null
                        lastEventId: YYHQ2i1S-P0
                        lastEvent:
                          id: YYHQ2i1S-P0
                          scopeId: AQ
                          createdOn: '2019-09-12T09:04:37.392Z'
                          createdBy: Ag
                          deviceId: WyczTs_GuDM
                          receivedOn: '2019-09-12T09:04:32.646Z'
                          position:
                            altitude: 0
                            latitude: 0
                            longitude: 0
                          resource: BIRTH
                          action: CREATE
                          responseCode: ACCEPTED
                          eventMessage: 'acceptEncoding=gzip~~applicationFramework=Kura~~applicationFrameworkVersion=ESF_6.0.0~~applicationIdentifiers=heaterPROV-V2DEPLOY-V2VPNCLIENT-V2CONF-V1CERT-V1ASSET-V1CMD-V1~~availableProcessors=4~~bios=N/A~~biosVersion=N/A~~connectionInterface=lo (00:00:00:00:00:00)~~connectionIp=127.0.0.1~~containerFramework=Eclipse~~containerFrameworkVersion=1.8.0~~displayName=~~firmware=N/A~~firmwareVersion=N/A~~jvm=Java HotSpot(TM) 64-Bit Server VM~~jvmProfile=Java(TM) SE Runtime Environment 1.8.0_161-b12~~jvmVersion=25.161-b12 mixed mode~~modelId=ESF-Docker-RHEL~~modelName=ESF-Docker-RHEL~~os=Linux~~osArch=amd64~~osVersion=4.9.184-linuxkit'
                        serialNumber: ESF-Docker-RHEL
                        modelId: ESF-Docker-RHEL
                        modelName: ESF-Docker-RHEL
                        biosVersion: N/A
                        firmwareVersion: N/A
                        osVersion: 4.9.184-linuxkit
                        jvmVersion: 25.161-b12 mixed mode
                        osgiFrameworkVersion: 1.8.0
                        applicationFrameworkVersion: ESF_6.0.0
                        connectionInterface: 'lo (00:00:00:00:00:00)'
                        connectionIp: 127.0.0.1
                        applicationIdentifiers: heaterPROV-V2DEPLOY-V2VPNCLIENT-V2CONF-V1CERT-V1ASSET-V1CMD-V1
                        acceptEncoding: gzip
                        tamperStatus: NOT_TAMPERED
                        tagIds: []
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Device
      summary: Create a new Device
      operationId: deviceCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing the properties for the new Device to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceCreator'
        required: true
      responses:
        '201':
          description: The Device that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/device'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}':
    get:
      tags:
        - Device
      summary: Get a single Device
      operationId: deviceGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: deviceId
          in: path
          description: The ID of the Device on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/device'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Device
      summary: Update a single Device
      operationId: deviceUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
      requestBody:
        description: An object containing the new properties for the Device to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/device'
            example:
              type: device
              optlock: 1
              status: ENABLED
              clientId: Client-Id-1
              displayName: Test Device
              serialNumber: '1234567890'
              modelId: Test Model
              biosVersion: N/A
              firmwareVersion: N/A
              osVersion: 3.13.0-93-generic
              jvmVersion: 24.111-b01 mixed mode
              osgiFrameworkVersion: 1.7.0
              acceptEncoding: gzip
              extendedProperties:
                - type: deviceExtendedProperty
                  groupName: Hardware Info
                  name: CPU Family
                  value: ARM
                - type: deviceExtendedProperty
                  groupName: Hardware Info
                  name: CPU Cores
                  value: 4
              tamperStatus: NOT_TAMPERED
              tagIds: []
        required: true
      responses:
        '200':
          description: The details of the updated Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/device'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Device
      summary: Delete a single Device
      operationId: deviceDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
      responses:
        '204':
          description: The Device has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/_query':
    post:
      tags:
        - Device
      summary: Query the Devices
      operationId: deviceQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/_count':
    post:
      tags:
        - Device
      summary: Count the Devices
      operationId: deviceCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/activities':
    get:
      tags:
        - Device Management - Activity Registry
      summary: Get all the Device Activities
      operationId: deviceManagementActivitiesGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - name: status
          in: query
          description: The status of the DeviceManagementActivity in which to search results
          schema:
            $ref: '#/components/schemas/deviceManagementActivityStatus'
        - name: appName
          in: query
          description: The application name of the DeviceManagementActivity in which to search results
          schema:
            type: string
        - name: appVersion
          in: query
          description: The application version of the DeviceManagementActivity in which to search results
          schema:
            type: string
        - name: resource
          in: query
          description: The resource of the DeviceManagementActivity in which to search results
          schema:
            type: string
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/askTotalCount'
      responses:
        '200':
          description: The list of the Device Management Aci available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceManagementActivityListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/activities/{activityId}':
    get:
      tags:
        - Device Management - Activity Registry
      summary: Get a single Device Registry Activity
      operationId: deviceRegistryActivityGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - name: activityId
          in: path
          description: The ID of the Registry Activity on which to perform the activity
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Registry Activity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceManagementActivity'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Device Management - Activity Registry
      summary: Delete a single Registry Activity
      operationId: deviceRegistryActivityDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1activities~1%7BactivityId%7D/get/parameters/2'
      responses:
        '204':
          description: The Registry Activity has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/activities/_query':
    post:
      tags:
        - Device Management - Activity Registry
      summary: Query the Registry Operations
      operationId: deviceManagementActivitiesQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceManagementActivityListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/activities/_count':
    post:
      tags:
        - Device Management - Activity Registry
      summary: Count the Registry Operations
      operationId: deviceManagementActivitiesCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/deviceManagementActivityDefinitions':
    get:
      tags:
        - Device Management - Activity Definition
      summary: Get all the Device Activity Definitions
      operationId: deviceRegistryActivityDefinitionList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: name
          in: query
          description: The name of the DeviceManagementActivity
          schema:
            type: string
        - name: appName
          in: query
          description: The application name of the DeviceManagementActivity in which to search results
          schema:
            type: string
        - name: appVersion
          in: query
          description: The application version of the DeviceManagementActivity in which to search results
          schema:
            type: string
        - name: appResource
          in: query
          description: The resource of the DeviceManagementActivity in which to search results
          schema:
            type: string
        - name: description
          in: query
          description: The description of the DeviceManagementActivity in which to search results
          schema:
            type: string
        - name: labels
          in: query
          description: The labels of the DeviceManagementActivity in which to search results
          schema:
            type: string
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - name: matchTerm
          in: query
          description: |
            A term to match on different fields. Every entity whose at least one of the specified fields starts with this value will be matched.
            Matches on the following fields:

              - NAME
              - DESCRIPTION
              - APPNAME
              - APPVERSION
              - APPRESOURCE
          schema:
            type: string
        - $ref: '#/components/parameters/askTotalCount'
      responses:
        '200':
          description: The list of the Device Activity Definitions available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceManagementActivityDefinitionListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Device Management - Activity Definition
      summary: Create a new Device Management Activity Definition
      operationId: deviceManagementActivityDefinitionCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing the properties for the new Device Management Activity Definition to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceManagementActivityDefinitionCreator'
        required: true
      responses:
        '200':
          description: The Device Management Activity Definition created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceManagementActivityDefinition'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/deviceManagementActivityDefinitions/{activityDefinitionId}':
    get:
      tags:
        - Device Management - Activity Definition
      summary: Get a single Device Registry Activity Definition
      operationId: deviceRegistryActivityDefinitionGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: activityDefinitionId
          in: path
          description: The ID of the Registry Activity Definition
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Registry Activity Definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceManagementActivityDefinition'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Device Management - Activity Definition
      summary: Update a Device Management Activity Definition
      operationId: deviceManagementActivityDefinitionUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1deviceManagementActivityDefinitions~1%7BactivityDefinitionId%7D/get/parameters/1'
      requestBody:
        description: An object containing the properties for the new Device Management Activity Definition to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceManagementActivityDefinition'
        required: true
      responses:
        '200':
          description: The Device Management Activity Definition updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceManagementActivityDefinition'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Device Management - Activity Definition
      summary: Delete a Device Management Activity Definition
      operationId: deviceManagementActivityDefinitionDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1deviceManagementActivityDefinitions~1%7BactivityDefinitionId%7D/get/parameters/1'
      responses:
        '204':
          description: The Registry Activity has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/deviceManagementActivityDefinitions/_query':
    post:
      tags:
        - Device Management - Activity Definition
      summary: Query the Device Management Definitions
      operationId: deviceRegistryActivityDefinitionQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceManagementActivityDefinitionListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/deviceManagementActivityDefinitions/_count':
    post:
      tags:
        - Device Management - Activity Definition
      summary: Count the Device Management Definitions
      operationId: deviceRegistryActivityDefinitionCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/activities/{activityId}/updates':
    get:
      tags:
        - Device Management - Activity Updates
      summary: Get all the Device Registry Activity Updates
      operationId: deviceRegistryActivityUpdateList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1activities~1%7BactivityId%7D/get/parameters/2'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/askTotalCount'
      responses:
        '200':
          description: The list of the Device Management Registty Activity Updates available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/managementActivityUpdateListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/activities/{activityId}/updates/{updateId}':
    get:
      tags:
        - Device Management - Activity Updates
      summary: Get a single Device Registry Activity Updates
      operationId: deviceRegistryActivityUpdateGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1activities~1%7BactivityId%7D/get/parameters/2'
        - name: updateId
          in: path
          description: The ID of the Registry Activity Update on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Registry Activity Update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/managementActivityUpdate'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/activities/{activityId}/updates/_query':
    post:
      tags:
        - Device Management - Activity Updates
      summary: Query the Registry Activity Updates
      operationId: deviceRegistryActivityUpdateQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1activities~1%7BactivityId%7D/get/parameters/2'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/managementActivityUpdateListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/activities/{activityId}/updates/_count':
    post:
      tags:
        - Device Management - Activity Updates
      summary: Count the Registry Activity Updatess
      operationId: deviceRegistryActivityUpdatesCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1activities~1%7BactivityId%7D/get/parameters/2'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/activities/_sync':
    post:
      tags:
        - Device Management - Activities
      summary: Sync Device Management Activities from the device
      operationId: deviceManagementActivitySync
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/activityGetRequest'
      responses:
        '200':
          description: The list of Device Activities from the Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceActivities'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/activities/_submit':
    post:
      tags:
        - Device Management - Activities
      summary: Execute a Device Management Activity SUBMIT request.
      operationId: deviceManagementActivitySubmit
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
      requestBody:
        description: An object containing the properties for the Device Management Activity SUBMIT request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/activitySubmitRequest'
      responses:
        '200':
          description: The corresponding Device Management Activity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceManagementActivity'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/activities/{activityId}/_resubmit':
    post:
      tags:
        - Device Management - Activities
      summary: Resubmit a Device Management Activity SUBMIT request
      operationId: deviceManagementActivityResubmit
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1activities~1%7BactivityId%7D/get/parameters/2'
      responses:
        '204':
          description: The Device Management Activity SUBMIT request has been resubmitted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/activities/{activityId}/_cancel':
    post:
      tags:
        - Device Management - Activities
      summary: Cancels a WORKING Device Management Activity SUBMIT request
      operationId: deviceManagementActivityCancel
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1activities~1%7BactivityId%7D/get/parameters/2'
      responses:
        '204':
          description: The Device Management Activity SUBMIT request has been cancel
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/assets':
    get:
      tags:
        - Device Management - Asset
      summary: Get the Assets Definitions of a single Device
      operationId: deviceAssetList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The list of Assets definition of a single Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceAssetDefinitions'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Device Management - Asset
      summary: Get the Assets Definitions of a single Device filtered
      operationId: deviceAssetListFiltered
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        description: 'An object containing the list of Assets to use as a filter. If no DeviceAsset is specified, all DeviceAsset will be read.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceAssetDefinitionsFilter'
            examples:
              Select all:
                value:
                  deviceAsset:
                    - null
              Filtered:
                value:
                  deviceAsset:
                    - name: Asset-1
      responses:
        '200':
          description: The list of Assets definition of a single Device according to the filter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceAssetDefinitions'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/assets/_read':
    post:
      tags:
        - Device Management - Asset
      summary: Read the values for the DeviceAssets of a single Device
      operationId: deviceAssetRead
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        description: An object containing the list of Assets to use as a filter
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceAssetsFilter'
            examples:
              Read all:
                value:
                  deviceAsset:
                    - null
              Filter by DeviceAsset:
                value:
                  deviceAsset:
                    - name: Asset-1
              Filter by AssetChannel:
                value:
                  deviceAsset:
                    - name: Asset-1
                      channels:
                        - name: Channel-1
        required: true
      responses:
        '200':
          description: The Asset list for the desired Device complete with values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceAssetValues'
              examples:
                Successful read:
                  value:
                    deviceAsset:
                      - name: Asset-1
                        channels:
                          - name: Channel-1
                            valueType: boolean
                            value: true
                            timestamp: '2019-09-12T14:50:24.446Z'
                          - name: Channel-2
                            valueType: integer
                            value: 8
                            timestamp: '2019-09-12T14:50:24.446Z'
                Read with some errors:
                  value:
                    deviceAsset:
                      - name: Asset-1
                        channels:
                          - name: Channel-1
                            valueType: boolean
                            value: true
                            timestamp: '2019-09-12T14:50:24.446Z'
                          - name: Channel-2
                            valueType: integer
                            error: Connection failed. Unable to Connect...
                            timestamp: '2019-09-12T14:50:24.446Z'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/assets/_write':
    post:
      tags:
        - Device Management - Asset
      summary: Write the values for the DeviceAssets of a single Device
      operationId: deviceAssetWrite
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        description: A DeviceAsset list to be updated on the desired Device
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceAssetValues'
            example:
              deviceAsset:
                - name: Asset-1
                  channels:
                    - name: Channel-1
                      valueType: boolean
                      value: true
                    - name: Channel-2
                      valueType: integer
                      value: 10
        required: true
      responses:
        '200':
          description: The updated DeviceAssets list for the desired Device with updated values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceAssetValues'
              examples:
                Successful write:
                  value:
                    deviceAsset:
                      - name: Asset-1
                        channels:
                          - name: Channel-1
                            valueType: boolean
                            value: true
                            timestamp: '2019-09-12T14:50:24.446Z'
                          - name: Channel-2
                            valueType: integer
                            value: 8
                            timestamp: '2019-09-12T14:50:24.446Z'
                Write with failure:
                  value:
                    deviceAsset:
                      - name: Asset-1
                        channels:
                          - name: Channel-1
                            valueType: boolean
                            value: true
                            timestamp: '2019-09-12T14:50:24.446Z'
                          - name: Channel-2
                            error: Channel not available
                            timestamp: '2019-09-12T14:50:24.446Z'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/assets/_settings':
    get:
      tags:
        - Device Management - Asset
      summary: Gets the settings of the Device Asset Store settings of this Device
      operationId: getDeviceAssetStoreSettings
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
      responses:
        '200':
          description: The Device Management Settings retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceAssetStoreSettings'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Device Management - Asset
      summary: Applies the given settings to the Device Asset Store settings of this Device
      operationId: putDeviceAssetStoreSettings
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
      requestBody:
        description: The Device Asset Store Settings for this Device
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceAssetStoreSettings'
        required: true
      responses:
        '204':
          description: The Device Management Settings have been applied
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/bundles':
    get:
      tags:
        - Device Management - Bundle
      summary: Get the Bundles installed on a single Device
      operationId: deviceBundleList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The list of Bundles installed on a single Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceBundles'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/bundles/{bundleId}/_start':
    post:
      tags:
        - Device Management - Bundle
      summary: Start the desired Bundle on a single Device
      operationId: deviceBundleStart
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1bundles~1%7BbundleId%7D~1_stop/post/parameters/2'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '204':
          description: The Bundle has been successfully started
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/bundles/{bundleId}/_stop':
    post:
      tags:
        - Device Management - Bundle
      summary: Stop the desired Bundle on a single Device
      operationId: deviceBundleStop
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - name: bundleId
          in: path
          description: The ID of the Bundle on which to perform the operation
          schema:
            type: string
          required: true
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '204':
          description: The Bundle has been successfully stopped
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/certificate':
    get:
      deprecated: true
      tags:
        - Device Management - Certificate
      summary: Get the Device Management Certificate from a Device.
      operationId: deviceCertificateGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
      responses:
        '200':
          description: The Device Management Certificate from the Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/certificateInfo'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/certificate/_install':
    post:
      deprecated: true
      tags:
        - Device Management - Certificate
      summary: Install a Certificate on a Device
      operationId: deviceCertificateInstall
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1certificate~1_revoke/post/parameters/2'
        - $ref: '#/components/schemas/deviceCertificateTypePost'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The Certificate has been successfully installed
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/certificate/_revoke':
    post:
      deprecated: true
      tags:
        - Device Management - Certificate
      summary: Revoke a Certificate on a Device
      operationId: deviceCertificateRevoke
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - name: certificateId
          in: query
          description: The ID of the Certificate on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
        - $ref: '#/components/schemas/deviceCertificateTypePost'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The Certificate has been successfully revoked
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/certificates':
    get:
      tags:
        - Device Management - Certificates
      summary: Get the Device Management Certificates from a Device
      operationId: deviceCertificatesGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/components/schemas/deviceCertificateTypeGet'
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/sortParam'
        - name: sortDir
          in: query
          description: 'The sort direction. Can be ASCENDING (default), DESCENDING. Case-insensitive (except for "clientId" parameter).'
          schema:
            type: string
            enum:
              - ASCENDING
              - DESCENDING
            default: ASCENDING
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The Device Management Certificates from the Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceCertificateListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/certificates/_install':
    post:
      tags:
        - Device Management - Certificates
      summary: Install a Certificate on a Device
      operationId: deviceCertificateInstall
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1certificate~1_revoke/post/parameters/2'
        - $ref: '#/components/schemas/deviceCertificateTypePost'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The Certificate has been successfully installed
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/certificates/_revoke':
    post:
      tags:
        - Device Management - Certificates
      summary: Revoke a Certificate on a Device
      operationId: deviceCertificateRevoke
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1certificate~1_revoke/post/parameters/2'
        - $ref: '#/components/schemas/deviceCertificateTypePost'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The Certificate has been successfully revoked
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/commands/_execute':
    post:
      tags:
        - Device Management - Command
      summary: Execute a Command
      operationId: deviceCommandExecute
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/commandInput'
            examples:
              singleArgument:
                description: A command with a single argument
                value:
                  command: ls
                  arguments:
                    argument: '-lisa'
                  timeout: 60000
              multipleArguments:
                description: A command with multiple arguments
                value:
                  command: ls
                  arguments:
                    argument:
                      - '-l'
                      - '-i'
                      - '-s'
                      - '-a'
                  timeout: 60000
        required: true
      responses:
        '200':
          description: The output of the Command executed on a single Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commandOutput'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/configurations':
    get:
      tags:
        - Device Management - Configuration
      summary: Read multiple Configurations
      operationId: deviceConfigurationsRead
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The list of the Configurations on a single Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/componentConfigurations'
            application/xml:
              schema:
                $ref: '#/components/schemas/componentConfigurations'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Device Management - Configuration
      summary: Update multiple Configurations
      operationId: deviceConfigurationsWrite
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/componentConfigurationsInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/componentConfigurationsInput'
        required: true
      responses:
        '204':
          description: The updated list of Configurations on a single Device
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/configurations/{componentId}':
    get:
      tags:
        - Device Management - Configuration
      summary: Read a single Configuration
      operationId: deviceConfigurationRead
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - name: componentId
          in: path
          description: The ID of the Component on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The Configuration details of a single Service on a single Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/componentConfigurations'
            application/xml:
              schema:
                $ref: '#/components/schemas/componentConfigurations'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Device Management - Configuration
      summary: Update a single Configuration
      operationId: deviceConfigurationWrite
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1configurations~1%7BcomponentId%7D/get/parameters/2'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/componentConfigurationInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/componentConfigurationInput'
        required: true
      responses:
        '204':
          description: The updated Configuration details of a single Service on a single Device
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/configurations/_settings':
    get:
      tags:
        - Device Management - Configuration
      summary: Gets the settings of the Device Configurations Store settings of this Device
      operationId: getDeviceConfigurationsStoreSettings
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
      responses:
        '200':
          description: The Device Management Settings retrieved
          content:
            application/json:
              schema:
                $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1configurations~1_settings/put/requestBody/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Device Management - Configuration
      summary: Applies the given settings to the Device Configurations Store settings of this Device
      operationId: putDeviceConfigurationsStoreSettings
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
      requestBody:
        description: The Device Configurations Store Settings for this Device
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/byDeviceAppManagementSettings'
                - type: object
                  properties:
                    enablementPolicy:
                      description: The policy for which the Device Configuration Store Application is enabled or not for this device. 'INHERITED' means that it inherits the setting from the Account-wide Configuration Store Service Configuration
                      enum:
                        - ENABLED
                        - DISABLED
                        - INHERITED
                  example:
                    scopeId: AQ
                    deviceId: dIVxI5QpFUI
                    enablementPolicy: ENABLED
        required: true
      responses:
        '204':
          description: The Device Management Settings have been applied
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/inventory':
    get:
      tags:
        - Device Management - Inventory
      summary: Get the inventory from a single Device
      operationId: deviceInventoryGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The inventory from the Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceInventory'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/inventory/bundles':
    get:
      tags:
        - Device Management - Inventory
      summary: Get the bundle inventory from a single Device
      operationId: deviceInventoryBundleGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The bundle inventory from the Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceInventoryBundles'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/inventory/bundles/_start':
    post:
      tags:
        - Device Management - Inventory
      summary: Starts the bundle inventory in a Device
      operationId: deviceInventoryBundleStart
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceInventoryBundle'
      responses:
        '204':
          description: The inventory bundle has been started
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/inventory/bundles/_stop':
    post:
      tags:
        - Device Management - Inventory
      summary: Stops the bundle inventory in a Device
      operationId: deviceInventoryBundleStop
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceInventoryBundle'
      responses:
        '204':
          description: The inventory bundle has been stopped
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/inventory/containers':
    get:
      tags:
        - Device Management - Inventory
      summary: Get the container inventory from a single Device
      operationId: deviceInventoryContainerGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The container inventory from the Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceInventoryContainers'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/inventory/containers/_start':
    post:
      tags:
        - Device Management - Inventory
      summary: Starts the container inventory in a Device
      operationId: deviceInventoryContainerStart
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceInventoryContainer'
      responses:
        '204':
          description: The inventory container has been started
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/inventory/containers/_stop':
    post:
      tags:
        - Device Management - Inventory
      summary: Stops the container inventory in a Device
      operationId: deviceInventoryContainerStop
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceInventoryContainer'
      responses:
        '204':
          description: The inventory container has been stopped
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/inventory/system':
    get:
      tags:
        - Device Management - Inventory
      summary: Get the system packages inventory from a single Device
      operationId: deviceInventorySystemGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The system packages inventory from the Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceInventoryPackages'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/inventory/packages':
    get:
      tags:
        - Device Management - Inventory
      summary: Get the deployment packages inventory from a single Device
      operationId: deviceInventoryPackagesGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The deployment packages inventory from the Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceInventoryDeploymentPackages'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/keystore':
    get:
      tags:
        - Device Management - Keystore
      summary: Get the keystores list from a single Device
      operationId: deviceKeystoresGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The keystores list from the Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceKeystores'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/keystore/items':
    get:
      tags:
        - Device Management - Keystore
      summary: Get the keystore items from a single Device
      operationId: deviceKeystoreItemsGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - name: keystoreId
          in: query
          description: The keystore id to filter the results.
          schema:
            type: string
        - name: alias
          in: query
          description: The alias to filter the results.
          schema:
            type: string
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The keystore items from the Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceKeystoreItems'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/keystore/item':
    get:
      tags:
        - Device Management - Keystore
      summary: Get a keystore item from a single Device
      operationId: deviceKeystoreItemGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - name: keystoreId
          in: query
          description: The keystore id to filter the results.
          required: true
          schema:
            type: string
        - name: alias
          in: query
          description: The alias to filter the results.
          required: true
          schema:
            type: string
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The keystore item from the Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceKeystoreItem'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Device Management - Keystore
      summary: Delete a keystore item from a single Device
      operationId: deviceKeystoreItemDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - name: keystoreId
          in: query
          description: The keystore id of the item to delete.
          required: true
          schema:
            type: string
        - name: alias
          in: query
          description: The alias of the item to delete.
          required: true
          schema:
            type: string
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '204':
          description: The keystore item has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/keystore/items/certificateInfo':
    post:
      tags:
        - Device Management - Keystore
      summary: Creates a certificate from the Certificate Info Servuce in a Device
      operationId: deviceKeystoreCertificateInfoCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                keystoreId:
                  type: string
                alias:
                  type: string
                certificateInfoId:
                  $ref: '#/components/schemas/kapuaId'
              example:
                keystoreId: SSLKeystore
                alias: ssl-eclipse
                certificateInfoId: IaIA6xbNR7C
      responses:
        '204':
          description: The certificate has been created into the device keystore
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/keystore/items/certificateRaw':
    post:
      tags:
        - Device Management - Keystore
      summary: Creates a certificate in a Device
      operationId: deviceKeystoreCertificateRawCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceKeystoreCertificate'
      responses:
        '204':
          description: The certificate has been created into the device keystore
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/keystore/items/keypair':
    post:
      tags:
        - Device Management - Keystore
      summary: Creates a key pair in a Device
      operationId: deviceKeystoreKeypairCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceKeystoreKeypair'
      responses:
        '204':
          description: The keypair has been created into the device keystore
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/keystore/items/csr':
    post:
      tags:
        - Device Management - Keystore
      summary: Request a certificate signing request from a Device
      operationId: deviceKeystoreCSR
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceKeystoreCSRInfo'
      responses:
        '204':
          description: The certificate signing request has been returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceKeystoreCSR'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/deviceLogs':
    get:
      tags:
        - Device Management - Log
      summary: Query the Device Logs
      operationId: deviceLogAllList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - description: The ClientID to use as a filter for messages
          name: clientId
          in: query
          schema:
            type: string
        - description: The Channel to use as a filter for messages
          name: channel
          in: query
          schema:
            type: string
        - description: Restrict the search only to this channel ignoring its children. Only meaningful if channel is set
          name: strictChannel
          in: query
          schema:
            type: boolean
        - description: The start date to filter the results. Must come before endDate parameter
          name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - description: The end date to filter the results. Must come after startDate parameter
          name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - description: 'The log property name name to filter results. If filled, `logPropertyType`, `logPropertyMin` and `logPropertyMax` are also required'
          name: logPropertyName
          in: query
          schema:
            type: string
        - description: The metric type to filter results
          name: logPropertyType
          in: query
          schema:
            type: string
        - description: The minimum metric value to filter results
          name: logPropertyMin
          in: query
          schema:
            type: string
        - description: The maximum metric value to filter results
          name: logPropertyMax
          in: query
          schema:
            type: string
        - description: The sort direction. Can be ascending or descending (default).
          name: sortDir
          in: query
          schema:
            type: string
            enum:
              - ASCENDING
              - DESCENDING
            default: DESCENDING
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logMessageListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/deviceLogs/_count':
    post:
      tags:
        - Device Management - Log
      summary: Count all the Device Logs
      operationId: deviceLogAllCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/deviceLogs/_query':
    post:
      tags:
        - Device Management - Log
      summary: Query all the Device Logs
      operationId: deviceLogAllQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logMessageListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/logs':
    get:
      tags:
        - Device Management - Log
      summary: Query the Device Logs
      operationId: deviceLogList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - description: The Channel to use as a filter for messages
          name: channel
          in: query
          schema:
            type: string
        - description: Restrict the search only to this channel ignoring its children. Only meaningful if channel is set
          name: strictChannel
          in: query
          schema:
            type: boolean
        - description: The start date to filter the results. Must come before endDate parameter
          name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - description: The end date to filter the results. Must come after startDate parameter
          name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - description: 'The log property name name to filter results. If filled, `logPropertyType`, `logPropertyMin` and `logPropertyMax` are also required'
          name: logPropertyName
          in: query
          schema:
            type: string
        - description: The metric type to filter results
          name: logPropertyType
          in: query
          schema:
            type: string
        - description: The minimum metric value to filter results
          name: logPropertyMin
          in: query
          schema:
            type: string
        - description: The maximum metric value to filter results
          name: logPropertyMax
          in: query
          schema:
            type: string
        - description: The sort direction. Can be ascending or descending (default).
          name: sortDir
          in: query
          schema:
            type: string
            enum:
              - ASCENDING
              - DESCENDING
            default: DESCENDING
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logMessageListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/logs/_count':
    post:
      tags:
        - Device Management - Log
      summary: Count the Device Logs
      operationId: deviceLogCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/logs/_query':
    post:
      tags:
        - Device Management - Log
      summary: Query the Device Logs
      operationId: deviceLogQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logMessageListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/operations':
    get:
      tags:
        - Device Management - Operation
      summary: Get all the Device Registry Operations
      operationId: deviceRegistryOperationList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - name: resource
          in: query
          description: The resource of the DeviceManagementOperation in which to search results
          schema:
            type: string
        - name: appId
          in: query
          description: The appId of the DeviceManagementOperation in which to search results
          schema:
            type: string
        - name: status
          in: query
          description: The status of the Registry Operation on which to perform the operation
          schema:
            $ref: '#/components/schemas/deviceOperation/allOf/1/properties/status'
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/sortParam'
        - name: sortDir
          in: query
          description: 'The sort direction. Can be ASCENDING (default), DESCENDING. Case-insensitive (except for "clientId" parameter).'
          schema:
            type: string
            enum:
              - ASCENDING
              - DESCENDING
            default: ASCENDING
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Device Management Registty Operations available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceOperationListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/operations/{operationId}':
    get:
      tags:
        - Device Management - Operation
      summary: Get a single Device Registry Operation
      operationId: deviceRegistryOperationGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - name: operationId
          in: path
          description: The ID of the Registry Operation on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Registry Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceOperation'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Device Management - Operation
      summary: Delete a single Registry Operation
      operationId: deviceRegistryOperationDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1operations~1%7BoperationId%7D/get/parameters/2'
      responses:
        '204':
          description: The Registry Operation has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/operations/_query':
    post:
      tags:
        - Device Management - Operation
      summary: Query the Registry Operations
      operationId: deviceRegistryOperationQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceOperationListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/operations/_count':
    post:
      tags:
        - Device Management - Operation
      summary: Count the Registry Operations
      operationId: deviceRegistryOperationCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/operations/{operationId}/notifications':
    get:
      tags:
        - Device Management - Notification
      summary: Get all the Device Registry Notifications
      operationId: deviceRegistryNotificationList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1operations~1%7BoperationId%7D/get/parameters/2'
        - name: resource
          in: query
          description: The resource of the DeviceEvent in which to search results
          schema:
            type: string
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/sortParam'
        - name: sortDir
          in: query
          description: 'The sort direction. Can be ASCENDING (default), DESCENDING. Case-insensitive (except for "clientId" parameter).'
          schema:
            type: string
            enum:
              - ASCENDING
              - DESCENDING
            default: ASCENDING
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Device Management Registty Notifications available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceNotificationListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/operations/{operationId}/notifications/{notificationId}':
    get:
      tags:
        - Device Management - Notification
      summary: Get a single Device Registry Notification
      operationId: deviceRegistryNotificationGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1operations~1%7BoperationId%7D/get/parameters/2'
        - name: notificationId
          in: path
          description: The ID of the Registry Notification on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Registry Notification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceNotification'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Device Management - Notification
      summary: Delete a single Registry Notification
      operationId: deviceRegistryNotificationDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1operations~1%7BoperationId%7D/get/parameters/2'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1operations~1%7BoperationId%7D~1notifications~1%7BnotificationId%7D/get/parameters/3'
      responses:
        '204':
          description: The Registry Notification has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/operations/{operationId}/notifications/_query':
    post:
      tags:
        - Device Management - Notification
      summary: Query the Registry Notifications
      operationId: deviceRegistryNotificationQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1operations~1%7BoperationId%7D/get/parameters/2'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceNotificationListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/operations/{operationId}/notifications/_count':
    post:
      tags:
        - Device Management - Notification
      summary: Count the Registry Notifications
      operationId: deviceRegistryNotificationCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1operations~1%7BoperationId%7D/get/parameters/2'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/packages':
    get:
      tags:
        - Device Management - Package
      summary: Get the Packages installed on a single Device
      operationId: devicePackageList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The list of Packages installed on a single Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/devicePackages'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/packages/_download':
    post:
      tags:
        - Device Management - Package
      summary: Download and install a Package
      operationId: devicePackageDownload
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/devicePackageDownloadRequest'
            examples:
              basic:
                summary: Basic
                description: A request with basic options
                value:
                  uri: 'https://download.eclipse.org/kura/releases/4.1.0/org.eclipse.kura.demo.heater_1.0.500.dp'
                  name: heater
                  version: 1.0.500
              complete:
                summary: Complete
                description: A request with all available options used
                value:
                  uri: 'https://download.eclipse.org/kura/releases/4.1.0/org.eclipse.kura.demo.heater_1.0.500.dp'
                  name: heater
                  version: 1.0.500
                  username: username
                  password: password
                  fileHash: 'MD5:0d04154164145cd6b2167fdd457ed28f'
                  fileType: DEPLOYMENT_PACKAGE
                  install: true
                  reboot: false
                  rebootDelay: 0
                  advancedOptions:
                    restart: false
                    blockSize: 128
                    blockDelay: 0
                    blockTimeout: 5000
                    notifyBlockSize: 256
                    installVerifyURI: 'https://download.eclipse.org/kura/releases/4.1.0/org.eclipse.kura.demo.heater_1.0.500.verifier.sh'
        required: true
      responses:
        '200':
          description: The corresponding Device Management Operation to track the progress of the Device Package Download Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceOperation'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/packages/_uninstall':
    post:
      tags:
        - Device Management - Package
      summary: Uninstall a Package
      operationId: devicePackageUninstall
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/devicePackageUninstallRequest'
            examples:
              basic:
                summary: Basic
                description: A request with only required properties
                value:
                  name: org.eclipse.kura.demo.heater
                  version: 1.0.500
              complete:
                summary: Complete
                description: A request with all properties
                value:
                  name: org.eclipse.kura.demo.heater
                  version: 1.0.500
                  reboot: false
                  rebootDelay: 0
      responses:
        '200':
          description: The corresponding Device Management Operation to track the progress of the Device Package Uninstall Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceOperation'
              example:
                type: deviceManagementOperation
                id: daGd5aiInCU
                scopeId: AQ
                createdOn: '2019-11-15T11:27:24.857Z'
                createdBy: AQ
                modifiedOn: '2019-11-15T11:30:01.975Z'
                modifiedBy: Ag
                optlock: 1
                action: EXECUTE
                appId: DEPLOY
                deviceId: UVjeGkGVT3A
                operationId: I-1DnL467js
                startedOn: '2019-11-15T11:27:24.842Z'
                resource: UNINSTALL
                status: RUNNING
                operationProperties:
                  - name: kapua.package.operation.id
                    propertyType: org.eclipse.kapua.commons.model.id.KapuaEid
                    propertyValue: '2588799701293395515'
                  - name: kapua.package.download.name
                    propertyType: string
                    propertyValue: heater
                  - name: kapua.package.download.version
                    propertyType: string
                    propertyValue: 1.0.500
                log: ''
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/requests':
    post:
      tags:
        - Device Management - Request
      summary: Perform a Request
      operationId: deviceRequestExec
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestInput'
        required: true
      responses:
        '200':
          description: The list of Requests installed on a single Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/requestOutput'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/snapshots':
    get:
      tags:
        - Device Management - Snapshot
      summary: Get all Snapshots
      operationId: deviceSnapshotList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The list of Snapshots available on a single Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snapshots'
            application/xml:
              schema:
                $ref: '#/components/schemas/snapshots'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/snapshots/{snapshotId}':
    get:
      tags:
        - Device Management - Snapshot
      summary: Get a single Snapshot
      operationId: deviceSnapshotGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - name: snapshotId
          description: The ID of the Snapshot on which to perform the operation
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The list of the Configurations related to the given Snapshot on a single Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/componentConfigurations'
            application/xml:
              schema:
                $ref: '#/components/schemas/componentConfigurations'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/snapshots/{snapshotId}/_rollback':
    post:
      tags:
        - Device Management - Snapshot
      summary: Rollback to Snapshot
      operationId: deviceSnapshotRollback
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1snapshots~1%7BsnapshotId%7D/get/parameters/2'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '204':
          description: The Snapshot has been applied
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/vpn':
    get:
      tags:
        - Device Management - VPN Connection
      summary: Get the VPN Client Status
      operationId: deviceVpnClientStatus
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
      responses:
        '200':
          description: The Device Vpn Client Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vpnClientStatus'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/vpn/_connect':
    post:
      tags:
        - Device Management - VPN Connection
      summary: Connect the VPN Client
      operationId: deviceVpnClientConnect
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
      responses:
        '200':
          description: The Device Vpn Client successfully connected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vpnClientStatus'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/vpn/_disconnect':
    post:
      tags:
        - Device Management - VPN Connection
      summary: Disconnect the VPN Client
      operationId: deviceVpnClientDisconnect
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
      responses:
        '200':
          description: The Device Vpn Client successfully disconnected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vpnClientStatus'
              example:
                value:
                  connected: false
                  ipAddress: 0.0.0.0
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/tamper':
    get:
      tags:
        - Device Management - Tamper
      summary: Gets the list of available Tamper Services
      operationId: deviceTamperServiceList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The list of available Tamper Services
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceTamperServices'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/tamper/{tamperServiceId}':
    get:
      tags:
        - Device Management - Tamper
      summary: Gets the status of available Tamper Service
      operationId: deviceTamperServiceStatus
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - name: tamperServiceId
          in: path
          schema:
            type: string
          required: true
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The status of available Tamper Service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceTamperServiceStatus'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/tamper/{tamperServiceId}/_reset':
    post:
      tags:
        - Device Management - Tamper
      summary: Resets the tampered status of available Tamper Service
      operationId: deviceTamperServiceReset
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1tamper~1%7BtamperServiceId%7D/get/parameters/2'
        - $ref: '#/paths/~1%7BscopeId%7D~1streams~1messages/post/parameters/1'
      responses:
        '200':
          description: The request has been processed
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/deviceconnections':
    get:
      tags:
        - Device Connection
      summary: Get all the Connections
      operationId: connectionList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices/get/parameters/2'
        - name: clientIp
          in: query
          description: The client ip to filter results
          schema:
            type: string
        - name: protocol
          in: query
          description: The connection protocol to filter results
          schema:
            type: string
        - $ref: '#/paths/~1%7BscopeId%7D~1devices/get/parameters/3'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Connections available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connectionListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/deviceconnections/{connectionId}':
    get:
      tags:
        - Device Connection
      summary: Get a single Connection
      operationId: connectionGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: connectionId
          in: path
          description: The ID of the Connection on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Connection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connection'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/deviceconnections/{connectionId}/_disconnect':
    post:
      tags:
        - Device Connection
      summary: Request that the specified Connection is disconnected from the broker
      operationId: connectionDisconnect
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1deviceconnections~1%7BconnectionId%7D/get/parameters/1'
      responses:
        '204':
          description: The disconnection request was sent to the broker
          content:
            application/json:
              schema:
                $ref: '#/paths/~1%7BscopeId%7D~1deviceconnections~1%7BconnectionId%7D~1options/put/requestBody/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/deviceconnections/{connectionId}/options':
    get:
      tags:
        - Device Connection
      summary: Get the option for a Connection
      operationId: connectionOptionGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1deviceconnections~1%7BconnectionId%7D/get/parameters/1'
      responses:
        '200':
          description: The Options of the desired Connection
          content:
            application/json:
              schema:
                $ref: '#/paths/~1%7BscopeId%7D~1deviceconnections~1%7BconnectionId%7D~1options/put/requestBody/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Device Connection
      summary: Update the option for a Connection
      operationId: connectionOptionUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1deviceconnections~1%7BconnectionId%7D/get/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/kapuaUpdatableEntity'
                - type: object
                  properties:
                    allowUserChange:
                      type: boolean
                    userCouplingMode:
                      $ref: '#/components/schemas/provisionRequestConnectionOptions/properties/userCouplingMode'
                    reservedUserId:
                      allOf:
                        - $ref: '#/components/schemas/kapuaId'
                    authenticationType:
                      type: string
                      description: The authentication type that must be used when connection
                  example:
                    type: deviceConnectionOption
                    id: Gd1BfeWwh3s
                    scopeId: AQ
                    createdOn: '2019-09-12T09:04:32.101Z'
                    createdBy: Ag
                    modifiedOn: '2019-09-13T08:04:49.927Z'
                    modifiedBy: Ag
                    optlock: 17
                    allowUserChange: false
                    userCouplingMode: INHERITED
                    authenticationType: USER_PASS
      responses:
        '200':
          description: The updated Options of the desired Connection
          content:
            application/json:
              schema:
                $ref: '#/paths/~1%7BscopeId%7D~1deviceconnections~1%7BconnectionId%7D~1options/put/requestBody/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/deviceconnections/_count':
    post:
      tags:
        - Device Connection
      summary: Count the Connections
      operationId: connectionCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/deviceconnections/_query':
    post:
      tags:
        - Device Connection
      summary: Query the Connections
      operationId: connectionQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connectionListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/deviceconnections/_availableAuth':
    get:
      tags:
        - Device Connection
      summary: Get all available Device Connection authentication adapters
      operationId: connectionAvailableAuth
      parameters:
        - $ref: '#/components/parameters/scopeId'
      responses:
        '200':
          description: The list of available Device Connection authentication adapters
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/setResult'
                example:
                  items:
                    - USER_PASS
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/events':
    get:
      tags:
        - Device Event
      summary: Get all the DeviceEvents
      operationId: deviceEventList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - name: resource
          in: query
          description: The resource of the DeviceEvent in which to search results
          schema:
            type: string
        - description: The start date to filter the results.
          name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - description: The end date to filter the results.
          name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Device Events available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceEventListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/events/{deviceEventId}':
    get:
      tags:
        - Device Event
      summary: Get a single DeviceEvent
      operationId: deviceEventGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - name: deviceEventId
          in: path
          description: The ID of the Device Event on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Device Event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceEvent'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Device Event
      summary: Delete a single DeviceEvent
      operationId: deviceEventDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D~1events~1%7BdeviceEventId%7D/get/parameters/2'
      responses:
        '204':
          description: The Device Event has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/events/_count':
    post:
      tags:
        - Device Event
      summary: Count the Device Events
      operationId: deviceEventCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/devices/{deviceId}/events/_query':
    post:
      tags:
        - Device Event
      summary: Query the Device Event
      operationId: deviceEventQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices~1%7BdeviceId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceEventListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/domains':
    get:
      tags:
        - Domain
      summary: Get all the Domains
      operationId: domainList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: name
          in: query
          description: The domain name to filter results
          schema:
            type: string
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Domains available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domainListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/domains/{domainId}':
    get:
      tags:
        - Domain
      summary: Get a single Domain
      operationId: domainGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: domainId
          in: path
          description: The ID of the Domain on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Domain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/domains/_count':
    post:
      tags:
        - Domain
      summary: Count the Domains
      operationId: domainCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/domains/_query':
    post:
      tags:
        - Domain
      summary: Query the Domains
      operationId: domainQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domainListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/endpointInfos':
    get:
      tags:
        - Endpoint Info
      summary: Get all the EndpointInfos
      operationId: endpointInfoList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: usage
          in: query
          description: The endpointInfo usage to filter results
          schema:
            type: string
        - name: endpointType
          in: query
          description: The type of the Endpoints to query for
          schema:
            allOf:
              - $ref: '#/components/schemas/endpointInfoCreator/allOf/1/properties/endpointType'
              - default: resource
          required: false
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/sortParam'
        - name: sortDir
          in: query
          description: 'The sort direction. Can be ASCENDING (default), DESCENDING. Case-insensitive (except for "clientId" parameter).'
          schema:
            type: string
            enum:
              - ASCENDING
              - DESCENDING
            default: ASCENDING
        - name: matchTerm
          in: query
          description: |
            A term to match on different fields. Every entity whose at least one of the specified fields starts with this value will be matched.
            Matches on the following fields:

              - SCHEMA
              - DNS
          schema:
            type: string
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the EndpointInfos available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpointInfoListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Endpoint Info
      summary: Create a new EndpointInfo
      operationId: endpointInfoCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing the properties for the new EndpointInfo to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/endpointInfoCreator'
        required: true
      responses:
        '201':
          description: The EndpointInfo that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpointInfo'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/entityUniqueness'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/endpointInfos/{endpointInfoId}':
    get:
      tags:
        - Endpoint Info
      summary: Get a single EndpointInfo
      operationId: endpointInfoGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: endpointInfoId
          in: path
          description: The ID of the EndpointInfo on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired EndpointInfo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpointInfo'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Endpoint Info
      summary: Update a single EndpointInfo
      operationId: endpointInfoUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1endpointInfos~1%7BendpointInfoId%7D/get/parameters/1'
      requestBody:
        description: An object containing the new properties for the EndpointInfo to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/endpointInfo'
            example:
              type: endpointInfo
              optlock: 1
              dns: 10.200.12.144
              port: 1883
              schema: mqtt
              secure: false
              usages:
                - name: MESSAGE_BROKER
                - name: PROVISION
              endpointType: resource
        required: true
      responses:
        '200':
          description: The details of the updated EndpointInfo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpointInfo'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/entityUniqueness'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Endpoint Info
      summary: Delete a single EndpointInfo
      operationId: endpointInfoDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1endpointInfos~1%7BendpointInfoId%7D/get/parameters/1'
      responses:
        '204':
          description: The EndpointInfo has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/endpointInfos/_count':
    post:
      tags:
        - Endpoint Info
      summary: Count the EndpointInfos
      operationId: endpointInfoCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1endpointInfos/get/parameters/2'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/endpointInfos/_query':
    post:
      tags:
        - Endpoint Info
      summary: Query the EndpointInfos
      operationId: endpointInfoQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1endpointInfos/get/parameters/2'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpointInfoListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/groups':
    get:
      tags:
        - Group
      summary: Get all the Groups
      operationId: groupList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: name
          in: query
          description: The group name to filter results
          schema:
            type: string
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/sortParam'
        - name: sortDir
          in: query
          description: 'The sort direction. Can be ASCENDING (default), DESCENDING. Case-insensitive (except for "clientId" parameter).'
          schema:
            type: string
            enum:
              - ASCENDING
              - DESCENDING
            default: ASCENDING
        - name: matchTerm
          in: query
          description: |
            A term to match on different fields. Every entity whose at least one of the specified fields starts with this value will be matched.
            Matches on the following fields:

              - DESCRIPTION
              - NAME
          schema:
            type: string
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Groups available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Group
      summary: Create a new Group
      operationId: groupCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing the properties for the new Group to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groupCreator'
        required: true
      responses:
        '201':
          description: The Group that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/groups/{groupId}':
    get:
      tags:
        - Group
      summary: Get a single Group
      operationId: groupGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: groupId
          in: path
          description: The ID of the Group on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Group
      summary: Update a single Group
      operationId: groupUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1groups~1%7BgroupId%7D/get/parameters/1'
      requestBody:
        description: An object containing the new properties for the Group to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group'
            example:
              type: group
              optlock: 1
              name: group-1
              description: An Access Group
        required: true
      responses:
        '200':
          description: The details of the updated Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Group
      summary: Delete a single Group
      operationId: groupDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1groups~1%7BgroupId%7D/get/parameters/1'
      responses:
        '204':
          description: The Group has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/groups/_count':
    post:
      tags:
        - Group
      summary: Count the Groups
      operationId: groupCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/groups/_query':
    post:
      tags:
        - Group
      summary: Query the Groups
      operationId: groupQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs':
    get:
      tags:
        - Job
      summary: Get all the Jobs
      operationId: jobList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: name
          in: query
          description: The job name to filter results
          schema:
            type: string
        - name: matchTerm
          in: query
          description: |
            A term to match on different fields. Every entity whose at least one of the specified fields starts with this value will be matched.
            Matches on the following fields:

            - NAME
            - DESCRIPTION
          schema:
            type: string
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/askTotalCount'
      responses:
        '200':
          description: The list of the Jobs available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Job
      summary: Create a new Job
      operationId: jobCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing the properties for the new Job to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jobCreator'
        required: true
      responses:
        '201':
          description: The Job that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}':
    get:
      tags:
        - Job
      summary: Get a single Job
      operationId: jobGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: jobId
          in: path
          description: The ID of the Job on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Job
      summary: Update a single Job
      operationId: jobUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        description: An object containing the new properties for the Job to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/job'
            example:
              type: job
              optlock: 1
        required: true
      responses:
        '200':
          description: The details of the updated Job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Job
      summary: Delete a single Job
      operationId: jobDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - name: forced
          in: query
          description: Delete the Job forcibly. It can only be used by the system administrator.
          schema:
            type: boolean
            default: false
      responses:
        '204':
          description: The Job has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/_count':
    post:
      tags:
        - Job
      summary: Count the Jobs
      operationId: jobCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/_query':
    post:
      tags:
        - Job
      summary: Query the Jobs
      operationId: jobQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/_start':
    post:
      tags:
        - Job Engine
      summary: Start a single Job
      operationId: jobStart
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jobStartOptions'
        required: true
      responses:
        '204':
          description: The Start operation has been received by the Job Engine
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/_stop':
    post:
      tags:
        - Job Engine
      summary: Stop a single Job
      operationId: jobStop
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      responses:
        '202':
          description: The Stop operation has been received by the Job Engine
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/_isRunning':
    post:
      tags:
        - Job Engine
      summary: Check if multiple Jobs are running
      operationId: multipleJobIsRunning
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                jobIds:
                  type: array
                  items:
                    $ref: '#/components/schemas/kapuaId'
              example:
                jobIds:
                  - dX63xIXNstA
                  - TqcLqDS4Wj4
                  - AQ
      responses:
        '200':
          description: |
            An object representing the running status of multiple Jobs.
            Please note that an items that only contains the `jobId` property
            but not the `isRunning` property means that an error occurred while
            retrieving the status of that specific job.
          content:
            application/json:
              schema:
                type: object
                properties:
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/isJobRunning'
                example:
                  list:
                    - jobId: AQ
                    - jobId: TqcLqDS4Wj4
                      isRunning: false
                    - jobId: dX63xIXNstA
                      isRunning: false
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/_isRunning':
    get:
      tags:
        - Job Engine
      summary: Check if a single Job is running
      operationId: jobIsRunning
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      responses:
        '200':
          description: An object representing the running status of a Job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/isJobRunning'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/executions/{executionId}/_resume':
    post:
      tags:
        - Job Engine
      summary: Resume a single Job Execution
      operationId: jobResumeExecution
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D~1executions~1%7BexecutionId%7D~1_stop/post/parameters/2'
      responses:
        '202':
          description: The Job Engine has received the Resume Execution request
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/executions/{executionId}/_stop':
    post:
      tags:
        - Job Engine
      summary: Stop a single Job Execution
      operationId: jobStopExecution
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - name: executionId
          in: path
          description: The ID of the Job Execution on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '204':
          description: The Job Engine has received the Stop Execution request
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/executions':
    get:
      tags:
        - Job - Execution
      summary: Get all the Jobs Executions
      operationId: jobExecutionList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - description: The start date to filter the results.
          name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - description: The end date to filter the results.
          name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - name: status
          in: query
          description: status of job execution
          schema:
            type: string
            enum:
              - RUNNING
              - TERMINATED
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/askTotalCount'
      responses:
        '200':
          description: The list of the Executions of the Job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobExecutionListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/executions/{executionId}':
    get:
      tags:
        - Job - Execution
      summary: Get a single Job Execution
      operationId: jobExecutionGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - name: executionId
          in: path
          description: The ID of the Job Execution on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Job Execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobExecution'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/executions/{executionId}/targets':
    get:
      tags:
        - Job - Execution
      summary: Get all the targets involved in a single Job Execution
      operationId: jobExecutionListTarget
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D~1executions~1%7BexecutionId%7D/get/parameters/2'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the targets involved in a single Job Execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobTargetListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/executions/_count':
    post:
      tags:
        - Job - Execution
      summary: Count the Jobs Executions
      operationId: jobExecutionCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/executions/_query':
    post:
      tags:
        - Job - Execution
      summary: Query the Jobs Executions
      operationId: jobExecutionQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobExecutionListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/targets':
    get:
      tags:
        - Job - Target
      summary: Get all the Jobs Targets
      operationId: jobTargetList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - name: status
          in: query
          description: the status of the job target
          schema:
            $ref: '#/components/schemas/jobTarget/allOf/2/properties/status'
          required: false
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/askTotalCount'
      responses:
        '200':
          description: The list of the Targets of the Job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobTargetListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Job - Target
      summary: Create a new Job Target
      operationId: jobTargetCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        description: An object containing the properties for the new Job Target to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jobTargetCreator'
        required: true
      responses:
        '201':
          description: The Job Target that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/targets/{targetId}':
    get:
      tags:
        - Job - Target
      summary: Get a single Job Target
      operationId: jobTargetGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - name: targetId
          in: path
          description: The entity ID of the on which perform the operations
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Job Target
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobTarget'
              examples:
                Successfully processed Job Target:
                  value:
                    type: jobTarget
                    id: Y-vYl9TKaf8
                    scopeId: AQ
                    createdOn: '2019-12-06T11:00:02.000Z'
                    createdBy: AQ
                    modifiedOn: '2019-12-06T11:01:00.000Z'
                    modifiedBy: AQ
                    optlock: 2
                    jobId: auSoU2ph1bY
                    jobTargetId: VBk_ZDZSOV0
                    status: PROCESS_OK
                    stepIndex: 0
                Failed processed Job Target:
                  value:
                    type: jobTarget
                    id: Y-vYl9TKaf8
                    scopeId: AQ
                    createdOn: '2019-12-06T11:00:02.000Z'
                    createdBy: AQ
                    modifiedOn: '2019-12-06T11:01:00.000Z'
                    modifiedBy: AQ
                    optlock: 2
                    jobId: SaSaU2ph1bY
                    jobTargetId: VAR1ZDZSOV0
                    status: PROCESS_FAILED
                    statusMessage: Device not connected
                    stepIndex: 0
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Job - Target
      summary: Delete a single Job Target
      operationId: jobTargetDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D~1targets~1%7BtargetId%7D/get/parameters/2'
      responses:
        '204':
          description: The Job Target has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/targets/{targetId}/executions':
    get:
      tags:
        - Job - Target
      summary: Get all the Executions in which a single Job Target was involved
      operationId: jobTargetListExecution
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D~1targets~1%7BtargetId%7D/get/parameters/2'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: A list of all the Executions in which a single Job Target was involved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobExecutionListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/targets/_count':
    post:
      tags:
        - Job - Target
      summary: Count the Jobs Targets
      operationId: jobTargetCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/targets/_query':
    post:
      tags:
        - Job - Target
      summary: Query the Jobs Targets
      operationId: jobTargetQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobTargetListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/triggers':
    get:
      tags:
        - Job - Trigger
      summary: Get all the Jobs Triggers
      operationId: jobTriggerList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - name: name
          in: query
          description: The job trigger name to filter results
          schema:
            type: string
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/askTotalCount'
      responses:
        '200':
          description: The list of the Trigger of the Job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobTriggerListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Job - Trigger
      summary: Create a new Job Trigger
      operationId: jobTriggerCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        description: An object containing the properties for the new Job Trigger to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jobTriggerCreator'
        required: true
      responses:
        '201':
          description: The Job Trigger that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
        '400':
          description: Provided data is not accepted
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/illegalArgumentExceptionInfo'
                  - $ref: '#/components/schemas/triggerInvalidDatesExceptionInfo'
                  - $ref: '#/components/schemas/triggerInvalidSchedulingExceptionInfo'
            application/xml:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/illegalArgumentExceptionInfo'
                  - $ref: '#/components/schemas/triggerInvalidDatesExceptionInfo'
                  - $ref: '#/components/schemas/triggerInvalidSchedulingExceptionInfo'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/triggers/{triggerId}':
    get:
      tags:
        - Job - Trigger
      summary: Get a single Job Trigger
      operationId: jobTriggerGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - name: triggerId
          in: path
          description: The ID of the Job Trigger on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Job Trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobTrigger'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Job - Trigger
      summary: Update a single Job Trigger
      operationId: jobTriggerUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D~1triggers~1%7BtriggerId%7D/get/parameters/2'
      requestBody:
        description: An object containing the new properties for the Job Trigger to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jobTrigger'
        required: true
      responses:
        '200':
          description: The details of the updated Job Trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobTrigger'
        '400':
          description: Provided data is not accepted
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/illegalArgumentExceptionInfo'
                  - $ref: '#/components/schemas/triggerInvalidDatesExceptionInfo'
                  - $ref: '#/components/schemas/triggerInvalidSchedulingExceptionInfo'
            application/xml:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/illegalArgumentExceptionInfo'
                  - $ref: '#/components/schemas/triggerInvalidDatesExceptionInfo'
                  - $ref: '#/components/schemas/triggerInvalidSchedulingExceptionInfo'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Job - Trigger
      summary: Delete a single Job Trigger
      operationId: jobTriggerDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D~1triggers~1%7BtriggerId%7D/get/parameters/2'
      responses:
        '204':
          description: The Job Trigger has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/triggers/_count':
    post:
      tags:
        - Job - Trigger
      summary: Count the Jobs Triggers
      operationId: jobTriggerCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/triggers/_query':
    post:
      tags:
        - Job - Trigger
      summary: Query the Jobs Triggers
      operationId: jobTriggerQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobTriggerListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/triggerDefinitions':
    get:
      tags:
        - Job - Trigger Definition
      summary: Get all the Trigger Definitions
      operationId: triggerDefinitionList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Trigger Definitions available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/triggerDefinitionListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/triggerDefinitions/{triggerDefinitionId}':
    get:
      tags:
        - Job - Trigger Definition
      summary: Get a single Trigger Definition
      operationId: triggerDefinitionGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: triggerDefinitionId
          in: path
          description: The ID of the Trigger Definition on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Trigger Definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/triggerDefinition'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/triggerDefinitions/_query':
    post:
      tags:
        - Job - Trigger Definition
      summary: Query the Trigger Definitions
      operationId: triggerDefinitionQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/triggerDefinitionListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/triggerDefinitions/_count':
    post:
      tags:
        - Job - Trigger Definition
      summary: Count the Trigger Definitions
      operationId: triggerDefinitionCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/steps':
    get:
      tags:
        - Job - Step
      summary: Get all the Jobs Steps
      operationId: jobStepList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - name: name
          in: query
          description: The job step name to filter results
          schema:
            type: string
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/askTotalCount'
      responses:
        '200':
          description: The list of the Steps of the Job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobStepListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Job - Step
      summary: Create a new Job Step
      operationId: jobStepCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        description: An object containing the properties for the new Job Step to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jobStepCreator'
        required: true
      responses:
        '201':
          description: The Job Step that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobStep'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/entityUniqueness'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/steps/{stepId}':
    get:
      tags:
        - Job - Step
      summary: Get a single Job Step
      operationId: jobStepGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - name: stepId
          in: path
          description: The ID of the Job Step on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Job Step
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobStep'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Job - Step
      summary: Update a single Job Step
      operationId: jobStepUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D~1steps~1%7BstepId%7D/get/parameters/2'
      requestBody:
        description: An object containing the new properties for the Job Step to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jobStep'
        required: true
      responses:
        '200':
          description: The details of the updated Job Step
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobStep'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Job - Step
      summary: Delete a single Job Step
      operationId: jobStepDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D~1steps~1%7BstepId%7D/get/parameters/2'
      responses:
        '204':
          description: The Job Step has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/steps/_count':
    post:
      tags:
        - Job - Step
      summary: Count the Jobs Steps
      operationId: jobStepCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobs/{jobId}/steps/_query':
    post:
      tags:
        - Job - Step
      summary: Query the Jobs Steps
      operationId: jobStepQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1jobs~1%7BjobId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobStepListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobStepDefinitions':
    get:
      tags:
        - Job - Step Definition
      summary: Get all the Jobs Step Definitions
      operationId: jobStepDefinitionList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Jobs Step Definitions available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobStepDefinitionListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobStepDefinitions/{jobStepDefinitionId}':
    get:
      tags:
        - Job - Step Definition
      summary: Get a single Job Step Definition
      operationId: jobStepDefinitionGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: jobStepDefinitionId
          in: path
          description: The ID of the Job Step Definition on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Job Step Definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobStepDefinition'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobStepDefinitions/_query':
    post:
      tags:
        - Job - Step Definition
      summary: Query the Jobs Step Definitions
      operationId: jobStepDefinitionQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobStepDefinitionListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/jobStepDefinitions/_count':
    post:
      tags:
        - Job - Step Definition
      summary: Count the Jobs Step Definitions
      operationId: jobStepDefinitionCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/provisionRequests':
    get:
      tags:
        - Provision Request
      summary: Get all the Provision Requests
      operationId: provisionRequestList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1devices/get/parameters/2'
        - name: executionStatus
          in: query
          description: The execution status of the Provision Request to filter results
          schema:
            $ref: '#/components/schemas/provisionRequestExecutionStatus'
          required: false
        - name: matchTerm
          in: query
          description: |
            A term to match on different fields. Every entity whose at least one of the specified fields starts with this value will be matched.
            Matches on the following fields:

            - CLIENT_ID
            - USERNAME
          schema:
            type: string
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/sortParam'
        - name: sortDir
          in: query
          description: 'The sort direction. Can be ASCENDING (default), DESCENDING. Case-insensitive (except for "clientId" parameter).'
          schema:
            type: string
            enum:
              - ASCENDING
              - DESCENDING
            default: ASCENDING
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Provision Requests available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provisionRequestListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Get all the Provision Requests in the given Scope
    post:
      tags:
        - Provision Request
      summary: Create a new Provision Request
      operationId: provisionRequestCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing the properties for the new Provision Request to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/provisionRequestCreator'
            examples:
              USER_PASS:
                value:
                  type: provisioningRequestCreator
                  clientId: qwe1234561
                  authenticationType: USER_PASS
                  username: prov-user
                  password: Passw0rd_12345
                  generateActivationKey: false
                  options:
                    endpointInfoId: du6W7iwPvi4
                    activationOptions:
                      status: ENABLED
                      activatesOn: '2018-04-19T22:00:00Z'
                      expiresOn: '2024-04-19T22:00:00Z'
                    connectionOptions:
                      reserveUser: true
                      userCouplingMode: STRICT
                      passwordLength: 40
                    extraOptions:
                      deviceConfiguration:
                        type: deviceConfiguration
                        configuration:
                          - id: org.eclipse.kura.wire.graph.WireGraphService
                            properties:
                              property:
                                - name: WireGraph
                                  array: false
                                  encrypted: false
                                  type: String
                                  value:
                                    - '{"components":[{"pid":"asset1","inputPortCount":1,"outputPortCount":1,"renderingProperties":{"position":{"x":-580,"y":-120},"inputPortNames":{},"outputPortNames":{}}},{"pid":"asset2","inputPortCount":1,"outputPortCount":1,"renderingProperties":{"position":{"x":-1100,"y":-100},"inputPortNames":{},"outputPortNames":{}}}],"wires":[]}'
                                - name: kura.service.pid
                                  array: false
                                  encrypted: false
                                  type: String
                                  value:
                                    - org.eclipse.kura.wire.graph.WireGraphService
                                - name: service.pid
                                  array: false
                                  encrypted: false
                                  type: String
                                  value:
                                    - org.eclipse.kura.wire.graph.WireGraphService
                      vpnAccess: true
              USER_CERT:
                value:
                  type: provisioningRequestCreator
                  clientId: qwe1234561
                  authenticationType: USER_CERT
                  username: prov-user
                  certificateDevId: esf-certificate-serial
                  generateActivationKey: false
                  options:
                    endpointInfoId: du6W7iwPvi4
                    activationOptions:
                      status: ENABLED
                      activatesOn: '2018-04-19T22:00:00Z'
                      expiresOn: '2024-04-19T22:00:00Z'
                    connectionOptions:
                      reserveUser: true
                      userCouplingMode: STRICT
                      passwordLength: 40
                    extraOptions:
                      deviceConfiguration:
                        type: deviceConfiguration
                        configuration:
                          - id: org.eclipse.kura.wire.graph.WireGraphService
                            properties:
                              property:
                                - name: WireGraph
                                  array: false
                                  encrypted: false
                                  type: String
                                  value:
                                    - '{"components":[{"pid":"asset1","inputPortCount":1,"outputPortCount":1,"renderingProperties":{"position":{"x":-580,"y":-120},"inputPortNames":{},"outputPortNames":{}}},{"pid":"asset2","inputPortCount":1,"outputPortCount":1,"renderingProperties":{"position":{"x":-1100,"y":-100},"inputPortNames":{},"outputPortNames":{}}}],"wires":[]}'
                                - name: kura.service.pid
                                  array: false
                                  encrypted: false
                                  type: String
                                  value:
                                    - org.eclipse.kura.wire.graph.WireGraphService
                                - name: service.pid
                                  array: false
                                  encrypted: false
                                  type: String
                                  value:
                                    - org.eclipse.kura.wire.graph.WireGraphService
                      vpnAccess: true
                      legacyMode: false
        required: true
      responses:
        '200':
          description: The Provision Request that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provisionRequest'
              examples:
                USER_PASS:
                  value:
                    type: provisioningRequest
                    id: TGPP5eCWNxU
                    scopeId: AQ
                    createdOn: '2019-11-14T14:06:41.000Z'
                    createdBy: AQ
                    modifiedOn: '2019-11-14T14:06:41.000Z'
                    modifiedBy: AQ
                    optlock: 1
                    clientId: qwe1234561
                    authenticationType: USER_PASS
                    executionStatus: CREATED
                    userId: dk0UPhF8_JY
                    username: prov-user
                    options:
                      endpointInfoId: du6W7iwPvi4
                      activationOptions:
                        status: ENABLED
                        activatesOn: '2018-04-19T22:00:00Z'
                        expiresOn: '2024-04-19T22:00:00Z'
                      connectionOptions:
                        reserveUser: true
                        userCouplingMode: STRICT
                        passwordLength: 40
                      extraOptions:
                        deviceConfiguration:
                          type: deviceConfiguration
                          configuration:
                            - id: org.eclipse.kura.wire.graph.WireGraphService
                              properties:
                                property:
                                  - name: WireGraph
                                    array: false
                                    encrypted: false
                                    type: String
                                    value:
                                      - '{"components":[{"pid":"asset1","inputPortCount":1,"outputPortCount":1,"renderingProperties":{"position":{"x":-580,"y":-120},"inputPortNames":{},"outputPortNames":{}}},{"pid":"asset2","inputPortCount":1,"outputPortCount":1,"renderingProperties":{"position":{"x":-1100,"y":-100},"inputPortNames":{},"outputPortNames":{}}}],"wires":[]}'
                                  - name: kura.service.pid
                                    array: false
                                    encrypted: false
                                    type: String
                                    value:
                                      - org.eclipse.kura.wire.graph.WireGraphService
                                  - name: service.pid
                                    array: false
                                    encrypted: false
                                    type: String
                                    value:
                                      - org.eclipse.kura.wire.graph.WireGraphService
                        vpnAccess: true
                USER_CERT:
                  value:
                    type: provisioningRequest
                    id: TGPP5eCWNxU
                    scopeId: AQ
                    createdOn: '2019-11-14T14:06:41.000Z'
                    createdBy: AQ
                    modifiedOn: '2019-11-14T14:06:41.000Z'
                    modifiedBy: AQ
                    optlock: 1
                    clientId: qwe1234561
                    authenticationType: USER_CERT
                    certificateDevId: esf-certificate-serial
                    executionStatus: CREATED
                    userId: dk0UPhF8_JY
                    username: prov-user
                    options:
                      endpointInfoId: du6W7iwPvi4
                      activationOptions:
                        status: ENABLED
                        activatesOn: '2018-04-19T22:00:00Z'
                        expiresOn: '2024-04-19T22:00:00Z'
                      connectionOptions:
                        reserveUser: true
                        userCouplingMode: STRICT
                        passwordLength: 40
                      extraOptions:
                        deviceConfiguration:
                          type: deviceConfiguration
                          configuration:
                            - id: org.eclipse.kura.wire.graph.WireGraphService
                              properties:
                                property:
                                  - name: WireGraph
                                    array: false
                                    encrypted: false
                                    type: String
                                    value:
                                      - '{"components":[{"pid":"asset1","inputPortCount":1,"outputPortCount":1,"renderingProperties":{"position":{"x":-580,"y":-120},"inputPortNames":{},"outputPortNames":{}}},{"pid":"asset2","inputPortCount":1,"outputPortCount":1,"renderingProperties":{"position":{"x":-1100,"y":-100},"inputPortNames":{},"outputPortNames":{}}}],"wires":[]}'
                                  - name: kura.service.pid
                                    array: false
                                    encrypted: false
                                    type: String
                                    value:
                                      - org.eclipse.kura.wire.graph.WireGraphService
                                  - name: service.pid
                                    array: false
                                    encrypted: false
                                    type: String
                                    value:
                                      - org.eclipse.kura.wire.graph.WireGraphService
                        vpnAccess: true
                        legacyMode: false
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/provisionRequests/{provisionRequestId}':
    get:
      tags:
        - Provision Request
      summary: Get a single ProvisionRequest
      operationId: provisionRequestGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: provisionRequestId
          in: path
          description: The ID of the Provision Request on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired ProvisionRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provisionRequest'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: 'Get the details of a given ProvisionRequest, according to the `provisionRequestId` path parameter.'
    put:
      tags:
        - Provision Request
      deprecated: true
      summary: 'Update a single ProvisionRequest (refer to put in /{scopeId}/provisionRequests/{provisionRequestId}/options to perform update)'
      operationId: provisionRequestUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1provisionRequests~1%7BprovisionRequestId%7D/get/parameters/1'
      requestBody:
        description: An object containing the new properties for the ProvisionRequest to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/provisionRequest'
        required: true
      responses:
        '200':
          description: The details of the updated ProvisionRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provisionRequest'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: 'Update the details of a given ProvisionRequest, according to the `provisionRequestId` path parameter. Please note that some fields may be readonly for integrity purposes.'
    delete:
      tags:
        - Provision Request
      summary: Delete a single ProvisionRequest
      operationId: provisionRequestDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1provisionRequests~1%7BprovisionRequestId%7D/get/parameters/1'
      responses:
        '200':
          description: The ProvisionRequest has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: 'Delete the given provisionRequest, according to the `provisionRequestId` path parameter.'
  '/{scopeId}/provisionRequests/_count':
    post:
      tags:
        - Provision Request
      summary: Count the Provision Requests
      operationId: provisionRequestCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Returns the count of how many Provision Requests are present in the given Scope
  '/{scopeId}/provisionRequests/_query':
    post:
      tags:
        - Provision Request
      summary: Query the Provision Requests
      operationId: provisionRequestQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provisionRequestListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Returns a list of the Provision Requests matching the given query in the Scope. Predicates are not currently supported.
  '/{scopeId}/provisionRequests/{provisionRequestId}/options':
    get:
      tags:
        - Provision Request
      summary: Gets the options for a Provision Request
      operationId: provisionRequestOptionsGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1provisionRequests~1%7BprovisionRequestId%7D/get/parameters/1'
      responses:
        '200':
          description: The Options for the given Provision Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provisionRequestProvisionOptions'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Returns the Options for the given Provision Request according to the `provisionRequestId` parameter
    put:
      tags:
        - Provision Request
      summary: Update the Options of a Provision Request
      operationId: provisionRequestOptionsUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1provisionRequests~1%7BprovisionRequestId%7D/get/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/provisionRequestProvisionOptions'
        required: true
      responses:
        '200':
          description: A new ProvisionRequest generated according to the informations in the `ProvisionRequestGenerator` object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provisionRequestProvisionOptions'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Returns a new ProvisionRequest generated according to the informations in the `ProvisionRequestGenerator` object
  '/{scopeId}/provisionRequests/{provisionRequestId}/_stop':
    post:
      tags:
        - Provision Request
      summary: Stop a running ProvisionRequest
      operationId: provisionRequestStop
      description: 'Stops the given provisionRequest, according to the `provisionRequestId` path parameter. It can be force by an admin, if it is necessary.'
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1provisionRequests~1%7BprovisionRequestId%7D/get/parameters/1'
      requestBody:
        description: The optional options to stop a running Provision Request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/provisioningStopOptions'
        required: true
      responses:
        '200':
          description: The ProvisionRequest has been stopped.
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/provisionRequests/{provisionRequestId}/executions':
    get:
      tags:
        - Provision Request Execution
      summary: Get all the Provision Request Executions
      operationId: provisionRequestExecutionList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1provisionRequests~1%7BprovisionRequestId%7D/get/parameters/1'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/askTotalCount'
      responses:
        '200':
          description: The list of the Provision Request Executions available in the given Scope and Provision Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provisionRequestExecutionListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Get all the Provision Request Executions in the given Scope and Provision Request
  '/{scopeId}/provisionRequests/{provisionRequestId}/executions/{executionId}':
    get:
      tags:
        - Provision Request Execution
      summary: Get a single Provision Request Execution
      operationId: provisionRequestExecutionGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1provisionRequests~1%7BprovisionRequestId%7D/get/parameters/1'
        - name: executionId
          in: path
          description: The ID of the Execution on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Provision Request Execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provisionRequestExecution'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: 'Get the details of a given Provision Request Execution, according to the `provisionRequestId` and `executionId` path parameters.'
  '/{scopeId}/provisionRequests/{provisionRequestId}/executions/_count':
    post:
      tags:
        - Provision Request Execution
      summary: Count the Provision Request Executions
      operationId: provisionRequestExecutionCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1provisionRequests~1%7BprovisionRequestId%7D/get/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Returns the count of how many Provision Request Executions are present in the given Scope and Provision Request
  '/{scopeId}/provisionTemplates':
    get:
      tags:
        - Bulk Provision Request
      summary: List the Provision Request Templates
      description: Get all the Provision Request Templates
      operationId: listTemplates
      parameters:
        - $ref: '#/components/parameters/scopeId'
      responses:
        '200':
          description: The list of Provision Request Templates available in the scope
          content:
            application/json:
              schema:
                allOf:
                  - description: A list of available Provision Request Templates
                    allOf:
                      - type: object
                        properties:
                          templates:
                            type: array
                            nullable: false
                            items:
                              description: 'The minimal View of a Provisioning Template, used as a blueprint to be reified for multiple devices during a Bulk Provisioning Request execution'
                              allOf:
                                - type: object
                                  properties:
                                    templateId:
                                      allOf:
                                        - description: The id of the Provisioning Template
                                        - nullable: false
                                        - $ref: '#/components/schemas/kapuaId'
                                    displayName:
                                      allOf:
                                        - type: string
                                        - nullable: false
                                        - description: The human-readable name of the Provisioning Template
                                    description:
                                      allOf:
                                        - type: string
                                        - nullable: true
                                        - description: The human-readable description for the Provisioning Template
                              example:
                                templateId: X7NgjlhlMQk
                                displayName: Demo Template
                                description: Demo template Description
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Bulk Provision Request
      summary: Upsert Templates
      description: Creates or updates a Provision Request Template
      operationId: upsertTemplate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: templateId
          description: 'The id of the existing Provision Request Template, if this is an update'
          in: query
          required: false
          schema:
            type: string
      requestBody:
        description: An object containing the properties for the new Provision Request to be created
        content:
          application/json:
            schema:
              allOf:
                - description: An object that holds all the information necessary to create or update a Provision Request Template
                - type: object
                  properties:
                    displayName:
                      type: string
                      nullable: false
                      description: The human-readable name of the Provisioning Template
                    description:
                      type: string
                      nullable: true
                      description: The human-readable description for the Provisioning Template
                    body:
                      allOf:
                        - nullable: false
                        - description: The actual Template to be reified. Use Â§Â§PLACEHOLDERÂ§Â§ as property values to specify which Service's properties need to be reified
                        - description: This object represent the template used to generate a provision request's Options
                          allOf:
                            - type: object
                              properties:
                                activationOptions:
                                  allOf:
                                    - type: object
                                      properties:
                                        status:
                                          type: string
                                          enum:
                                            - ENABLED
                                            - DISABLED
                                        activatesOn:
                                          type: string
                                          format: date-time
                                        expiresOn:
                                          type: string
                                          format: date-time
                                      example:
                                        activatesOn: '2023-10-30T16:22:18.687Z'
                                        status: ENABLED
                                connectionOptions:
                                  allOf:
                                    - type: object
                                      properties:
                                        userCouplingMode:
                                          type: string
                                          enum:
                                            - INHERITED
                                            - LOOSE
                                            - STRICT
                                        passwordLength:
                                          type: integer
                                          description: The length of the generated password that will be sent to the device.
                                      example:
                                        userCouplingMode: INHERITED
                                        passwordLength: 12
                                extraOptions:
                                  allOf:
                                    - type: object
                                      properties:
                                        vpnAccess:
                                          type: boolean
                                          description: 'Whether or not configure the VpnClient configurable component with the same credentials as the MqttDataTransport and give the user vpn:connect'
                                        deviceConfiguration:
                                          type: object
                                          properties:
                                            configuration:
                                              type: array
                                              items:
                                                type: object
                                                properties:
                                                  id:
                                                    type: string
                                                    description: The id of the component configuration
                                                  _serviceId:
                                                    type: string
                                                    description: 'The id of the service used to reify this configuration. If omitted, the component configuration''s id will be interpreted as the service Id'
                                                  properties:
                                                    type: array
                                                    items:
                                                      type: object
                                                      properties:
                                                        name:
                                                          type: string
                                                          description: The name of the property
                                                        _propertyId:
                                                          type: string
                                                          description: 'The id of the values used to reify this property. If omitted, the property''s name will be interpreted as the property Id'
                                                        array:
                                                          type: boolean
                                                          description: 'True if the property accepts multiple values, false otherwise'
                                                        encrypted:
                                                          type: boolean
                                                          description: True if the property value should be encrypted
                                                        type:
                                                          type: string
                                                          description: Describes how the property value should be interpreted (data type)
                                                        value:
                                                          type: array
                                                          description: The actual property value(s)
                                                          items:
                                                            type: string
                                                      example:
                                                        - name: clock.ntp.host
                                                          array: false
                                                          encrypted: false
                                                          type: String
                                                          value:
                                                            - Â§Â§PLACEHOLDERÂ§Â§
                - example:
                    displayName: Demo Template
                    description: Demo template Description
                    body:
                      activationOptions:
                        status: ENABLED
                        activatesOn: '2023-10-30T16:22:18.687Z'
                      connectionOptions:
                        reservedUser: true
                        userCouplingMode: INHERITED
                        passwordLength: 12
                      extraOptions:
                        vpnAccess: true
                        deviceConfiguration:
                          configuration:
                            - id: org.eclipse.kura.clock.ClockService
                              properties:
                                property:
                                  - name: clock.ntp.host
                                    array: false
                                    encrypted: false
                                    type: String
                                    value:
                                      - Â§Â§PLACEHOLDERÂ§Â§
                                  - name: clock.ntp.port
                                    array: false
                                    encrypted: false
                                    type: Integer
                                    value:
                                      - Â§Â§PLACEHOLDERÂ§Â§
                                  - name: clock.provider
                                    array: false
                                    encrypted: false
                                    type: String
                                    value:
                                      - java-ntp
                                  - name: clock.ntp.max-retry
                                    array: false
                                    encrypted: false
                                    type: Integer
                                    value:
                                      - '3600'
                                  - name: rtc.filename
                                    array: false
                                    encrypted: false
                                    type: String
                                    value:
                                      - /dev/rtc0
                                  - name: clock.set.hwclock
                                    array: false
                                    encrypted: false
                                    type: Boolean
                                    value:
                                      - 'true'
                                  - name: clock.ntp.timeout
                                    array: false
                                    encrypted: false
                                    type: Integer
                                    value:
                                      - '10000'
                                  - name: enabled
                                    array: false
                                    encrypted: false
                                    type: Boolean
                                    value:
                                      - 'true'
                                  - name: clock.ntp.retry.interval
                                    array: false
                                    encrypted: false
                                    type: Integer
                                    value:
                                      - '5'
                                  - name: kura.service.pid
                                    array: false
                                    encrypted: false
                                    type: String
                                    value:
                                      - org.eclipse.kura.clock.ClockService
                                  - name: service.pid
                                    array: false
                                    encrypted: false
                                    type: String
                                    value:
                                      - org.eclipse.kura.clock.ClockService
      responses:
        '200':
          description: The Provision Request that has just been created
          content:
            application/json:
              schema:
                $ref: '#/paths/~1%7BscopeId%7D~1provisionGroups/post/responses/200/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/provisionTemplates/default':
    get:
      tags:
        - Bulk Provision Request
      summary: Fetch Default Template
      description: The Default Provision Request Template within the scope
      operationId: fetchDefaultTemplate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      responses:
        '200':
          description: The Default Provision Request Template within the scope
          content:
            application/json:
              schema:
                $ref: '#/paths/~1%7BscopeId%7D~1provisionGroups/post/responses/200/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/provisionTemplates/{templateId}':
    get:
      tags:
        - Bulk Provision Request
      summary: Fetch specific Template
      description: Fetches the Provision Request Template with the provided id within the specified scope
      operationId: fetchTemplate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: templateId
          in: path
          description: The ID of the Provision Request Template on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The Provision Request Templates within the scope that matches the provided id
          content:
            application/json:
              schema:
                $ref: '#/paths/~1%7BscopeId%7D~1provisionGroups/post/responses/200/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Bulk Provision Request
      summary: Delete a template
      description: Deletes the Provision Request Template with the provided id within the specified scope
      operationId: deleteTemplate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1provisionTemplates~1%7BtemplateId%7D/get/parameters/1'
      responses:
        '200':
          description: The Provision Request Template that was deleted
          content:
            application/json:
              schema:
                $ref: '#/paths/~1%7BscopeId%7D~1provisionGroups/post/responses/200/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/provisionTemplates/default/schema':
    get:
      tags:
        - Bulk Provision Request
      summary: Get the Default Template's Schema
      description: Extracts the schema of Configurable Services (and related Properties) for the Default Provision Request Template
      operationId: getDefaultTemplateSchema
      parameters:
        - $ref: '#/components/parameters/scopeId'
      responses:
        '200':
          description: The Schema of Configurable Services (and related Properties) for the Default Provision Request Template
          content:
            application/json:
              schema:
                description: A list container for Provisioning Template schemas
                allOf:
                  - type: object
                    properties:
                      templateId:
                        allOf:
                          - description: The id of the Provisioning Template
                          - nullable: false
                          - $ref: '#/components/schemas/kapuaId'
                      services:
                        type: array
                        nullable: false
                        items:
                          description: 'A Provisioning Template Schema, describing the schema for all the propertied that need reification values - use this as a set of rules to create a well-formed Provided Service'
                          allOf:
                            - type: object
                              properties:
                                serviceId:
                                  allOf:
                                    - description: The id of the service this schema refers to
                                    - type: string
                                    - nullable: false
                                schema:
                                  type: array
                                  items:
                                    description: 'The schema of a property that will be reified upon Template resolution, during a Bulk Provisioning Request execution. Describes the expected format of property value within a Provided Service'
                                    allOf:
                                      - type: object
                                        properties:
                                          id:
                                            allOf:
                                              - type: string
                                              - nullable: false
                                              - description: The name/id of the property
                                          array:
                                            allOf:
                                              - type: boolean
                                              - nullable: false
                                              - description: 'True if the property accepts multiple values, false otherwise'
                                          encrypted:
                                            allOf:
                                              - type: boolean
                                              - nullable: false
                                              - description: True if the property value should be encrypted
                                          type:
                                            allOf:
                                              - type: string
                                              - nullable: false
                                              - description: Describes how the property value should be interpreted (data type)
                                              - enum:
                                                  - String
                                                  - Integer
                                                  - Boolean
                                                  - Double
                                                  - Long
                                                  - Password
                                    example:
                                      id: clock.ntp.host
                                      array: false
                                      encrypted: false
                                      type: String
                          example:
                            services:
                              - serviceId: org.eclipse.kura.clock.ClockService
                                schema:
                                  - id: clock.ntp.host
                                    array: false
                                    encrypted: false
                                    type: String
                                  - id: clock.ntp.port
                                    array: false
                                    encrypted: false
                                    type: Integer
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/provisionGroups':
    get:
      tags:
        - Bulk Provision Request
      summary: List the Provision Groups
      description: Get all the Provision Groups
      operationId: listGroups
      parameters:
        - $ref: '#/components/parameters/scopeId'
      responses:
        '200':
          description: The list of Provision Groups available in the scope
          content:
            application/json:
              schema:
                description: A list of available Provision Groups
                allOf:
                  - type: object
                    properties:
                      templates:
                        type: array
                        nullable: false
                        items:
                          $ref: '#/paths/~1%7BscopeId%7D~1provisionGroups/post/requestBody/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Bulk Provision Request
      summary: Upsert a Group
      description: Creates or updates a Provision Group
      operationId: upsertGroup
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing the properties for the Provisioning Group
        content:
          application/json:
            schema:
              description: A provisioning group
              allOf:
                - type: object
                  properties:
                    name:
                      allOf:
                        - type: string
                        - nullable: false
                        - description: The name of the Provisioning Group
                    displayName:
                      allOf:
                        - type: string
                        - nullable: false
                        - description: The human-readable name of the Provisioning Group
                    description:
                      allOf:
                        - type: string
                        - nullable: true
                        - description: The human-readable description for the Provisioning Group
                    defaultGroup:
                      type: boolean
                      nullable: false
                      description: Whether this group is the default group or not
              example:
                name: TheOnlyGroup
                displayName: The only group available
                description: ...
        required: true
      responses:
        '200':
          description: The Provision Group that has just been created/updated
          content:
            application/json:
              schema:
                description: 'The detailed View of a Provisioning Template, used as a blueprint to be reified for multiple devices during a Bulk Provisioning Request execution'
                allOf:
                  - type: object
                    properties:
                      templateId:
                        allOf:
                          - description: The id of the Provisioning Template
                          - nullable: false
                          - $ref: '#/components/schemas/kapuaId'
                      displayName:
                        allOf:
                          - type: string
                          - nullable: false
                          - description: The human-readable name of the Provisioning Template
                      description:
                        allOf:
                          - type: string
                          - nullable: true
                          - description: The human-readable description for the Provisioning Template
                      body:
                        allOf:
                          - nullable: false
                          - description: The actual Template to be reified. Use Â§Â§PLACEHOLDERÂ§Â§ as property values to specify which Service's properties need to be reified
                          - $ref: '#/paths/~1%7BscopeId%7D~1provisionTemplates/post/requestBody/content/application~1json/schema/allOf/1/properties/body/allOf/2'
                example:
                  templateId: X7NgjlhlMQk
                  displayName: Demo Template
                  description: Demo template Description
                  body:
                    activationOptions:
                      activatesOn: '2023-10-30T16:22:18.687Z'
                      status: ENABLED
                    connectionOptions:
                      userCouplingMode: INHERITED
                      passwordLength: 12
                    extraOptions:
                      vpnAccess: true
                      deviceConfiguration:
                        configuration:
                          - id: org.eclipse.kura.clock.ClockService
                            properties:
                              - name: clock.ntp.host
                                array: false
                                encrypted: false
                                type: String
                                value:
                                  - Â§Â§PLACEHOLDERÂ§Â§
                              - name: clock.ntp.port
                                array: false
                                encrypted: false
                                type: Integer
                                value:
                                  - Â§Â§PLACEHOLDERÂ§Â§
                              - name: clock.provider
                                array: false
                                encrypted: false
                                type: String
                                value:
                                  - java-ntp
                              - name: clock.ntp.max-retry
                                array: false
                                encrypted: false
                                type: Integer
                                value:
                                  - '3600'
                              - name: rtc.filename
                                array: false
                                encrypted: false
                                type: String
                                value:
                                  - /dev/rtc0
                              - name: clock.set.hwclock
                                array: false
                                encrypted: false
                                type: Boolean
                                value:
                                  - 'true'
                              - name: clock.ntp.timeout
                                array: false
                                encrypted: false
                                type: Integer
                                value:
                                  - '10000'
                              - name: enabled
                                array: false
                                encrypted: false
                                type: Boolean
                                value:
                                  - 'true'
                              - name: clock.ntp.retry.interval
                                array: false
                                encrypted: false
                                type: Integer
                                value:
                                  - '5'
                              - name: kura.service.pid
                                array: false
                                encrypted: false
                                type: String
                                value:
                                  - org.eclipse.kura.clock.ClockService
                              - name: service.pid
                                array: false
                                encrypted: false
                                type: String
                                value:
                                  - org.eclipse.kura.clock.ClockService
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/provisionGroups/{groupName}':
    get:
      tags:
        - Bulk Provision Request
      summary: Fetch specific Group
      description: Fetches the Provision Group with the provided name within the specified scope
      operationId: fetchGroupByName
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: groupName
          in: path
          description: The id of the Provisioning Group
          schema:
            type: string
          required: true
      responses:
        '200':
          description: The Provision Group within the scope that matches the provided name
          content:
            application/json:
              schema:
                $ref: '#/paths/~1%7BscopeId%7D~1provisionGroups/post/requestBody/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Bulk Provision Request
      summary: Delete a Group
      description: Deletes the Provision Group with the provided name within the specified scope
      operationId: deleteGroup
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: groupName
          in: path
          description: The id of the Provisioning Group
          schema:
            allOf:
              - type: string
          required: true
      responses:
        '200':
          description: The Provision Group that was deleted
          content:
            application/json:
              schema:
                $ref: '#/paths/~1%7BscopeId%7D~1provisionGroups/post/requestBody/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/provisionTemplates/{templateId}/schema':
    get:
      tags:
        - Bulk Provision Request
      summary: Get the Template's Schema
      description: Extracts the schema of Configurable Services (and related Properties) for the specified Provision Request Template
      operationId: getTemplateSchema
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1provisionTemplates~1%7BtemplateId%7D/get/parameters/1'
      responses:
        '200':
          description: The Schema of Configurable Services (and related Properties) for the specified Provision Request Template
          content:
            application/json:
              schema:
                $ref: '#/paths/~1%7BscopeId%7D~1provisionTemplates~1default~1schema/get/responses/200/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/provisionTemplates/default/providedServices':
    get:
      tags:
        - Bulk Provision Request
      summary: fetch Provided Services for Default Template
      description: Fetches all specified Provided Services for the Default Provision Request Template
      operationId: fetchDefaultTemplateProvidedServices
      parameters:
        - $ref: '#/components/parameters/scopeId'
      responses:
        '200':
          description: The list of available Provided Services
          content:
            application/json:
              schema:
                allOf:
                  - description: A list of Provided Services serving a specific Provisioning Template
                  - type: object
                    properties:
                      templateId:
                        allOf:
                          - $ref: '#/components/schemas/kapuaId'
                          - nullable: false
                          - description: The id of the template these Provided Services serves
                      schema:
                        type: array
                        nullable: false
                        description: The list of available Services
                        items:
                          $ref: '#/paths/~1%7BscopeId%7D~1provisionTemplates~1default~1providedServices/post/responses/200/content/application~1json/schema/allOf/0'
                example:
                  templateId: X7NgjlhlMQk
                  providedServices:
                    - serviceId: org.eclipse.kura.clock.ClockService
                      group: TheOnlyGroup
                      displayName: My Own Very First Provided Service
                      description: Cannot think of one
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Bulk Provision Request
      summary: Creates or updates a Provided Service for the Default Template
      description: Creates or updates a Provided Service for the Default Template
      operationId: upsertDefaultTemplateProvidedService
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: The details necessary to create or update the Provided Service
        content:
          application/json:
            schema:
              allOf:
                - description: The creation request of a Provisioning Template's Provided Service
                - type: object
                  properties:
                    serviceId:
                      type: string
                      nullable: false
                      description: The id of the service this Provided Service fulfills
                      default: serviceId
                    group:
                      type: string
                      nullable: false
                      description: The group the Provided Service belongs to
                      default: group
                    displayName:
                      type: string
                      nullable: false
                      description: The human-readable name of the Provided Service
                      default: serviceName
                    description:
                      type: string
                      nullable: true
                      description: The human-readable description for the Provided Service
                      default: ...
                    defaultService:
                      type: boolean
                      nullable: true
                      description: Whether the service should be considered default (automatically included) in the UI
                      default: false
                    values:
                      type: array
                      nullable: true
                      description: The property values to use to replace placeholders in the Provided Service's portion of a Provision Request Template
                      items:
                        allOf:
                          - description: The value to use to reify a specific property within the context of a Provided Service
                          - type: object
                            properties:
                              name:
                                type: string
                                nullable: false
                                description: The name/id of the property
                              value:
                                type: array
                                nullable: false
                                items:
                                  type: string
                                  description: 'The values of the property (array of one element if array=false, multiple otherwise)'
                        example:
                          name: clock.ntp.host
                          value:
                            - 0.pool.ntp.org
              example:
                serviceId: org.eclipse.kura.clock.ClockService
                group: TheOnlyGroup
                displayName: My Own Very First Provided Service
                description: Cannot think of one
                defaultService: false
                values:
                  - name: clock.ntp.host
                    value:
                      - 0.pool.ntp.org
                  - name: clock.ntp.port
                    value:
                      - '123'
      responses:
        '200':
          description: The minimum details about the Provided Service created or updated
          content:
            application/json:
              schema:
                allOf:
                  - allOf:
                      - description: The simplified view of a Provisioning Template's Provided Service
                      - type: object
                        properties:
                          serviceId:
                            type: string
                            nullable: false
                            description: The id of the service this Provided Service fulfills
                            default: serviceId
                          group:
                            type: string
                            nullable: false
                            description: The group the Provided Service belongs to
                            default: group
                          groupDetails:
                            type: object
                            nullable: false
                            properties:
                              allOf:
                                $ref: '#/paths/~1%7BscopeId%7D~1provisionGroups/post/requestBody/content/application~1json/schema'
                          displayName:
                            type: string
                            nullable: false
                            description: The human-readable name of the Provided Service
                            default: serviceName
                          description:
                            type: string
                            nullable: true
                            description: The human-readable description for the Provided Service
                            default: ...
                          defaultService:
                            type: boolean
                            nullable: true
                            description: Whether the service should be considered default (automatically included) in the UI
                            default: false
                    example:
                      serviceId: org.eclipse.kura.clock.ClockService
                      group: TheOnlyGroup
                      groupDetails:
                        name: TheOnlyGroup
                        displayName: The only group available
                        description: ...
                      displayName: My Own Very First Provided Service
                      description: Cannot think of one
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/provisionTemplates/{templateId}/providedServices':
    get:
      tags:
        - Bulk Provision Request
      summary: fetch Provided Services for the specified Template
      description: Fetches all specified Provided Services for the specified Provision Request Template
      operationId: fetchProvidedService
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1provisionTemplates~1%7BtemplateId%7D/get/parameters/1'
      responses:
        '200':
          description: The list of available Provided Services
          content:
            application/json:
              schema:
                $ref: '#/paths/~1%7BscopeId%7D~1provisionTemplates~1default~1providedServices/get/responses/200/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Bulk Provision Request
      summary: Creates or updates a Provided Service for the specified Template
      description: Creates or updates a Provided Service for the specified Template
      operationId: upsertProvidedService
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1provisionTemplates~1%7BtemplateId%7D/get/parameters/1'
      requestBody:
        description: The details necessary to create or update the Provided Service
        content:
          application/json:
            schema:
              $ref: '#/paths/~1%7BscopeId%7D~1provisionTemplates~1default~1providedServices/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: The minimum details about the Provided Service created or updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1%7BscopeId%7D~1provisionTemplates~1default~1providedServices/post/responses/200/content/application~1json/schema/allOf/0'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/provisionTemplates/default/providedServices/{serviceId}/{groupId}':
    get:
      tags:
        - Bulk Provision Request
      summary: Fetch Default Template's Provided Service details
      description: 'Fetches in detail the specified Provided Service, for the Default Template'
      operationId: getDefaultTemplateProvidedService
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: serviceId
          in: path
          description: The id of the Services that the Provided Service configures
          schema:
            allOf:
              - type: string
          required: true
        - name: groupId
          in: path
          description: The group the Provided Service belongs to
          schema:
            allOf:
              - type: string
          required: true
      responses:
        '200':
          description: the detailed view of the Provided Service
          content:
            application/json:
              schema:
                allOf:
                  - description: The detailed view of a Provisioning Template's Provided Service
                  - type: object
                    properties:
                      templateId:
                        allOf:
                          - $ref: '#/components/schemas/kapuaId'
                          - nullable: false
                          - description: The id of the template this Provided Service serves
                      serviceId:
                        type: string
                        nullable: false
                        description: The id of the service this Provided Service fulfills
                        default: serviceId
                      group:
                        type: string
                        nullable: false
                        description: The group the Provided Service belongs to
                        default: group
                      groupDetails:
                        type: object
                        nullable: false
                        properties:
                          allOf:
                            $ref: '#/paths/~1%7BscopeId%7D~1provisionGroups/post/requestBody/content/application~1json/schema'
                      displayName:
                        type: string
                        nullable: false
                        description: The human-readable name of the Provided Service
                        default: serviceName
                      description:
                        type: string
                        nullable: true
                        description: The human-readable description for the Provided Service
                        default: ...
                      defaultService:
                        type: boolean
                        nullable: true
                        description: Whether the service should be considered default (automatically included) in the UI
                        default: false
                      values:
                        type: array
                        description: The property values to use to replace placeholders in the Provided Service's portion of a Provision Request Template
                        items:
                          $ref: '#/paths/~1%7BscopeId%7D~1provisionTemplates~1default~1providedServices/post/requestBody/content/application~1json/schema/allOf/1/properties/values/items'
                example:
                  templateId: X7NgjlhlMQk
                  serviceId: org.eclipse.kura.clock.ClockService
                  group: TheOnlyGroup
                  groupDetails:
                    name: TheOnlyGroup
                    displayName: The only group available
                    description: ...
                  displayName: My Own Very First Provided Service
                  description: Cannot think of one
                  defaultService: false
                  values:
                    - name: clock.ntp.host
                      value:
                        - 0.pool.ntp.org
                    - name: clock.ntp.port
                      value:
                        - '123'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Bulk Provision Request
      summary: Deletes Default Template's Provided Services
      description: Deletes the Default Provision Request Template's Provided Services specified
      operationId: deleteDefaultTemplateProvidedService
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: serviceId
          in: path
          description: The id of the Services that the Provided Service configures
          schema:
            allOf:
              - type: string
          required: true
        - name: groupId
          in: path
          description: The group the Provided Service belongs to
          schema:
            allOf:
              - type: string
          required: true
      responses:
        '200':
          description: The deleted Provided Service
          content:
            application/json:
              schema:
                $ref: '#/paths/~1%7BscopeId%7D~1provisionTemplates~1default~1providedServices~1%7BserviceId%7D~1%7BgroupId%7D/get/responses/200/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Bulk Provision Request
      summary: Change "default" status
      description: Alters the "default" status of the provided service
      operationId: setDefaultStatusDefaultTemplateProvidedService
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: serviceId
          in: path
          description: The id of the Services that the Provided Service configures
          schema:
            allOf:
              - type: string
          required: true
        - name: groupId
          in: path
          description: The group the Provided Service belongs to
          schema:
            allOf:
              - type: string
          required: true
        - name: defaultService
          in: query
          description: The new status of the default attribute for the provided service
          schema:
            type: boolean
          required: true
      responses:
        '200':
          description: The updated Provided Service
          content:
            application/json:
              schema:
                $ref: '#/paths/~1%7BscopeId%7D~1provisionTemplates~1default~1providedServices~1%7BserviceId%7D~1%7BgroupId%7D/get/responses/200/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/provisionTemplates/{templateId}/providedServices/{serviceId}/{groupId}':
    get:
      tags:
        - Bulk Provision Request
      summary: Fetch Default Template's Provided Service details
      description: 'Fetches in detail the specified Provided Service, for the specified Template'
      operationId: getProvidedService
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1provisionTemplates~1%7BtemplateId%7D/get/parameters/1'
        - name: serviceId
          in: path
          description: The id of the Services that the Provided Service configures
          schema:
            allOf:
              - type: string
          required: true
        - name: groupId
          in: path
          description: The group the Provided Service belongs to
          schema:
            allOf:
              - type: string
          required: true
      responses:
        '200':
          description: the detailed view of the Provided Service
          content:
            application/json:
              schema:
                $ref: '#/paths/~1%7BscopeId%7D~1provisionTemplates~1default~1providedServices~1%7BserviceId%7D~1%7BgroupId%7D/get/responses/200/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Bulk Provision Request
      summary: Deletes Template's Provided Services
      description: Deletes the specified Provision Request Template's Provided Services
      operationId: deleteProvidedService
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1provisionTemplates~1%7BtemplateId%7D/get/parameters/1'
        - name: serviceId
          in: path
          description: The id of the Services that the Provided Service configures
          schema:
            allOf:
              - type: string
          required: true
        - name: groupId
          in: path
          description: The group the Provided Service belongs to
          schema:
            allOf:
              - type: string
          required: true
      responses:
        '200':
          description: The deleted Provided Service
          content:
            application/json:
              schema:
                $ref: '#/paths/~1%7BscopeId%7D~1provisionTemplates~1default~1providedServices~1%7BserviceId%7D~1%7BgroupId%7D/get/responses/200/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Bulk Provision Request
      summary: Change "default" status
      description: Alters the "default" status of the provided service
      operationId: setDefaultStatusProvidedService
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1provisionTemplates~1%7BtemplateId%7D/get/parameters/1'
        - name: serviceId
          in: path
          description: The id of the Services that the Provided Service configures
          schema:
            allOf:
              - type: string
          required: true
        - name: groupId
          in: path
          description: The group the Provided Service belongs to
          schema:
            allOf:
              - type: string
          required: true
        - name: defaultService
          in: query
          description: The new status of the default attribute for the provided service
          schema:
            type: boolean
          required: true
      responses:
        '200':
          description: The updated Provided Service
          content:
            application/json:
              schema:
                $ref: '#/paths/~1%7BscopeId%7D~1provisionTemplates~1default~1providedServices~1%7BserviceId%7D~1%7BgroupId%7D/get/responses/200/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/bulkProvisionRequests':
    post:
      tags:
        - Bulk Provision Request
      summary: Create Provision Requests in bulk
      description: 'Creates multiple Provision Requests in bulk, one for each of the required Devices, reifying for each one the provided Template, according to the list of selected Provided Services'
      operationId: createBulk
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing all that is necessary to bulk create multiple Provision Requests
        content:
          application/json:
            schema:
              description: The information necessary to create multiple Provision Request in bulk
              allOf:
                - type: object
                  properties:
                    devices:
                      type: array
                      nullable: false
                      description: The list of devices to create Provision Requests for
                      items:
                        description: The minimum information needed to identify a specific Device to create a Provision Request for
                        allOf:
                          - type: object
                            properties:
                              clientId:
                                allOf:
                                  - type: string
                                  - nullable: false
                                  - description: The client id of the device
                                  - default: deviceClientId
                              serialNo:
                                allOf:
                                  - type: string
                                  - nullable: false
                                  - description: The serial number of the device
                                  - default: deviceSerialNumber
                        example:
                          clientId: testDevice
                          serialNo: testSN
                    templateId:
                      allOf:
                        - $ref: '#/components/schemas/kapuaId'
                        - nullable: false
                        - description: The id of the template to use to create actual requests
                    providedServices:
                      type: array
                      nullable: false
                      description: The list of provided services to use to reify the template
                      items:
                        description: 'The minimum information needed to identify a specific Provided Service, used to reify a portion (service) of a Template'
                        allOf:
                          - type: object
                            properties:
                              serviceId:
                                allOf:
                                  - type: string
                                  - nullable: false
                                  - description: The id of the service this Provided Service provides the property values for
                              group:
                                allOf:
                                  - type: string
                                  - nullable: false
                                  - description: The group the Provided Service belongs to
                        example:
                          serviceId: org.eclipse.kura.clock.ClockService
                          group: TheOnlyGroup
              example:
                devices:
                  - clientId: testDevice
                    serialNo: testSN
                  - clientId: anotherDevice
                    serialNo: anotherSerialNumber
                templateId: X7NgjlhlMQk
                providedServices:
                  - serviceId: org.eclipse.kura.clock.ClockService
                    group: TheOnlyGroup
      responses:
        '200':
          description: The aggregated result of the bulk request
          content:
            application/json:
              schema:
                description: The result of a bulk provisioning request
                allOf:
                  - type: object
                    properties:
                      successfulRequests:
                        type: array
                        items:
                          description: The individual device's successful result of a bulk provisioning request
                          allOf:
                            - type: object
                              properties:
                                device:
                                  description: 'The coordinates of the device, among those included in the bulk request'
                                  allOf:
                                    - $ref: '#/paths/~1%7BscopeId%7D~1bulkProvisionRequests/post/requestBody/content/application~1json/schema/allOf/0/properties/devices/items'
                                provisionRequestId:
                                  description: The id of the provisioning request created
                                  allOf:
                                    - $ref: '#/components/schemas/kapuaId'
                      failedRequests:
                        type: array
                        items:
                          allOf:
                            - description: The individual device's failed result of a bulk provisioning request
                            - type: object
                              properties:
                                device:
                                  description: 'The coordinates of the device, among those included in the bulk request'
                                  allOf:
                                    - $ref: '#/paths/~1%7BscopeId%7D~1bulkProvisionRequests/post/requestBody/content/application~1json/schema/allOf/0/properties/devices/items'
                                reason:
                                  type: string
                                  description: The main reason for the failure
                example:
                  successfulRequests:
                    - device: null
                      clientId: testDevice123456
                      serialNo: testSN
                      provisionRequestId: Ku9KyVyTiRA
                  failedRequests:
                    - device:
                        clientId: anotherDevice
                        serialNo: anotherSerialNumber
                      reason: Client ID anotherDevice is already used for provisioning request
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/routes':
    get:
      tags:
        - Route
      summary: Get all the Routes
      operationId: routeList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: templateId
          in: query
          description: An optional string to filter Routes according to their Template
          schema:
            type: string
        - name: status
          in: query
          description: An optional string to filter Routes according to their Status
          schema:
            type: string
            enum:
              - enabled
              - disabled
        - name: forwardable
          in: query
          description: An optional string to filter Routes according to their Forwardable flag
          schema:
            type: boolean
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - name: matchTerm
          in: query
          description: |
            A term to match on different fields. Every entity whose at least one of the specified fields starts with this value will be matched.
            Matches on the following fields:

              - NAME
              - TEMPLATEID
          schema:
            type: string
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Routes available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routeListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Get all the Routes in the given Scope
    post:
      tags:
        - Route
      summary: Create a new Route
      operationId: routeCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing the properties for the new Route to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/routeCreator'
            examples:
              kafka:
                description: A Route to forward messages to a Kafka queue
                summary: Kafka Route
                value:
                  type: routeCreator
                  name: kafka-route
                  templateId: kafka-v1
                  parameters:
                    - name: REDELIVERY_DELAY
                      value: '20'
                    - name: MAXIMUM_REDELIVERIES
                      value: '5'
                    - name: MAXIMUM_REDELIVERY_DELAY
                      value: '2000'
                    - name: KAFKA_BROKERS
                      value: 'localhost:9092'
                    - name: KAFKA_HEADER_PROPERTY
                      value: evaluatedKafkaEndPoint
                    - name: KAFKA_ORIGINAL_TOPIC
                      value: '$simple{in.header.originalTopic}'
                    - name: KAFKA_MESSAGE_CONVERTER
                      value: none
                    - name: KAFKA_MESSAGE_CONVERTER_CONFIGURATION
                      value: none
                    - name: KAFKA_KEY_SERIALIZER
                      value: org.apache.kafka.common.serialization.StringSerializer
                    - name: KAFKA_SERIALIZER
                      value: org.apache.kafka.common.serialization.StringSerializer
                    - name: KAFKA_URL_OPTIONS
                      value: ''
                    - name: KAFKA_TOPIC_MATCHING
                      value: '.*,${ACCOUNT_NAME}'
                  forwardable: true
                  status: ENABLED
              rest:
                description: A Route to forward messages to a REST Endpoint
                summary: REST Route
                value:
                  type: routeCreator
                  name: rest-route
                  templateId: rest-http4-v1
                  parameters:
                    - name: REDELIVERY_DELAY
                      value: '20'
                    - name: MAXIMUM_REDELIVERIES
                      value: '5'
                    - name: MAXIMUM_REDELIVERY_DELAY
                      value: '2000'
                    - name: REST_SERVER_NAME
                      value: 127.0.0.1
                    - name: REST_SERVER_PORT
                      value: '8080'
                    - name: REST_SCHEMA
                      value: https
                    - name: REST_AUTHENTICATION_TYPE
                      value: Basic
                    - name: REST_AUTHENTICATION_PARAMETERS
                      value: ''
                    - name: REST_ACTION
                      value: POST
                    - name: REST_HEADER_PROPERTY
                      value: evaluatedRestEndPoint
                    - name: REST_ORIGINAL_TOPIC
                      value: '$simple{in.header.originalTopic}'
                    - name: REST_MESSAGE_CONVERTER
                      value: json
                    - name: REST_MESSAGE_CONVERTER_CONFIGURATION
                      value: ''
                    - name: REST_URL_OPTIONS
                      value: ''
                    - name: REST_TOPIC_MATCHING
                      value: '.*,${ACCOUNT}'
                    - name: REST_SSL_KEYSTORE_KEY
                      value: ''
                    - name: REST_SSL_KEYSTORE_PASSWORD
                      value: ''
                    - name: REST_SSL_KEYSTORE_CERT
                      value: ''
                    - name: REST_SSL_TRUSTSTORE_CERT
                      value: ''
                  forwardable: false
                  status: ENABLED
        required: true
      responses:
        '200':
          description: The Route that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/route'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/routes/{routeId}':
    get:
      tags:
        - Route
      summary: Get a single Route
      operationId: routeGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: routeId
          in: path
          description: The ID of the Route on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/route'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: 'Get the details of a given Route, according to the `routeId` path parameter.'
    put:
      tags:
        - Route
      summary: Update a single Route
      operationId: routeUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1routes~1%7BrouteId%7D/get/parameters/1'
      requestBody:
        description: An object containing the new properties for the Route to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/route'
            examples:
              kafka:
                description: Update a Kafka Route
                summary: Kafka Route
                value:
                  type: route
                  name: kafka-route
                  templateId: kafka-v1
                  parameters:
                    - name: REDELIVERY_DELAY
                      value: '20'
                    - name: MAXIMUM_REDELIVERIES
                      value: '5'
                    - name: MAXIMUM_REDELIVERY_DELAY
                      value: '2000'
                    - name: KAFKA_BROKERS
                      value: 'localhost:9092'
                    - name: KAFKA_HEADER_PROPERTY
                      value: evaluatedKafkaEndPoint
                    - name: KAFKA_ORIGINAL_TOPIC
                      value: '$simple{in.header.originalTopic}'
                    - name: KAFKA_MESSAGE_CONVERTER
                      value: none
                    - name: KAFKA_MESSAGE_CONVERTER_CONFIGURATION
                      value: none
                    - name: KAFKA_KEY_SERIALIZER
                      value: org.apache.kafka.common.serialization.StringSerializer
                    - name: KAFKA_SERIALIZER
                      value: org.apache.kafka.common.serialization.StringSerializer
                    - name: KAFKA_URL_OPTIONS
                      value: ''
                    - name: KAFKA_TOPIC_MATCHING
                      value: '.*,${ACCOUNT_NAME}'
                  forwardable: true
                  status: ENABLED
                  optlock: 1
              rest:
                description: Update a REST Route
                summary: REST Route
                value:
                  type: route
                  name: rest-route
                  templateId: rest-http4-v1
                  parameters:
                    - name: REDELIVERY_DELAY
                      value: '20'
                    - name: MAXIMUM_REDELIVERIES
                      value: '5'
                    - name: MAXIMUM_REDELIVERY_DELAY
                      value: '2000'
                    - name: REST_SERVER_NAME
                      value: 127.0.0.1
                    - name: REST_SERVER_PORT
                      value: '8080'
                    - name: REST_SCHEMA
                      value: https
                    - name: REST_AUTHENTICATION_TYPE
                      value: Basic
                    - name: REST_AUTHENTICATION_PARAMETERS
                      value: ''
                    - name: REST_ACTION
                      value: POST
                    - name: REST_HEADER_PROPERTY
                      value: evaluatedRestEndPoint
                    - name: REST_ORIGINAL_TOPIC
                      value: '$simple{in.header.originalTopic}'
                    - name: REST_MESSAGE_CONVERTER
                      value: json
                    - name: REST_MESSAGE_CONVERTER_CONFIGURATION
                      value: ''
                    - name: REST_URL_OPTIONS
                      value: ''
                    - name: REST_TOPIC_MATCHING
                      value: '.*,${ACCOUNT}'
                    - name: REST_SSL_KEYSTORE_KEY
                      value: ''
                    - name: REST_SSL_KEYSTORE_PASSWORD
                      value: ''
                    - name: REST_SSL_KEYSTORE_CERT
                      value: ''
                    - name: REST_SSL_TRUSTSTORE_CERT
                      value: ''
                  forwardable: false
                  status: ENABLED
                  optlock: 1
        required: true
      responses:
        '200':
          description: The details of the updated Route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/route'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: 'Update the details of a given Route, according to the `routeId` path parameter.'
    delete:
      tags:
        - Route
      summary: Delete a single Route
      operationId: routeDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1routes~1%7BrouteId%7D/get/parameters/1'
      responses:
        '204':
          description: The Route has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: 'Delete the given route, according to the `routeId` path parameter.'
  '/{scopeId}/routes/_count':
    post:
      tags:
        - Route
      summary: Count the Routes
      operationId: routeCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Returns the count of how many Routes are present in the given Scope
  '/{scopeId}/routes/_query':
    post:
      tags:
        - Route
      summary: Query the Routes
      operationId: routeQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routeListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Returns a list of the Routes matching the given query in the Scope. Predicates are not currently supported.
  '/{scopeId}/routeTemplates':
    get:
      tags:
        - Route Template
      summary: Get all the Route Templates
      operationId: routeTemplateList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Route Templats available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routeTemplateListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Get all the Route Templates in the given Scope
  '/{scopeId}/routeTemplates/{routeTemplateId}':
    get:
      tags:
        - Route Template
      summary: Get a single Route Template
      operationId: routeTemplateGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: routeTemplateId
          in: path
          description: The ID of the Route Template on which to perform the operation
          schema:
            type: string
          required: true
      responses:
        '200':
          description: The details of the desired Route Template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routeTemplate'
              examples:
                kafka:
                  description: The Kafka Route Template
                  summary: Kafka Template
                  value:
                    type: routeTemplate
                    name: kafka-v1
                    routeTemplateParameters:
                      - name: REDELIVERY_DELAY
                        type: String
                        defaultValue: '20'
                      - name: MAXIMUM_REDELIVERIES
                        type: String
                        defaultValue: '5'
                      - name: MAXIMUM_REDELIVERY_DELAY
                        type: String
                        defaultValue: '2000'
                      - name: KAFKA_BROKERS
                        type: String
                        defaultValue: 'localhost:9092'
                      - name: KAFKA_HEADER_PROPERTY
                        type: String
                        defaultValue: evaluatedKafkaEndPoint
                      - name: KAFKA_ORIGINAL_TOPIC
                        type: String
                        defaultValue: '$simple{in.header.originalTopic}'
                      - name: KAFKA_MESSAGE_CONVERTER
                        type: String
                        defaultValue: none
                      - name: KAFKA_MESSAGE_CONVERTER_CONFIGURATION
                        type: String
                        defaultValue: none
                      - name: KAFKA_KEY_SERIALIZER
                        type: String
                        defaultValue: org.apache.kafka.common.serialization.StringSerializer
                      - name: KAFKA_SERIALIZER
                        type: String
                        defaultValue: org.apache.kafka.common.serialization.StringSerializer
                      - name: KAFKA_URL_OPTIONS
                        type: String
                        defaultValue: ''
                      - name: KAFKA_TOPIC_MATCHING
                        type: TextArea
                        defaultValue: '.*,${ACCOUNT_NAME}'
                rest:
                  description: The REST Route Template
                  summary: REST Template
                  value:
                    type: routeTemplate
                    name: rest-http4-v1
                    routeTemplateParameters:
                      - name: REDELIVERY_DELAY
                        type: String
                        defaultValue: '20'
                      - name: MAXIMUM_REDELIVERIES
                        type: String
                        defaultValue: '5'
                      - name: MAXIMUM_REDELIVERY_DELAY
                        type: String
                        defaultValue: '2000'
                      - name: REST_SERVER_NAME
                        type: String
                        defaultValue: 127.0.0.1
                      - name: REST_SERVER_PORT
                        type: String
                        defaultValue: '8080'
                      - name: REST_SCHEMA
                        type: String
                        defaultValue: https
                      - name: REST_AUTHENTICATION_TYPE
                        type: String
                        defaultValue: Basic
                      - name: REST_AUTHENTICATION_PARAMETERS
                        type: masked
                        defaultValue: ''
                      - name: REST_ACTION
                        type: String
                        defaultValue: POST
                      - name: REST_HEADER_PROPERTY
                        type: String
                        defaultValue: evaluatedRestEndPoint
                      - name: REST_ORIGINAL_TOPIC
                        type: String
                        defaultValue: '$simple{in.header.originalTopic}'
                      - name: REST_MESSAGE_CONVERTER
                        type: String
                        defaultValue: json
                      - name: REST_MESSAGE_CONVERTER_CONFIGURATION
                        type: TextArea
                        defaultValue: ''
                      - name: REST_URL_OPTIONS
                        type: String
                        defaultValue: ''
                      - name: REST_TOPIC_MATCHING
                        type: TextArea
                        defaultValue: '.*,${ACCOUNT}'
                      - name: REST_SSL_KEYSTORE_KEY
                        type: TextArea
                        defaultValue: ''
                      - name: REST_SSL_KEYSTORE_PASSWORD
                        type: TextArea
                        defaultValue: ''
                      - name: REST_SSL_KEYSTORE_CERT
                        type: TextArea
                        defaultValue: ''
                      - name: REST_SSL_TRUSTSTORE_CERT
                        type: TextArea
                        defaultValue: ''
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: 'Get the details of a given Route Template, according to the `routeTemplateId` path parameter.'
  '/{scopeId}/roles':
    get:
      tags:
        - Role
      summary: Get all the roles
      operationId: roleList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: name
          in: query
          description: The role name to filter results
          schema:
            type: string
        - name: matchTerm
          in: query
          description: |
            A term to match on different fields. Every entity whose at least one of the specified fields starts with this value will be matched.
            Matches on the following fields:

              - DESCRIPTION
              - NAME
          schema:
            type: string
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/sortParam'
        - name: sortDir
          in: query
          description: 'The sort direction. Can be ASCENDING (default), DESCENDING. Case-insensitive (except for "clientId" parameter).'
          schema:
            type: string
            enum:
              - ASCENDING
              - DESCENDING
            default: ASCENDING
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Roles available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roleListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Role
      summary: Create a new Role
      operationId: roleCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing the properties for the new Role to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roleCreator'
        required: true
      responses:
        '201':
          description: The Role that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/role'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/roles/{roleId}':
    get:
      tags:
        - Role
      summary: Get a single Role
      operationId: roleGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: roleId
          in: path
          description: The ID of the Role on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/role'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Role
      summary: Update a single Role
      operationId: roleUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1roles~1%7BroleId%7D/get/parameters/1'
      requestBody:
        description: An object containing the new properties for the Role to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/role'
            example:
              optlock: 1
              name: new-role-2
              description: A new Description for a new Role
        required: true
      responses:
        '200':
          description: The details of the updated Role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/role'
              example:
                type: role
                id: KmhOD4JHfwk
                scopeId: AQ
                createdOn: '2019-09-16T07:33:26.719Z'
                createdBy: AQ
                modifiedOn: '2019-09-16T07:41:37.001Z'
                modifiedBy: AQ
                optlock: 2
                name: new-role-2
                description: A new Description for a new Role
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Role
      summary: Delete a single Role
      operationId: roleDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1roles~1%7BroleId%7D/get/parameters/1'
      responses:
        '204':
          description: The Role has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/roles/_count':
    post:
      tags:
        - Role
      summary: Count the Roles
      operationId: roleCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/roles/_query':
    post:
      tags:
        - Role
      summary: Query the Roles
      operationId: roleQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roleListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/roles/{roleId}/permissions':
    get:
      tags:
        - Role
      summary: Get all the Role Permissions
      operationId: rolePermissionList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1roles~1%7BroleId%7D/get/parameters/1'
        - name: name
          in: query
          description: The domain name to filter results
          schema:
            type: string
        - name: action
          in: query
          description: The action to filter results
          schema:
            type: string
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the RolePermissions available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rolePermissionListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Role
      summary: Create a new RolePermission
      operationId: rolePermissionCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1roles~1%7BroleId%7D/get/parameters/1'
      requestBody:
        description: An object containing the properties for the new RolePermission to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rolePermissionCreator'
            example:
              permission:
                domain: account
                action: read
                forwardable: true
        required: true
      responses:
        '201':
          description: The Role Permissionthat has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rolePermission'
              example:
                type: rolePermission
                id: BpbQqk31GLc
                scopeId: AQ
                createdOn: '2019-09-16T07:49:51.117Z'
                createdBy: AQ
                roleId: OYLRT30Z9sA
                permission:
                  domain: domain
                  action: read
                  forwardable: true
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/entityUniqueness'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/roles/{roleId}/permissions/{rolePermissionId}':
    get:
      tags:
        - Role
      summary: Get a single RolePermission
      operationId: rolePermissionGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1roles~1%7BroleId%7D/get/parameters/1'
        - name: rolePermissionId
          in: path
          description: The ID of the RolePermission on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired RolePermission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rolePermission'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Role
      summary: Delete a single RolePermission
      operationId: rolePermissionDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1roles~1%7BroleId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1roles~1%7BroleId%7D~1permissions~1%7BrolePermissionId%7D/get/parameters/2'
      responses:
        '204':
          description: The RolePermission has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/roles/{roleId}/permissions/_count':
    post:
      tags:
        - Role
      summary: Count the RolePermissions
      operationId: rolePermissionCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1roles~1%7BroleId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/roles/{roleId}/permissions/_query':
    post:
      tags:
        - Role
      summary: Query the RolePermissions
      operationId: rolePermissionQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1roles~1%7BroleId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rolePermissionListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/roles/{roleId}/users':
    get:
      tags:
        - Role
      summary: Get all the Users for the given Role
      operationId: roleListUsers
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1roles~1%7BroleId%7D/get/parameters/1'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Users assigned to the given Role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/serviceConfigurations':
    get:
      tags:
        - Service Configuration
      summary: Read multiple Configurations
      operationId: serviceConfigurationsRead
      parameters:
        - $ref: '#/components/parameters/scopeId'
      responses:
        '200':
          description: The list of the Configurations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceComponentConfigurations'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Service Configuration
      summary: Update multiple Configurations
      operationId: serviceConfigurationsWrite
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serviceComponentConfigurationsInput'
        required: true
      responses:
        '200':
          description: The list of the Configurations
        '400':
          description: An illegal argument has been passed to the operation OR the resource cannot be updated for limits imposed on it (in this scope or parent scope)
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/illegalArgumentExceptionInfo'
                  - $ref: '#/components/schemas/illegalNullArgumentExceptionInfo'
                  - $ref: '#/components/schemas/serviceConfigurationLimitExceededExceptionInfo'
                  - $ref: '#/components/schemas/serviceConfigurationParentLimitExceededExceptionInfo'
            application/xml:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/illegalArgumentExceptionInfo'
                  - $ref: '#/components/schemas/illegalNullArgumentExceptionInfo'
                  - $ref: '#/components/schemas/serviceConfigurationParentLimitExceededExceptionInfo'
                  - $ref: '#/components/schemas/serviceConfigurationLimitExceededExceptionInfo'
                xml:
                  name: serviceConfigurationLimitExceededExceptionInfo
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          description: The requested update is forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/subjectUnauthorizedExceptionInfo'
                  - $ref: '#/components/schemas/serviceConfigurationUpdateForbiddenExceptionInfo'
            application/xml:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/subjectUnauthorizedExceptionInfo'
                  - $ref: '#/components/schemas/serviceConfigurationUpdateForbiddenExceptionInfo'
                xml:
                  name: serviceConfigurationUpdateForbiddenExceptionInfo
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/serviceConfigurations/{componentId}':
    get:
      tags:
        - Service Configuration
      summary: Read a single Configuration
      operationId: serviceConfigurationRead
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: componentId
          in: path
          description: The ID of the Component on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The Configuration details of a single Service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceComponentConfigurations'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Service Configuration
      summary: Update a single Configuration
      operationId: serviceConfigurationWrite
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1serviceConfigurations~1%7BcomponentId%7D/get/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serviceComponentConfigurationInput'
        required: true
      responses:
        '200':
          description: Updates the Configuration details of a single Service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceComponentConfiguration'
        '400':
          description: An illegal argument has been passed to the operation OR the resource cannot be updated for limits imposed on it (in this scope or parent scope)
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/illegalArgumentExceptionInfo'
                  - $ref: '#/components/schemas/illegalNullArgumentExceptionInfo'
                  - $ref: '#/components/schemas/serviceConfigurationLimitExceededExceptionInfo'
                  - $ref: '#/components/schemas/serviceConfigurationParentLimitExceededExceptionInfo'
            application/xml:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/illegalArgumentExceptionInfo'
                  - $ref: '#/components/schemas/illegalNullArgumentExceptionInfo'
                  - $ref: '#/components/schemas/serviceConfigurationLimitExceededExceptionInfo'
                  - $ref: '#/components/schemas/serviceConfigurationParentLimitExceededExceptionInfo'
                xml:
                  name: serviceConfigurationLimitExceededExceptionInfo
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          description: The requested update is forbidden
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/subjectUnauthorizedExceptionInfo'
                  - $ref: '#/components/schemas/serviceConfigurationUpdateForbiddenExceptionInfo'
            application/xml:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/subjectUnauthorizedExceptionInfo'
                  - $ref: '#/components/schemas/serviceConfigurationUpdateForbiddenExceptionInfo'
                xml:
                  name: serviceConfigurationUpdateForbiddenExceptionInfo
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/streams/control/messages':
    post:
      tags:
        - Stream
      summary: Publish a Control Message
      description: |
        Publishes a message to a topic composed of $EDC / [account-name] / [client-id] / [semantic-parts].
        This API is only for support of legacy use cases; availability is restricted at the account level.
      operationId: streamsControlMessage
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/controlMessage'
        required: true
      responses:
        '204':
          description: Control Message sent
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/conflictDeviceNotConnected'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/streams/messages':
    post:
      tags:
        - Stream
      summary: Publish a message
      operationId: streamMessage
      description: 'Publishes a message to a topic composed of [account-name] / [client-id] / [semantic-parts]'
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: timeout
          in: query
          description: The timeout for the request in milliseconds
          schema:
            type: integer
            default: 30000
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataMessage'
            example:
              capturedOn: '2019-09-12T09:25:05.096Z'
              channel:
                type: kapuaDataChannel
                semanticParts:
                  - heater
                  - data
              clientId: Client-Id-1
              deviceId: IaIA6xbNR7E
              payload:
                metrics:
                  - valueType: string
                    value: 5
                    name: temperatureExternal
                  - valueType: string
                    value: 20
                    name: temperatureInternal
                  - valueType: string
                    value: 30
                    name: temperatureExhaust
                  - valueType: string
                    value: 0
                    name: errorCode
              receivedOn: '2019-09-12T09:25:05.102Z'
              sentOn: '2019-09-12T09:25:05.096Z'
              timestamp: '2019-09-12T09:25:05.096Z'
      responses:
        '204':
          description: The message has been sent successfully
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  /sys-info:
    get:
      tags:
        - System Info
      summary: Get the system info
      responses:
        '200':
          description: System info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/systemInfo'
  '/{scopeId}/tags':
    get:
      tags:
        - Tag
      summary: Get all the Tags
      operationId: tagList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: name
          in: query
          description: The tag name to filter results
          schema:
            type: string
        - $ref: '#/components/parameters/sortParam'
        - name: sortDir
          in: query
          description: 'The sort direction. Can be ASCENDING (default), DESCENDING. Case-insensitive (except for "clientId" parameter).'
          schema:
            type: string
            enum:
              - ASCENDING
              - DESCENDING
            default: ASCENDING
        - name: matchTerm
          in: query
          description: |
            A term to match on different fields. Every entity whose at least one of the specified fields starts with this value will be matched.
            Matches on the following fields:

              - DESCRIPTION
              - NAME
          schema:
            type: string
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Tags available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tagListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Tag
      summary: Create a new Tag
      operationId: tagCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing the properties for the new Tag to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tagCreator'
        required: true
      responses:
        '201':
          description: The Tag that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tag'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/tags/{tagId}':
    get:
      tags:
        - Tag
      summary: Get a single Tag
      operationId: tagGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: tagId
          in: path
          description: The ID of the Tag on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired Tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tag'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - Tag
      summary: Update a single Tag
      operationId: tagUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1tags~1%7BtagId%7D/get/parameters/1'
      requestBody:
        description: An object containing the new properties for the Tag to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tag'
            example:
              optlock: 1
              name: new-tag
              description: A new Description for a new Tag
        required: true
      responses:
        '200':
          description: The details of the updated Tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tag'
              example:
                type: tag
                id: FJ6-FLuIcok
                scopeId: AQ
                createdOn: '2019-09-16T08:52:32.562Z'
                createdBy: AQ
                modifiedOn: '2019-09-16T08:55:43.719Z'
                modifiedBy: AQ
                optlock: 2
                name: new-tag
                description: A new Description for a new Tag
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Tag
      summary: Delete a single Tag
      operationId: tagDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1tags~1%7BtagId%7D/get/parameters/1'
      responses:
        '204':
          description: The Tag has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/tags/_count':
    post:
      tags:
        - Tag
      summary: Count the Tags
      operationId: tagCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/tags/_query':
    post:
      tags:
        - Tag
      summary: Query the Tags
      operationId: tagQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tagListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/users':
    get:
      tags:
        - User
      summary: Get all the Users
      operationId: userList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: name
          in: query
          description: The user name to filter results
          schema:
            type: string
        - name: matchTerm
          in: query
          description: |
            A term to match on different fields. Every entity whose at least one of the specified fields starts with this value will be matched.
            Matches on the following fields:

            - NAME
            - EMAIL
            - PHONE_NUMBER
            - DISPLAY_NAME
            - EXTERNAL_ID
            - DESCRIPTION
            - EXTERNAL_USERNAME
          schema:
            type: string
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Users available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - User
      summary: Create a new User
      operationId: userCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing the properties for the new User to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userCreator'
            examples:
              minimal:
                description: Create an User providing only the required information (name)
                value:
                  name: new-user
              complete:
                description: Create an User providing all the information
                value:
                  $ref: '#/components/schemas/userCreator'
        required: true
      responses:
        '201':
          description: The User that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
              examples:
                minimal:
                  description: An User created with only the required information (username)
                  value:
                    type: user
                    id: TvnAZL6Zzu0
                    scopeId: AQ
                    createdOn: '2019-09-11T09:07:09.853Z'
                    createdBy: AQ
                    modifiedOn: '2019-09-11T09:07:09.853Z'
                    modifiedBy: AQ
                    optlock: 1
                    name: new-user
                    status: ENABLED
                    userType: INTERNAL
                complete:
                  description: An User created providing all the information
                  value:
                    $ref: '#/components/schemas/user/allOf/2/example'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/users/{userId}':
    get:
      tags:
        - User
      summary: Get a single User
      operationId: userGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: userId
          in: path
          description: The ID of the User on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - User
      summary: Update a single User
      operationId: userUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1users~1%7BuserId%7D/get/parameters/1'
      requestBody:
        description: An object containing the new properties for the User to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
            example:
              type: user
              optlock: 2
              name: donald-duck
              displayName: Donald Duck
              email: donald.duck@duckburg.org
              phoneNumber: +1 (555) 816 1851
              status: ENABLED
              userType: INTERNAL
        required: true
      responses:
        '200':
          description: The details of the updated User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - User
      summary: Delete a single User
      operationId: userDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1users~1%7BuserId%7D/get/parameters/1'
      responses:
        '204':
          description: The User has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/users/_count':
    post:
      tags:
        - User
      summary: Count the Users
      operationId: userCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/users/_query':
    post:
      tags:
        - User
      summary: Query the Users
      operationId: userQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/users/{userId}/mfa':
    get:
      tags:
        - Users - Mfa
      summary: Get the MfaOption of this User
      operationId: userMfaOptionGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1users~1%7BuserId%7D/get/parameters/1'
      responses:
        '200':
          description: The details of the desired MfaOption
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mfaOptionCreationResponse/allOf/0'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      deprecated: true
      description: 'This resource is deprecated and will be removed in future releases. Please use POST /{scopeId}/user/mfa instead.'
      tags:
        - Users - Mfa
      summary: Create a new MfaOption
      operationId: userMfaOptionCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1users~1%7BuserId%7D/get/parameters/1'
      responses:
        '201':
          description: The MfaOption that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mfaOptionCreationResponse'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          description: The operation is forbidden for some reason
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InternalUserOnlyExceptionInfo'
                  - $ref: '#/components/schemas/subjectUnauthorizedExceptionInfo'
                  - $ref: '#/components/schemas/SelfManagedOnlyExceptionInfo'
            application/xml:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InternalUserOnlyExceptionInfo'
                  - $ref: '#/components/schemas/subjectUnauthorizedExceptionInfo'
                  - $ref: '#/components/schemas/SelfManagedOnlyExceptionInfo'
                xml:
                  name: InternalUserOnlyExceptionInfo
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - Users - Mfa
      summary: Delete a single MfaOption
      operationId: userMfaOptionDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1users~1%7BuserId%7D/get/parameters/1'
      responses:
        '204':
          description: The MfaOption has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/users/{userId}/mfa/disableTrust':
    delete:
      tags:
        - Users - Mfa
      summary: Disable trusted machine for a MfaOption
      operationId: userMfaOptionDisableTrust
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1users~1%7BuserId%7D/get/parameters/1'
      responses:
        '204':
          description: The trusted machine has been disabled for the User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mfaOptionCreationResponse/allOf/0'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  /user/mfa:
    get:
      tags:
        - User - Mfa
      summary: Get the MfaOption of this User
      operationId: mfaOptionGet
      responses:
        '200':
          description: The details of the desired MfaOption
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mfaOptionCreationResponse/allOf/0'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - User - Mfa
      summary: Activates MFA for the current user
      operationId: mfaOptionCreate
      responses:
        '201':
          description: The MfaOption that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mfaOptionCreationResponse'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - User - Mfa
      summary: Delete a single MfaOption
      operationId: mfaOptionDelete
      responses:
        '204':
          description: The MfaOption has been deleted
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  /user/mfa/disableTrust:
    delete:
      tags:
        - User - Mfa
      summary: Disable trusted machine for a MfaOption
      operationId: mfaOptionDisableTrust
      responses:
        '204':
          description: The trusted machine has been disabled for the User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mfaOptionCreationResponse/allOf/0'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/user/credentials/password':
    post:
      deprecated: true
      description: |
        Change logged user password This resource is deprecated and will be removed in future releases. Please make use of POST /user/credentials/password
      tags:
        - User Credentials
      summary: Change the current user password
      operationId: scopeIdUserPasswordChange
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/passwordChangeRequest'
      responses:
        '200':
          description: The details of the updated Credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credential'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/user/credentials/{credentialId}/_reset':
    post:
      deprecated: true
      description: |
        This resource is deprecated and will be removed in future releases. Please make use of: POST /{scopeId}/users/{userId}/credentials/password/_reset (for admins resetting a user's password) or POST /user/credentials/password (for the user changing its own password) instead
      tags:
        - User Credentials
      summary: Reset the password of a Credential
      operationId: scopeIdCredentialPasswordReset
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1credentials~1%7BcredentialId%7D/get/parameters/1'
      requestBody:
        description: The new password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/passwordResetRequest'
        required: true
      responses:
        '204':
          description: The updated Credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credential'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  /user/credentials/password:
    post:
      tags:
        - User Credentials
      summary: Change the current user password
      operationId: userPasswordChange
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/passwordChangeRequest'
      responses:
        '200':
          description: The details of the updated Credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credential'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Change logged user password
  '/user/credentials/{credentialId}/_reset':
    post:
      deprecated: true
      description: |
        This resource is deprecated and will be removed in future releases. Please make use of: POST /{scopeId}/users/{userId}/credentials/password/_reset (for admins resetting a user's password) or POST /user/credentials/password (for the user changing its own password) instead
      tags:
        - User Credentials
      summary: Reset the password of a Credential
      operationId: credentialPasswordReset
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1credentials~1%7BcredentialId%7D/get/parameters/1'
      requestBody:
        description: The new password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/passwordResetRequest'
        required: true
      responses:
        '204':
          description: The updated Credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credential'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/user/{userId}/credentials/':
    get:
      deprecated: true
      description: 'This resource is deprecated and will be removed in future releases. Please make use of /{scopeId}/users/{userId}/credentials (plural userS)'
      tags:
        - Users Credentials
      summary: Get all the Credentials for the User
      operationId: user_s_CredentialsList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1users~1%7BuserId%7D/get/parameters/1'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Credentials available for the User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credentialListResult'
              example:
                type: credentialListResult
                limitExceeded: false
                size: 2
                items:
                  - id: LgJHjS2jvdE
                    scopeId: AQ
                    createdOn: '2023-03-09T13:58:30.385Z'
                    createdBy: AQ
                    modifiedOn: '2023-03-09T13:58:30.385Z'
                    modifiedBy: AQ
                    optlock: 0
                    userId: AQ
                    credentialType: PASSWORD
                    status: ENABLED
                    expirationDate: '2023-04-09T13:58:30.385Z'
                    loginFailures: 0
                    firstLoginFailure: '2023-03-09T13:58:30.385Z'
                    loginFailuresReset: '2023-03-10T13:58:30.385Z'
                    lockoutReset: '2023-03-09T14:58:30.385Z'
                  - id: LgREjS2jadE
                    scopeId: AQ
                    createdOn: '2023-03-09T13:58:30.385Z'
                    createdBy: AQ
                    modifiedOn: '2023-03-09T13:58:30.385Z'
                    modifiedBy: AQ
                    optlock: 0
                    userId: AQ
                    credentialType: API_KEY
                    status: ENABLED
                    expirationDate: '2023-04-09T13:58:30.385Z'
                    loginFailures: 0
                    firstLoginFailure: '2023-03-09T13:58:30.385Z'
                    loginFailuresReset: '2023-03-10T13:58:30.385Z'
                    lockoutReset: '2023-03-09T14:58:30.385Z'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      deprecated: true
      description: 'This resource is deprecated and will be removed in future releases. Please make use of /{scopeId}/users/{userId}/credentials (plural userS)'
      tags:
        - Users Credentials
      summary: Create a new Credential for the User
      operationId: user_s_CredentialsCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1users~1%7BuserId%7D/get/parameters/1'
      requestBody:
        description: An object containing the properties for the new Credential to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credentialCreator'
            examples:
              password:
                description: Password
                value:
                  userId: AQ
                  credentialType: PASSWORD
                  credentialKey: New-password-123!
                  credentialStatus: ENABLED
                  expirationDate: '2019-12-31T00:00:00.000Z'
              apikey:
                description: API Key
                value:
                  userId: AQ
                  credentialType: API_KEY
                  credentialStatus: ENABLED
                  expirationDate: '2019-12-31T00:00:00.000Z'
        required: true
      responses:
        '201':
          description: The Credential that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credential'
              examples:
                Password:
                  value:
                    id: LgJHjS2jvdE
                    scopeId: AQ
                    createdOn: '2023-03-09T13:58:30.385Z'
                    createdBy: AQ
                    modifiedOn: '2023-03-09T13:58:30.385Z'
                    modifiedBy: AQ
                    optlock: 0
                    userId: AQ
                    credentialType: PASSWORD
                    status: ENABLED
                    expirationDate: '2023-04-09T13:58:30.385Z'
                    loginFailures: 0
                    firstLoginFailure: '2023-03-09T13:58:30.385Z'
                    loginFailuresReset: '2023-03-10T13:58:30.385Z'
                    lockoutReset: '2023-03-09T14:58:30.385Z'
                API Key:
                  value:
                    id: LgJHjS2jvdE
                    scopeId: AQ
                    createdOn: '2023-03-09T13:58:30.385Z'
                    createdBy: AQ
                    modifiedOn: '2023-03-09T13:58:30.385Z'
                    modifiedBy: AQ
                    credentialKey: $2a$12$BjLeC/gqcnEyk.XNo2qorul.a/v4HDuOUlfmojdSZXRSFTjymPdVm
                    optlock: 0
                    userId: AQ
                    credentialType: PASSWORD
                    status: ENABLED
                    expirationDate: '2023-04-09T13:58:30.385Z'
                    loginFailures: 0
                    firstLoginFailure: '2023-03-09T13:58:30.385Z'
                    loginFailuresReset: '2023-03-10T13:58:30.385Z'
                    lockoutReset: '2023-03-09T14:58:30.385Z'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/users/{userId}/credentials/':
    get:
      tags:
        - Users Credentials
      summary: Get all the Credentials for the User
      operationId: usersCredentialsList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1users~1%7BuserId%7D/get/parameters/1'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the Credentials available for the User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credentialListResult'
              example:
                type: credentialListResult
                limitExceeded: false
                size: 2
                items:
                  - id: LgJHjS2jvdE
                    scopeId: AQ
                    createdOn: '2023-03-09T13:58:30.385Z'
                    createdBy: AQ
                    modifiedOn: '2023-03-09T13:58:30.385Z'
                    modifiedBy: AQ
                    optlock: 0
                    userId: AQ
                    credentialType: PASSWORD
                    status: ENABLED
                    expirationDate: '2023-04-09T13:58:30.385Z'
                    loginFailures: 0
                    firstLoginFailure: '2023-03-09T13:58:30.385Z'
                    loginFailuresReset: '2023-03-10T13:58:30.385Z'
                    lockoutReset: '2023-03-09T14:58:30.385Z'
                  - id: LgREjS2jadE
                    scopeId: AQ
                    createdOn: '2023-03-09T13:58:30.385Z'
                    createdBy: AQ
                    modifiedOn: '2023-03-09T13:58:30.385Z'
                    modifiedBy: AQ
                    optlock: 0
                    userId: AQ
                    credentialType: API_KEY
                    status: ENABLED
                    expirationDate: '2023-04-09T13:58:30.385Z'
                    loginFailures: 0
                    firstLoginFailure: '2023-03-09T13:58:30.385Z'
                    loginFailuresReset: '2023-03-10T13:58:30.385Z'
                    lockoutReset: '2023-03-09T14:58:30.385Z'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - Users Credentials
      summary: Create a new Credential for the User
      operationId: usersCredentialsCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1users~1%7BuserId%7D/get/parameters/1'
      requestBody:
        description: An object containing the properties for the new Credential to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credentialCreator'
            examples:
              password:
                description: Password
                value:
                  userId: AQ
                  credentialType: PASSWORD
                  credentialKey: New-password-123!
                  credentialStatus: ENABLED
                  expirationDate: '2019-12-31T00:00:00.000Z'
              apikey:
                description: API Key
                value:
                  userId: AQ
                  credentialType: API_KEY
                  credentialStatus: ENABLED
                  expirationDate: '2019-12-31T00:00:00.000Z'
        required: true
      responses:
        '201':
          description: The Credential that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credential'
              examples:
                Password:
                  value:
                    id: LgJHjS2jvdE
                    scopeId: AQ
                    createdOn: '2023-03-09T13:58:30.385Z'
                    createdBy: AQ
                    modifiedOn: '2023-03-09T13:58:30.385Z'
                    modifiedBy: AQ
                    optlock: 0
                    userId: AQ
                    credentialType: PASSWORD
                    status: ENABLED
                    expirationDate: '2023-04-09T13:58:30.385Z'
                    loginFailures: 0
                    firstLoginFailure: '2023-03-09T13:58:30.385Z'
                    loginFailuresReset: '2023-03-10T13:58:30.385Z'
                    lockoutReset: '2023-03-09T14:58:30.385Z'
                API Key:
                  value:
                    id: LgJHjS2jvdE
                    scopeId: AQ
                    createdOn: '2023-03-09T13:58:30.385Z'
                    createdBy: AQ
                    modifiedOn: '2023-03-09T13:58:30.385Z'
                    modifiedBy: AQ
                    credentialKey: $2a$12$BjLeC/gqcnEyk.XNo2qorul.a/v4HDuOUlfmojdSZXRSFTjymPdVm
                    optlock: 0
                    userId: AQ
                    credentialType: PASSWORD
                    status: ENABLED
                    expirationDate: '2023-04-09T13:58:30.385Z'
                    loginFailures: 0
                    firstLoginFailure: '2023-03-09T13:58:30.385Z'
                    loginFailuresReset: '2023-03-10T13:58:30.385Z'
                    lockoutReset: '2023-03-09T14:58:30.385Z'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/user/{userId}/credentials/_count':
    post:
      deprecated: true
      description: 'This resource is deprecated and will be removed in future releases. Please make use of /{scopeId}/users/{userId}/credentials/_count (plural userS)'
      tags:
        - Users Credentials
      summary: Count the Credentials for the User
      operationId: user_s_CredentialsCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1users~1%7BuserId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/users/{userId}/credentials/_count':
    post:
      tags:
        - Users Credentials
      summary: Count the Credentials for the User
      operationId: usersCredentialsCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1users~1%7BuserId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/users/{userId}/credentials/password/_reset':
    post:
      description: 'Reset the password credential for the specified user, or creates one if there is none'
      tags:
        - Users Credentials
      summary: Reset the password of a user
      operationId: usersCredentialsPasswordReset
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1users~1%7BuserId%7D/get/parameters/1'
      requestBody:
        description: The new password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/passwordResetRequest'
        required: true
      responses:
        '204':
          description: The updated or created Credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credential'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/user/profile/':
    get:
      deprecated: true
      description: This resource is deprecated and will be removed in future releases. Please make use of /user/profile.
      tags:
        - User Profile
      summary: Get the User Profile
      operationId: scopeIdUserProfileGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
      responses:
        '200':
          description: The desired user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userProfile'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      deprecated: true
      description: Change logged user profile. This resource is deprecated and will be removed in future releases. Please make use of /user/profile.
      tags:
        - User Profile
      summary: Change the User Profile
      operationId: scopeIdUserProfileUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userProfile'
      responses:
        '200':
          description: The user profile has been updated
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  /user/profile/:
    get:
      tags:
        - User Profile
      summary: Get the User Profile
      operationId: userProfileGet
      responses:
        '200':
          description: The desired user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userProfile'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - User Profile
      summary: Change the User Profile
      operationId: userProfileUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userProfile'
      responses:
        '200':
          description: The user profile has been updated
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Change logged user profile
  '/{scopeId}/vpnServers/{vpnServerId}/configurations':
    get:
      tags:
        - VPN Configuration
      summary: Get all the VPN Configurations
      operationId: vpnConfigurationList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1vpnServers~1%7BvpnServerId%7D/get/parameters/1'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - name: matchTerm
          in: query
          description: |
            A term to match on different fields. Every entity whose at least one of the specified fields starts with this value will be matched.
            Matches on the following fields:

              - NAME
              - MIN. VERSION
              - MAX. VERSION
          schema:
            type: string
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the VPN Configurations available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vpnConfigurationListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - VPN Configuration
      summary: Create a new VPN Configuration
      operationId: vpnConfigurationCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1vpnServers~1%7BvpnServerId%7D/get/parameters/1'
      requestBody:
        description: An object containing the properties for the new VPN Configuration to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vpnConfigurationCreator'
        required: true
      responses:
        '200':
          description: The VPN Configuration that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vpnConfiguration'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/vpnServers/{vpnServerId}/configurations/{vpnConfigurationId}':
    get:
      tags:
        - VPN Configuration
      summary: Get a single VPN Configuration
      operationId: vpnConfigurationGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1vpnServers~1%7BvpnServerId%7D/get/parameters/1'
        - name: vpnConfigurationId
          in: path
          description: The ID of the VPN Configuration on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired VPN Configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vpnConfiguration'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - VPN Configuration
      summary: Update a single VPN Configuration
      operationId: vpnConfigurationUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1vpnServers~1%7BvpnServerId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1vpnServers~1%7BvpnServerId%7D~1configurations~1%7BvpnConfigurationId%7D/get/parameters/2'
      requestBody:
        description: An object containing the new properties for the VPN Configuration to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vpnConfiguration'
        required: true
      responses:
        '200':
          description: The details of the updated VPN Configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vpnConfiguration'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - VPN Configuration
      summary: Delete a single VPN Configuration
      operationId: vpnConfigurationDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1vpnServers~1%7BvpnServerId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1vpnServers~1%7BvpnServerId%7D~1configurations~1%7BvpnConfigurationId%7D/get/parameters/2'
      responses:
        '200':
          description: The VPN Configuration has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/vpnServers/{vpnServerId}/configurations/_count':
    post:
      tags:
        - VPN Configuration
      summary: Count the VPN Configurations
      operationId: vpnConfigurationCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1vpnServers~1%7BvpnServerId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/vpnServers/{vpnServerId}/configurations/_query':
    post:
      tags:
        - VPN Configuration
      summary: Query the VPN Configurations
      operationId: vpnConfigurationQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1vpnServers~1%7BvpnServerId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vpnConfigurationListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/vpnConnections':
    get:
      tags:
        - VPN Connection
      summary: Get all the VPN Connections
      operationId: vpnConnectionList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/askTotalCount'
      responses:
        '200':
          description: The list of the VPN Connections available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vpnConnectionListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Get all the VPN Connections in the given Scope
  '/{scopeId}/vpnConnections/{vpnConnectionId}':
    get:
      tags:
        - VPN Connection
      summary: Get a single VPN Connection
      operationId: vpnConnectionGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: vpnConnectionId
          in: path
          description: The ID of the VPN Connection on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired VPN Connection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vpnConnection'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: 'Get the details of a given VPN Connection, according to the `vpnConnectionId` path parameter.'
  '/{scopeId}/vpnConnections/_count':
    post:
      tags:
        - VPN Connection
      summary: Count the VPN Connections
      operationId: vpnConnectionCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Returns the count of how many VPN Connections are present in the given Scope
  '/{scopeId}/vpnConnections/_query':
    post:
      tags:
        - VPN Connection
      summary: Query the VPN Connections
      operationId: vpnConnectionQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vpnConnectionListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: Returns a list of the VPN Connections matching the given query in the Scope. Predicates are not currently supported.
  '/{scopeId}/vpnConnections/{vpnConnectionId}/_disconnect':
    post:
      tags:
        - VPN Connection
      summary: Disconnect a single VPN Connection
      operationId: vpnConnectionDisconnect
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1vpnConnections~1%7BvpnConnectionId%7D/get/parameters/1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/kapuaQuery'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vpnConnection'
          description: The details of the desired VPN Connection
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
      description: The VPN Connection has been successfully disconnected
  '/{scopeId}/vpnServers/{vpnServerId}/registry':
    get:
      tags:
        - VPN Registry
      summary: Get all the VPN Registry Entries
      operationId: vpnRegistryList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1vpnServers~1%7BvpnServerId%7D/get/parameters/1'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the VPN Registry entries available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vpnRegistryListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - VPN Registry
      summary: Create a new VPN Registry entry
      operationId: vpnRegistryCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1vpnServers~1%7BvpnServerId%7D/get/parameters/1'
      requestBody:
        description: An object containing the properties for the new VPN Registry entry to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vpnRegistryCreator'
        required: true
      responses:
        '200':
          description: The VPN Registry entry that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vpnRegistry'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/vpnServers/{vpnServerId}/registry/{vpnRegistryId}':
    get:
      tags:
        - VPN Registry
      summary: Get a single VPN Registry entry
      operationId: vpnRegistryGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1vpnServers~1%7BvpnServerId%7D/get/parameters/1'
        - name: vpnRegistryId
          in: path
          description: The ID of the VPN Registry on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired VPN Registry entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vpnRegistry'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - VPN Registry
      summary: Delete a single VPN Registry entry
      operationId: vpnRegistryDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1vpnServers~1%7BvpnServerId%7D/get/parameters/1'
        - $ref: '#/paths/~1%7BscopeId%7D~1vpnServers~1%7BvpnServerId%7D~1registry~1%7BvpnRegistryId%7D/get/parameters/2'
      responses:
        '200':
          description: The VPN Registry entry has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/vpnServers/{vpnServerId}/registry/_count':
    post:
      tags:
        - VPN Registry
      summary: Count the VPN Registry Entries
      operationId: vpnRegistryCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1vpnServers~1%7BvpnServerId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/vpnServers/{vpnServerId}/registry/_query':
    post:
      tags:
        - VPN Registry
      summary: Query the VPN Registry Entries
      operationId: vpnRegistryQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1vpnServers~1%7BvpnServerId%7D/get/parameters/1'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vpnRegistryListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/vpnServers':
    get:
      tags:
        - VPN Server
      summary: Get all the VPN Servers
      operationId: vpnServerList
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: name
          in: query
          description: The optional name to filter results
          schema:
            $ref: '#/components/schemas/kapuaId'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDir'
        - name: matchTerm
          in: query
          description: |
            A term to match on different fields. Every entity whose at least one of the specified fields starts with this value will be matched.
            Matches on the following fields:

              - NAME
              - HOST
          schema:
            type: string
        - $ref: '#/components/parameters/askTotalCount'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of the VPN Servers available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vpnServerListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
    post:
      tags:
        - VPN Server
      summary: Create a new VPN Server
      operationId: vpnServerCreate
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        description: An object containing the properties for the new VPN Server to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vpnServerCreator'
        required: true
      responses:
        '200':
          description: The VPN Server that has just been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vpnServer'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/entityUniqueness'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/vpnServers/{vpnServerId}':
    get:
      tags:
        - VPN Server
      summary: Get a single VPN Server
      operationId: vpnServerGet
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - name: vpnServerId
          in: path
          description: The ID of the VPN Server on which to perform the operation
          schema:
            $ref: '#/components/schemas/kapuaId'
          required: true
      responses:
        '200':
          description: The details of the desired VPN Server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vpnServer'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
    put:
      tags:
        - VPN Server
      summary: Update a single VPN Server
      operationId: vpnServerUpdate
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1vpnServers~1%7BvpnServerId%7D/get/parameters/1'
      requestBody:
        description: An object containing the new properties for the VPN Server to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vpnServer'
            example:
              type: vpnServer
              optlock: 1
              name: new_vpn_server
              host: vpn.test.io
              port: 11959
        required: true
      responses:
        '200':
          description: The details of the updated VPN Server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vpnServer'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '409':
          $ref: '#/components/responses/entityUniqueness'
        '500':
          $ref: '#/components/responses/kapuaError'
    delete:
      tags:
        - VPN Server
      summary: Delete a single VPN Server
      operationId: vpnServerDelete
      parameters:
        - $ref: '#/components/parameters/scopeId'
        - $ref: '#/paths/~1%7BscopeId%7D~1vpnServers~1%7BvpnServerId%7D/get/parameters/1'
      responses:
        '200':
          description: The VPN Server has been deleted
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '404':
          $ref: '#/components/responses/entityNotFound'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/vpnServers/_count':
    post:
      tags:
        - VPN Server
      summary: Count the VPN Servers
      operationId: vpnServerCount
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          $ref: '#/components/responses/countResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/vpnServers/_query':
    post:
      tags:
        - VPN Server
      summary: Query the VPN Servers
      operationId: vpnServerQuery
      parameters:
        - $ref: '#/components/parameters/scopeId'
      requestBody:
        $ref: '#/components/requestBodies/kapuaQuery'
      responses:
        '200':
          description: The result of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vpnServerListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
  '/{scopeId}/vpnServers/_configurations':
    get:
      tags:
        - VPN Server
      summary: Gets the VpnConfiguration available to the given scope.
      operationId: vpnServerMyConfigurations
      parameters:
        - $ref: '#/components/parameters/scopeId'
      responses:
        '200':
          description: The list of the VPN Configurations available in the Scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vpnConfigurationListResult'
        '400':
          $ref: '#/components/responses/illegalArgument'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/subjectUnauthorized'
        '500':
          $ref: '#/components/responses/kapuaError'
components:
  parameters:
    scopeId:
      name: scopeId
      in: path
      description: |
        The ID of the Scope where to perform the operation.
      schema:
        allOf:
          - $ref: '#/components/schemas/kapuaId'
        default: _
      required: true
    limit:
      name: limit
      in: query
      description: A Limit on the result size. The result set will not contain more items than this number
      schema:
        type: integer
        default: 50
    offset:
      name: offset
      in: query
      description: 'An Offset on the result size. Used to skip the first `n` items of a result set, with `n` equal to the value of `offset`'
      schema:
        type: integer
        default: 0
    askTotalCount:
      name: askTotalCount
      in: query
      description: 'If true, the total count of the entities matching the query will be included in the result set'
      schema:
        type: boolean
        default: false
    sortParam:
      name: sortParam
      in: query
      description: The name of the parameter that will be used as a sorting key
      schema:
        type: string
    sortDir:
      name: sortDir
      in: query
      description: 'The sort direction. Can be ASCENDING (default), DESCENDING. Case-insensitive.'
      schema:
        type: string
        enum:
          - ASCENDING
          - DESCENDING
        default: ASCENDING
  schemas:
    kapuaId:
      type: string
      pattern: '[A-Za-z0-9-_=]+'
      description: 'The standard format for any ID in Everyware Cloud. It''s encoded as a [base64url URL- and filename-safe (RFC 4648 Â§5)](https://tools.ietf.org/html/rfc4648#section-5)'
    optlock:
      description: |
        The optlock field is used to detect that this entity has not been modified by someone else. When updating an entity, first do a find to get the latest version of the entity and note the value of the optlock. Then in the update operation, set the optlock value to match the value that you found. If someone else has updated the entity between your find and update operations, the update will fail and the db/server will return an error.\
        See this [StackOverflow question](http://stackoverflow.com/questions/129329/optimistic-vs-pessimistic-locking) for more information on optimistic locking
      type: integer
    kapuaEntity:
      description: 'A standard Entity, that doesn''t support edits and versioning. All the objects (except for Datastore objects) in Everyware Cloud are Entities'
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
            - description: The ID of the Entity
              readOnly: true
        scopeId:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
            - description: The ID of the Scope containing the Entity
              readOnly: true
        createdOn:
          description: The date and time when this entity was created
          type: string
          format: date-time
          readOnly: true
        createdBy:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
            - description: The ID of the Entity who created this Entity
              readOnly: true
    kapuaUpdatableEntity:
      allOf:
        - $ref: '#/components/schemas/kapuaEntity'
        - description: An Entity that also supports edits and versioning
          type: object
          properties:
            modifiedOn:
              description: The date and time when this entity was modified
              type: string
              format: date-time
              readOnly: true
            modifiedBy:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the Entity who modified this Entity
                  readOnly: true
            optlock:
              description: |
                The optlock field is used to detect that this entity has not been modified by someone else. When updating an entity, first do a find to get the latest version of the entity and note the value of the optlock. Then in the update operation, set the optlock value to match the value that you found. If someone else has updated the entity between your find and update operations, the update will fail and the db/server will return an error.\
                See this [StackOverflow question](http://stackoverflow.com/questions/129329/optimistic-vs-pessimistic-locking) for more information on optimistic locking
              type: integer
    kapuaNamedEntity:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - description: An UpdatableEntity that also has a name and a description
          type: object
          properties:
            name:
              description: The name of the Entity
              type: string
            description:
              description: The description of the Entity
              type: string
    kapuaQuery:
      description: A base object for all Queries
      type: object
      properties:
        limit:
          description: A Limit on the result size. The result set will not contain more items than this number
          type: integer
          default: 50
        offset:
          description: 'An Offset on the result size. Used to skip the first `n` items of a result set, with `n` equal to the value of `offset`'
          type: integer
          default: 0
        askTotalCount:
          description: 'A flag to ask the total results count in the response, in addition to the data set as requested with the `offset` and `limit` parameters'
          type: boolean
          default: false
      example:
        offset: 0
        limit: 50
    kapuaEntityCreator:
      description: An object that contains the informations needed to create an Entity
      type: object
    kapuaUpdatableEntityCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaEntityCreator'
        - description: An object that contains the informations needed to create an Updatable Entity
          type: object
    kapuaNamedEntityCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntityCreator'
        - description: An object that contains the informations needed to create a Named Entity
          type: object
          properties:
            name:
              description: The name of the Entity
              type: string
            description:
              description: The description of the Entity
              type: string
          required:
            - name
    exceptionInfo:
      description: 'The base object to represent an Error. Every ''*exceptionInfo'' object in the codebase extends this, adding some fields if needed'
      properties:
        type:
          type: string
          description: the exact type of exceptionInfo object
        message:
          type: string
          description: An extended description of the error that occurred when performing the operation
        kapuaErrorCode:
          type: string
          description: An human readable error code used in the platform
        httpErrorCode:
          type: string
          description: The http error code for this response
      example:
        type: exceptionInfo
        httpErrorCode: 500
        message: 'Operation not allowed: This account cannot be deleted. Delete its child first..'
        kapuaErrorCode: OPERATION_NOT_ALLOWED
    subjectUnauthorizedExceptionInfo:
      description: The object to represent the fact that the subject requesting the resource has not the required permissions
      allOf:
        - $ref: '#/components/schemas/exceptionInfo'
        - properties:
            permission:
              $ref: '#/components/schemas/permission'
      example:
        type: subjectUnauthorizedExceptionInfo
        httpErrorCode: 403
        message: 'User does not have permission to perform this action. Required permission: user:read:1:*.'
        kapuaErrorCode: SUBJECT_UNAUTHORIZED
        permission:
          domain: user
          action: read
          targetScopeId: AQ
          forwardable: false
    entityNotFoundExceptionInfo:
      description: The object to represent the fact that an entity has not been found
      allOf:
        - $ref: '#/components/schemas/exceptionInfo'
        - properties:
            entityType:
              description: The type of the entity that could not be found
              type: string
            entityId:
              description: The ID of the entity that could not be found
              type: string
      example:
        type: entityNotFoundExceptionInfo
        httpErrorCode: 404
        message: The entity of type user with id/name 742 was not found.
        kapuaErrorCode: ENTITY_NOT_FOUND
        entityType: user
        entityId: AuY
    illegalArgumentExceptionInfo:
      description: An illegal value has been passed to the operation
      allOf:
        - $ref: '#/components/schemas/exceptionInfo'
        - properties:
            argumentName:
              description: The name of the argument who holds an illegal value
              type: string
            argumentValue:
              description: The illegal value passed to the operation
              type: string
      example:
        type: illegalArgumentExceptionInfo
        httpErrorCode: 400
        message: 'An illegal value was provided for the argument user.email: thisIsNotAnEmailAtAll'
        kapuaErrorCode: ILLEGAL_ARGUMENT
        argumentName: user.email
        argumentValue: thisIsNotAnEmailAtAll
    illegalNullArgumentExceptionInfo:
      description: An illegal null argument has been passed to the operation
      allOf:
        - $ref: '#/components/schemas/exceptionInfo'
        - properties:
            argumentName:
              type: string
              description: The name of the argument who holds an illegal null value
      example:
        type: illegalNullArgumentExceptionInfo
        httpErrorCode: 400
        message: 'An illegal value was provided for the argument user.email: null'
        kapuaErrorCode: ILLEGAL_NULL_ARGUMENT
        argumentName: user.email
    entityUniquenessExceptionInfo:
      description: The object to represent the fact that an Entity with the same unique fields is already present in the system
      allOf:
        - $ref: '#/components/schemas/exceptionInfo'
        - properties:
            entityType:
              type: string
              description: The type of the entity
            uniquesFieldValues:
              type: array
              description: map of fields and associated values that should be unique in the system
              items:
                type: string
      example:
        type: entityUniquenessExceptionInfo
        httpErrorCode: 409
        message: 'Error: [scopeId=1, schema=mqtt, dns=10.200.12.148, port=1883]'
        kapuaErrorCode: ENTITY_UNIQUENESS
        entityType: endpointInfo
        uniquesFieldValues:
          - scopeId=1
          - schema=mqtt
          - dns=10.200.12.148
          - port=1883
    InternalUserOnlyExceptionInfo:
      description: the operation is reserved only to users with 'userType' INTERNAL
      allOf:
        - $ref: '#/components/schemas/exceptionInfo'
      example:
        type: InternalUserOnlyExceptionInfo
        httpErrorCode: 403
        message: This operation is reserved only for Users of type INTERNAL.
        kapuaErrorCode: INTERNAL_USER_ONLY
    SelfManagedOnlyExceptionInfo:
      description: the operation can only be performed on the user which is currently authenticated
      allOf:
        - $ref: '#/components/schemas/exceptionInfo'
      example:
        type: SelfManagedOnlyExceptionInfo
        httpErrorCode: 403
        message: This operation can be performed only on the current logged User.
        kapuaErrorCode: SELF_MANAGED_ONLY
    DeviceNotConnectedExceptionInfo:
      description: The device is currently disconnected
      allOf:
        - $ref: '#/components/schemas/exceptionInfo'
        - properties:
            deviceId:
              description: The id of the disconnected device
              $ref: '#/components/schemas/kapuaId'
      example:
        type: deviceNotConnectedExceptionInfo
        httpErrorCode: 409
        message: 'The device 3243535747637285611 is not CONNECTED. Current device connection status is: null'
        kapuaErrorCode: DEVICE_NOT_CONNECTED
        deviceId: LQNak9Yzkus
    kapuaListResult:
      description: A container for all the Entities List
      type: object
      properties:
        limitExceeded:
          description: A flag indicating if more results are available but were not returned because of the limit imposed in the query
          type: boolean
        size:
          description: The size of the list containing the items
          type: integer
        totalCount:
          description: The total count of the elements that matched the query. Available only if `askTotalCount` was `true` in the query object.
          type: integer
      required:
        - limitedExceeded
        - size
    kapuaCountResult:
      type: object
      properties:
        count:
          type: integer
          description: The total count of the Entities available in the Scope
    setResult:
      type: object
      properties:
        items:
          type: array
          items:
            type: string
    action:
      type: string
      enum:
        - READ
        - CREATE
        - WRITE
        - DELETE
        - OPTIONS
        - EXECUTE
        - SUBMIT
        - CANCEL
        - SENT
    byDeviceAppManagementSettings:
      description: Base class for Device Management Applications that have per-device settings
      type: object
      properties:
        scopeId:
          description: The scopeId of the selected device
          $ref: '#/components/schemas/kapuaId'
        deviceId:
          description: The Device id of the selected device
          $ref: '#/components/schemas/kapuaId'
    accessInfo:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - description: An AccessInfo represents all the security objects (Roles and Permissions) that can be attached to a User. There will be exactly one AccessInfo object for every User
          type: object
          properties:
            userId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the User to which this AccessInfo is attached to
          example:
            type: accessInfo
            id: AQ
            scopeId: AQ
            createdOn: '2019-09-10T15:08:50.799Z'
            createdBy: AQ
            modifiedOn: '2019-09-10T15:08:50.799Z'
            modifiedBy: AQ
            optlock: 0
            userId: AQ
    accessInfoCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaEntityCreator'
        - description: An object that contains the informations needed to create an AccessInfo
          type: object
          properties:
            permissions:
              description: An Array of Permission objects to attach to the new AccessInfo
              type: array
              items:
                $ref: '#/components/schemas/permission'
            userId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the User to which the AccessInfo will be assigned
            roleIds:
              description: An Array of IDs whose Roles will be attached to the new AccessInfo
              type: array
              items:
                $ref: '#/components/schemas/kapuaId'
          example:
            permissions:
              - domain: broker
                action: connect
                targetScopeId: AQ
                forwardable: false
            userId: fjo0iXJEQh0
            roleIds:
              - CdIaNmq-Ggk
    accessInfoListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - description: A container for a list of AccessInfo objects
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/accessInfo'
          example:
            type: accessInfoListResult
            limitExceeded: false
            size: 2
            items:
              - type: accessInfo
                id: Ag
                scopeId: AQ
                createdOn: '2019-09-10T15:08:50.799Z'
                createdBy: AQ
                modifiedOn: '2019-09-10T15:08:50.799Z'
                modifiedBy: AQ
                optlock: 0
                userId: Ag
              - type: accessInfo
                id: AQ
                scopeId: AQ
                createdOn: '2019-09-10T15:08:50.799Z'
                createdBy: AQ
                modifiedOn: '2019-09-10T15:08:50.799Z'
                modifiedBy: AQ
                optlock: 0
                userId: AQ
    permission:
      description: The representation of a Permission
      type: object
      properties:
        domain:
          description: The domain name in which the Permission acts. `*` means "Any Domains"
          type: string
        action:
          description: The action that is permitted. `*` means "Any Action in the given Domain"
          type: string
        groupId:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
            - description: The ID of the Group to which the Permission applies. A `null` value means "Any group in the Scope"
        targetScopeId:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
            - description: The Scope ID to which the Permission applies. A `null` value means "Any scope in the system"
        forwardable:
          description: 'When `true`, this permission is also active descending the entire Accounts hierarchy'
          type: boolean
      example:
        domain: broker
        action: connect
        targetScopeId: AQ
        forwardable: false
    accessPermission:
      allOf:
        - $ref: '#/components/schemas/kapuaEntity'
        - description: An object that represents the link between an AccessInfo and a Permission
          type: object
          properties:
            accessInfoId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the AccessInfo
            permission:
              $ref: '#/components/schemas/permission'
          example:
            type: accessPermission
            id: AQ
            scopeId: AQ
            createdOn: '2019-11-12T14:15:47.000Z'
            createdBy: AQ
            accessInfoId: Ag
            permission:
              domain: broker
              action: connect
              targetScopeId: AQ
              forwardable: false
    accessPermissionCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaEntityCreator'
        - description: An object that contains the informations needed to create an AccessPermission
          type: object
          properties:
            accessInfoId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the AccessInfo to which attach the Permission
            permission:
              $ref: '#/components/schemas/permission'
          required:
            - accessInfoId
            - permission
    accessPermissionListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - description: A container for a list of AccessPermission objects
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/accessPermission'
          example:
            type: accessPermissionListResult
            limitExceeded: false
            size: 1
            items:
              - type: accessPermission
                id: Io4dVUnrBtE
                scopeId: AQ
                createdOn: '2019-09-11T14:14:15.786Z'
                createdBy: AQ
                accessInfoId: FPRcCYjzgqs
                permission:
                  domain: broker
                  action: connect
                  forwardable: false
    accessRole:
      allOf:
        - $ref: '#/components/schemas/kapuaEntity'
        - description: An object that represents the link between an AccessInfo and a Role
          type: object
          properties:
            accessInfoId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the AccessInfo
            roleId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the Role attached to the AccessInfo
    accessRoleCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaEntityCreator'
        - description: An object that contains the informations needed to create an AccessRole
          type: object
          properties:
            accessInfoId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the AccessInfo to which attach the Permission
            roleId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the AccessInfo
          required:
            - accessInfoId
            - roleId
    accessRoleListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - description: A container for a list of AccessRole objects
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/accessRole'
    organization:
      type: object
      description: An object with all the information needed to create a new Account
      properties:
        name:
          type: string
          description: The Name of the Organization
        personName:
          type: string
          description: The Name of the Person listed as a Contact for the Organization
        email:
          type: string
          format: email
          description: The Email Address of the Person listed as a Contact for the Organization
        phoneNumber:
          type: string
          description: The Phone Number of the Person listed as a Contact for the Organization
        addressLine1:
          type: string
          description: First line of the Address for the Organization
        addressLine2:
          type: string
          description: Second line of the Address for the Organization
        addressLine3:
          type: string
          description: Third line of the Address for the Organization
        zipPostCode:
          type: string
          description: The Zip / Postcode for the Organization
        city:
          type: string
          description: The City of the Organization
        stateProvinceCounty:
          type: string
          description: The State / Province / County of the Organization
        country:
          type: string
          description: The Country of the Organization
      required:
        - name
        - email
      example:
        name: ACME Inc.
        personName: Wile Ethelbert Coyote
        email: wile.coyote@acme.inc
        phoneNumber: +1 (555) 123 4567
        addressLine1: 123 Looney Tunes Drive
        addressLine2: Block 1
        addressLine3: Apartment 25
        zipPostCode: '00100'
        city: Somewhere City
        stateProvinceCounty: 'Green County, GC'
        country: United States
    account:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - description: |
            An object that holds all the information pertaining an Account, including the details about the Contacts of that account.\
            In Kapua an Account is the container of all other resources (Users, Devices, etc.), and is the equivalent of the concept of Tenant.\
            Every entity in Kapua will have a `scopeId` property, that holds the ID of the Account who holds that entity.
          type: object
          properties:
            organization:
              allOf:
                - description: An object containing all the information related to the Organization who holds the account
                - $ref: '#/components/schemas/organization'
            expirationDate:
              type: string
              format: date-time
              description: 'The Expiration date and time for the Account. If empty, the Account has no expiration'
            parentAccountPath:
              type: string
              description: The full Scope ID Hierarchy for the Account
          example:
            type: account
            id: LgJHjS2jvdE
            scopeId: AQ
            createdOn: '2019-09-09T10:21:03.775Z'
            createdBy: AQ
            modifiedOn: '2019-09-09T10:21:03.789Z'
            modifiedBy: AQ
            optlock: 2
            name: acme-inc
            expirationDate: '2019-12-31T00:00:00.000Z'
            organization:
              addressLine1: 123 Looney Tunes Drive
              addressLine2: Block 1
              addressLine3: Apartment 25
              city: Somewhere City
              country: United States
              email: wile.coyote@acme.inc
              name: ACME Inc.
              personName: Wile Ethelbert Coyote
              phoneNumber: +1 (555) 123 4567
              stateProvinceCounty: 'Green County, GC'
              zipPostCode: '00100'
            parentAccountPath: /1/3315290947379772881
    accountCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntityCreator'
        - description: An object with all the information needed to create a new Account
          type: object
          properties:
            organizationName:
              type: string
              description: The Name of the Organization
            organizationAddressLine1:
              type: string
              description: First line of the Address for the Organization
            organizationAddressLine2:
              type: string
              description: Second line of the Address for the Organization
            organizationAddressLine3:
              type: string
              description: Third line of the Address for the Organization
            organizationZipPostCode:
              type: string
              description: The Zip / Postcode for the Organization
            organizationCity:
              type: string
              description: The City of the Organization
            organizationStateProvinceCounty:
              type: string
              description: The State / Province / County of the Organization
            organizationCountry:
              type: string
              description: The Country of the Organization
            organizatioPpersonName:
              type: string
              description: The Name of the Person listed as a Contact for the Organization
            organizationEmail:
              type: string
              format: email
              description: The Email Address of the Person listed as a Contact for the Organization
            phoneNumber:
              type: string
              description: The Phone Number of the Person listed as a Contact for the Organization
            expirationDate:
              type: string
              format: date-time
              description: The Expiration date and time for the Account
          required:
            - organizationName
            - organizationEmail
          example:
            name: acme-inc
            organizationName: ACME Inc.
            organizationEmail: wile.coyote@acme.inc
            organizationAddressLine1: 123 Looney Tunes Drive
            organizationAddressLine2: Block 1
            organizationAddressLine3: Apartment 25
            organizationZipPostCode: '00100'
            organizationCity: Somewhere City
            organizationStateProvinceCounty: 'Green County, GC'
            organizationCountry: United States
            organizationPersonName: Wile Ethelbert Coyote
            organizationPhoneNumber: +1 (555) 123 4567
            expirationDate: '2019-12-31T00:00:00.000Z'
    accountListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - description: A list container for Account objects
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/account'
          example:
            type: accountListResult
            size: 1
            limitExceeded: false
            items:
              - type: account
                id: LgJHjS2jvdE
                scopeId: AQ
                createdOn: '2019-09-09T10:21:03.775Z'
                createdBy: AQ
                modifiedOn: '2019-09-09T10:21:03.789Z'
                modifiedBy: AQ
                optlock: 2
                name: acme-inc
                organization:
                  addressLine1: 123 Looney Tunes Drive
                  addressLine2: Block 1
                  addressLine3: Apartment 25
                  city: Somewhere City
                  country: United States
                  email: wile.coyote@acme.inc
                  name: ACME Inc.
                  personName: Wile Ethelbert Coyote
                  phoneNumber: +1 (555) 123 4567
                  stateProvinceCounty: 'Green County, GC'
                  zipPostCode: '00100'
                parentAccountPath: /1/3315290947379772881
    accountUpdateRequest:
      description: |
        An object that holds all the information necessary to update an Account, including the details about the Contacts of that account.\
        In Kapua an Account is the container of all other resources (Users, Devices, etc.), and is the equivalent of the concept of Tenant.\
        Every entity in Kapua will have a `scopeId` property, that holds the ID of the Account who holds that entity.
      properties:
        description:
          type: string
        expirationDate:
          type: string
          format: date-time
          description: 'The Expiration date and time for the Account. If empty, the Account has no expiration'
        optlock:
          $ref: '#/components/schemas/optlock'
        organization:
          $ref: '#/components/schemas/organization'
      example:
        description: Acme Inc.'s Account
        optlock: 2
        expirationDate: '2019-12-31T00:00:00.000Z'
        organization:
          name: ACME Inc.
          personName: Wile Ethelbert Coyote
          email: wile.coyote@acme.inc
          phoneNumber: +1 (555) 123 4567
          addressLine1: 123 Looney Tunes Drive
          addressLine2: Block 1
          addressLine3: Apartment 25
          zipPostCode: '00100'
          city: Somewhere City
          stateProvinceCounty: 'Green County, GC'
          country: United States
    currentAccountUpdateRequest:
      type: object
      description: An object with all the information needed to create a new Account
      properties:
        description:
          type: string
        optlock:
          $ref: '#/components/schemas/optlock'
        organization:
          type: object
          $ref: '#/components/schemas/organization'
      required:
        - optlock
        - organization
      example:
        description: Acme Inc.'s Account
        optlock: 2
        organization:
          name: ACME Inc.
          personName: Wile Ethelbert Coyote
          email: wile.coyote@acme.inc
          phoneNumber: +1 (555) 123 4567
          addressLine1: 123 Looney Tunes Drive
          addressLine2: Block 1
          addressLine3: Apartment 25
          zipPostCode: '00100'
          city: Somewhere City
          stateProvinceCounty: 'Green County, GC'
          country: United States
    accessToken:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - type: object
          properties:
            userId:
              $ref: '#/components/schemas/kapuaId'
            tokenId:
              type: string
              pattern: '^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$'
            expiresOn:
              type: string
              format: date-time
            invalidatedOn:
              type: string
              format: date-time
            refreshToken:
              type: string
              format: uuid
            refreshExpiresOn:
              type: string
              format: date-time
            trustKey:
              type: string
              description: A long-lived key to be used within an authentication with MFA from a trusted machine
              pattern: '^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$'
    loginInfo:
      type: object
      properties:
        accessPermission:
          type: array
          items:
            $ref: '#/components/schemas/accessPermission'
        accessToken:
          $ref: '#/components/schemas/accessToken'
        rolePermissions:
          type: array
          items:
            $ref: '#/components/schemas/rolePermission'
      example:
        type: loginInfo
        accessPermission:
          - id: Jfzafs5eUuw
            scopeId: AQ
            createdOn: '2019-11-15T14:43:11.451Z'
            createdBy: AQ
            accessInfoId: IKfvOdNER6M
            permission:
              domain: datastore
              action: read
              targetScopeId: AQ
              forwardable: false
        accessToken:
          id: RSP1npB7wZ4
          scopeId: AQ
          createdOn: '2019-11-15T14:43:27.547Z'
          createdBy: UlM9TGpJJ-g
          modifiedOn: '2019-11-15T14:43:27.547Z'
          modifiedBy: UlM9TGpJJ-g
          optlock: 1
          tokenId: eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJodHRwczovL3d3dy5lY2xpcHNlLm9yZy9rYXB1YSIsImlhdCI6MTU3MzgyOTAwNywiZXhwIjoxNTczODMwODA3LCJzdWIiOiJVbE05VEdwSkotZyIsInNJZCI6IkFRIn0.LgVFKAl1Ftd3g81MhtUglee5JjCqd-gGjilj1UAkDbKs4Xwgo1j9V-CBVPF4aop3r0x80U9YaVthYoPEikG2v4QaRHl7UGeikWOHk4g0lpeFCZvS_Kcag6VgbfYKKXd2C2ivtQE3enjZIUEz2UTEXz3KrcizuvgO4SP_PEz5hGkjqfbV2l1IM--_E8LQRBQoD7ixpGajaUlcrNlLsJcNgy8hRgyNp_Bqbyosd4oBttC4oDIyVA9Wmgq8aXUwFl7SZ42Kd4RIUUlMg-aAIAzWXVMQ2kCY1jYy7eNUmLszWdmPjMZsKbFcB5asXXYiHvZ_zy0x9AHFRnFte721ESjG3NLlvx8UKOWLFBkmlbvgPLd5fhlzTzim57ddpTjJpRsTM123VSwKL6Ul3ZZKiADrBVi4By-C4BhIkS9hVfa-HzfWlQKUOJvpa7PuUuRT1XzxxSTwIjgE4XuNdxHRqJpJPg0XtAuN67KXhmXjeQUaDi05GvpV3VyhtO6_GjjoLRd934N2hBdgS6FLIYkxBVMNSyqzjg9QO_A6Yzul5JK8T6H-f7ZhlYsx3trkWw0I9jetQguPveChFY0xbeTHSW0PwyNpyXKBzIUQhwCH2zoI9LxUy7TV7yn5wN3IW5MocnOXtKG49BTIbslT4eccoTWhtFQafGu8OF0TN-QyMf0eGTQ
          userId: UlM9TGpJJ-g
          expiresOn: '2019-11-15T15:13:27.506Z'
          refreshToken: e8a53e18-0c6b-4f3c-9929-409069a9c66e
          refreshExpiresOn: '2019-11-15T19:43:27.506Z'
        rolePermission:
          - id: a716DxmV9TI
            scopeId: AQ
            createdOn: '2019-11-15T14:42:28.859Z'
            createdBy: AQ
            roleId: OgkB8tR0kF4
            permission:
              domain: device
              action: read
              targetScopeId: AQ
              forwardable: false
          - id: O0X0yIQo6NU
            scopeId: AQ
            createdOn: '2019-11-15T14:42:04.153Z'
            createdBy: AQ
            roleId: EUkieLf-Y8M
            permission:
              domain: user
              targetScopeId: AQ
              forwardable: false
    credential:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - description: An object containing all the information for a single Credential
          type: object
          properties:
            userId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
            credentialType:
              type: string
              enum:
                - PASSWORD
                - API_KEY
                - JWT
            credentialKey:
              type: string
              readOnly: true
            status:
              type: string
              enum:
                - ENABLED
                - DISABLED
            expirationDate:
              type: string
              format: date-time
            loginFailures:
              description: |
                A count of how many times an user failed to login with this Credential.
                This field is cleared after a successful login
              type: integer
            firstLoginFailure:
              description: |
                The moment when the first login failure has been recorded with this credential.
                This field is cleared after a successful login
              type: string
              format: date-time
            loginFailuresReset:
              description: |
                The moment when the failure attempts for this Credential will be reset.
                This field is cleared after a successful login
              type: string
              format: date-time
            lockoutReset:
              description: |
                The moment when this Credential will be enabled again after a lockout due to too many failures.
                This field is cleared after a successful login
              type: string
              format: date-time
    credentialCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntityCreator'
        - type: object
          properties:
            userId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
            credentialType:
              type: string
              enum:
                - PASSWORD
                - API_KEY
                - JWT
            credentialKey:
              type: string
            credentialStatus:
              type: string
              enum:
                - ENABLED
                - DISABLED
            expirationDate:
              type: string
              format: date-time
          example:
            userId: AQ
            credentialType: PASSWORD
            credentialKey: new-password-123!
            credentialStatus: ENABLED
            expirationDate: '2019-12-31T00:00:00.000Z'
    credentialListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/credential'
    channelInfo:
      type: object
      properties:
        id:
          type: string
          format: base64
        scopeId:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
            - readOnly: true
        clientId:
          type: string
        name:
          type: string
        firstMessageId:
          type: string
          format: uuid
        firstMessageOn:
          type: string
          format: date-time
        lastMessageId:
          type: string
          format: uuid
        lastMessageOn:
          type: string
          format: date-time
      example:
        type: channelInfo
        id: xny9A7OkTUcSYxJIGf3oMZHyZIvi4AcsFqJJbY1N2yg=
        scopeId: AQ
        clientId: Client-Id-1
        name: ALERT
        firstMessageId: 18739b9f-6d8b-42c2-a536-507b37dd5f2a
        firstMessageOn: '2019-09-12T08:04:13.920Z'
        lastMessageId: a3e69394-1c20-4446-b596-6fcc4a2028fe
        lastMessageOn: '2019-09-12T08:14:13.230Z'
    channelInfoListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/channelInfo'
            totalCount:
              type: integer
          example:
            type: channelInfoListResult
            limitExceeded: false
            size: 3
            totalCount: 3
            items:
              - type: channelInfo
                id: xny9A7OkTUcSYxJIGf3oMZHyZIvi4AcsFqJJbY1N2yg=
                scopeId: AQ
                clientId: Client-Id-1
                name: ALERT
                firstMessageId: 18739b9f-6d8b-42c2-a536-507b37dd5f2a
                firstMessageOn: '2019-09-12T08:04:13.920Z'
                lastMessageId: a3e69394-1c20-4446-b596-6fcc4a2028fe
                lastMessageOn: '2019-09-12T08:14:13.230Z'
              - type: channelInfo
                id: vkyqKinEY2/UhxHHz2XRsmz02NtRK5KCsA7Fa1ot6CI=
                scopeId: AQ
                clientId: Client-Id-1
                name: DIAG
                firstMessageId: 308b0c38-76fa-4530-bb68-8c4c285c1f17
                firstMessageOn: '2019-09-12T08:04:13.887Z'
                lastMessageId: 8c59cd10-f23e-435e-a523-0aa8e952da1e
                lastMessageOn: '2019-09-12T09:04:49.710Z'
              - type: channelInfo
                id: X0BcZAV6FfD+Wi9n4x5VOdHmSV/E6UpOTetaqpXAb+w=
                scopeId: AQ
                clientId: Client-Id-1
                name: heater/data
                firstMessageId: 3cec54f7-9633-4a68-ad5b-48f57ea7f0f3
                firstMessageOn: '2019-09-12T09:03:20.959Z'
                lastMessageId: a8597968-d785-42dd-9e04-1f15d42df774
                lastMessageOn: '2019-09-12T09:05:06.527Z'
    clientInfo:
      type: object
      properties:
        id:
          type: string
        scopeId:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
            - readOnly: true
        clientId:
          type: string
        firstMessageId:
          type: string
          format: uuid
        firstMessageOn:
          type: string
          format: date-time
        lastMessageId:
          type: string
          format: uuid
        lastMessageOn:
          type: string
          format: date-time
      example:
        type: clientInfo
        id: JOyqK0XfNrKYD5qcAe6MJyl3TMd6AjwzKnqQofb8USg=
        scopeId: AQ
        clientId: Client-Id-1
        firstMessageId: a2320c45-6791-4525-a552-adb163928303
        firstMessageOn: '2019-09-12T08:14:13.228Z'
        lastMessageId: bb07d7fc-dc62-492f-b8da-7e28df69e112
        lastMessageOn: '2019-09-12T09:25:05.096Z'
    clientInfoListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/clientInfo'
            totalCount:
              type: integer
          example:
            type: clientInfoListResult
            limitExceeded: false
            size: 1
            items:
              type: clientInfo
              id: JOyqK0XfNrKYD5qcAe6MJyl3TMd6AjwzKnqQofb8USg=
              scopeId: AQ
              clientId: Client-Id-1
              firstMessageId: a2320c45-6791-4525-a552-adb163928303
              firstMessageOn: '2019-09-12T08:14:13.228Z'
              lastMessageId: bb07d7fc-dc62-492f-b8da-7e28df69e112
              lastMessageOn: '2019-09-12T09:25:05.096Z'
            totalCount: 1
    metric:
      type: object
      properties:
        valueType:
          type: string
        value:
          type: string
        name:
          type: string
    position:
      type: object
      properties:
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        altitude:
          type: number
          format: double
        precision:
          type: number
          format: double
        heading:
          type: number
          format: double
        speed:
          type: number
          format: double
        timestamp:
          type: string
          format: date-time
        satellites:
          type: integer
          format: int32
        status:
          type: integer
          format: int32
    dataMessage:
      type: object
      properties:
        datastoreId:
          type: string
          format: uuid
          readOnly: true
        scopeId:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
            - readOnly: true
        timestamp:
          type: string
          format: date-time
        deviceId:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
        clientId:
          type: string
        receivedOn:
          type: string
          format: date-time
        sentOn:
          type: string
          format: date-time
        capturedOn:
          type: string
          format: date-time
        position:
          $ref: '#/components/schemas/position'
        channel:
          type: object
          properties:
            semanticParts:
              type: array
              items:
                type: string
        payload:
          type: object
          properties:
            metrics:
              type: array
              items:
                $ref: '#/components/schemas/metric'
            body:
              type: string
              format: base64
      required:
        - clientId
        - deviceId
      example:
        type: jsonDatastoreMessage
        capturedOn: '2019-09-12T09:25:05.096Z'
        channel:
          type: kapuaDataChannel
          semanticParts:
            - heater
            - data
        clientId: Client-Id-1
        deviceId: WyczTs_GuDM
        payload:
          metrics:
            - valueType: string
              value: 5
              name: temperatureExternal
            - valueType: string
              value: 20
              name: temperatureInternal
            - valueType: string
              value: 30
              name: temperatureExhaust
            - valueType: string
              value: 0
              name: errorCode
        receivedOn: '2019-09-12T09:25:05.102Z'
        scopeId: AQ
        sentOn: '2019-09-12T09:25:05.096Z'
        datastoreId: bb07d7fc-dc62-492f-b8da-7e28df69e112
        timestamp: '2019-09-12T09:25:05.096Z'
    dataMessageInsertResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
    dataMessageListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/dataMessage'
          example:
            type: storableListResult
            limitExceeded: true
            size: 2
            items:
              - type: jsonDatastoreMessage
                capturedOn: '2019-09-12T09:35:04.383Z'
                channel:
                  type: kapuaDataChannel
                  semanticParts:
                    - heater
                    - data
                clientId: Client-Id-1
                deviceId: WyczTs_GuDM
                payload:
                  metrics:
                    - valueType: string
                      value: 5
                      name: temperatureExternal
                    - valueType: string
                      value: 20.25
                      name: temperatureInternal
                    - valueType: string
                      value: 30
                      name: temperatureExhaust
                    - valueType: string
                      value: -441478528
                      name: errorCode
                receivedOn: '2019-09-12T09:35:04.389Z'
                scopeId: AQ
                sentOn: '2019-09-12T09:35:04.383Z'
                datastoreId: 6349cec8-396b-4aac-bc2f-8fca9fe0c67c
                timestamp: '2019-09-12T09:35:04.383Z'
              - type: jsonDatastoreMessage
                capturedOn: '2019-09-12T09:25:05.096Z'
                channel:
                  type: kapuaDataChannel
                  semanticParts:
                    - heater
                    - data
                clientId: Client-Id-1
                deviceId: WyczTs_GuDM
                payload:
                  metrics:
                    - valueType: string
                      value: 5
                      name: temperatureExternal
                    - valueType: string
                      value: 20
                      name: temperatureInternal
                    - valueType: string
                      value: 30
                      name: temperatureExhaust
                    - valueType: string
                      value: 0
                      name: errorCode
                receivedOn: '2019-09-12T09:25:05.102Z'
                scopeId: AQ
                sentOn: '2019-09-12T09:25:05.096Z'
                datastoreId: bb07d7fc-dc62-492f-b8da-7e28df69e112
                timestamp: '2019-09-12T09:25:05.096Z'
            totalCount: 61
    metricInfo:
      type: object
      properties:
        id:
          type: string
          format: base64
        scopeId:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
            - readOnly: true
        clientId:
          type: string
        channel:
          type: string
        name:
          type: string
        metricType:
          type: string
        firstMessageId:
          type: string
          format: uuid
        firstMessageOn:
          type: string
          format: date-time
        lastMessageId:
          type: string
          format: uuid
        lastMessageOn:
          type: string
          format: date-time
      example:
        type: metricInfo
        id: oLVtE7wK67wO5Lxx4nZGsTEwbVjeo0xcFcnTvmhCxLU=
        scopeId: AQ
        clientId: Client-Id-1
        channel: ALERT
        name: alert_category
        metricType: string
        firstMessageId: c623d131-6f47-49af-9ba0-1474a90dd9ed
        firstMessageOn: '2019-09-12T08:04:13.918Z'
        lastMessageId: 653b4aee-e0d5-4af6-b120-ffc7c26057b9
        lastMessageOn: '2019-09-12T09:24:48.352Z'
    metricInfoListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/metricInfo'
          example:
            type: metricInfoListResult
            limitExceeded: false
            size: 2
            items:
              - type: metricInfo
                id: oLVtE7wK67wO5Lxx4nZGsTEwbVjeo0xcFcnTvmhCxLU=
                scopeId: AQ
                clientId: Client-Id-1
                channel: ALERT
                name: alert_category
                metricType: string
                firstMessageId: c623d131-6f47-49af-9ba0-1474a90dd9ed
                firstMessageOn: '2019-09-12T08:04:13.918Z'
                lastMessageId: 653b4aee-e0d5-4af6-b120-ffc7c26057b9
                lastMessageOn: '2019-09-12T09:24:48.352Z'
              - type: metricInfo
                id: q2vErAArLQ2rs/4m3eGZf5p6gqrCT+qZKxbeNPQrc+Q=
                scopeId: AQ
                clientId: Client-Id-1
                channel: ALERT
                name: alert_code
                metricType: string
                firstMessageId: c623d131-6f47-49af-9ba0-1474a90dd9ed
                firstMessageOn: '2019-09-12T08:04:13.918Z'
                lastMessageId: 653b4aee-e0d5-4af6-b120-ffc7c26057b9
                lastMessageOn: '2019-09-12T09:24:48.352Z'
            totalCount: 35
    fetchAttribute:
      type: string
      enum:
        - connection
        - lastEvent
    device:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - type: object
          properties:
            groupId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the Access Group to which this Device is assigned to
            clientId:
              type: string
              readOnly: true
              description: The Kura Client ID of this device
            connectionId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the Connection of this Device
                  readOnly: true
            connection:
              $ref: '#/components/schemas/connection'
            status:
              type: string
              enum:
                - ENABLED
                - DISABLED
            displayName:
              description: The Kura Display Name of this Device
              type: string
            lastEventId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the last recorded Event from this Device
                  readOnly: true
            lastEvent:
              $ref: '#/components/schemas/deviceEvent'
            serialNumber:
              description: The Serial Number of this Device
              type: string
            modelId:
              description: The Model ID (not an Kapua ID) of this Device
              type: string
            modelName:
              description: The Model Name of this Device
              type: string
            imei:
              description: The IMEI Code of this Device
              type: string
            imsi:
              description: The IMSI Code of this Device
              type: string
            iccid:
              description: The ICCID Code of this Device
              type: string
            biosVersion:
              description: The BIOS Version running on this Device
              type: string
            firmwareVersion:
              description: The Firmware Version of this Device
              type: string
            osVersion:
              description: The OS Version running on this Device
              type: string
            jvmVersion:
              description: The JVM Version running on this Device
              type: string
            osgiFrameworkVersion:
              description: The OSGi Framework Version running on this Device
              type: string
            applicationFrameworkVersion:
              description: The Application Framework Version running on this Device
              type: string
            connectionInterface:
              description: The Primary Connection Interface Name of this Device
              type: string
            connectionIp:
              description: The IP Address of the Primary Connection Interface on this Device
              type: string
            applicationIdentifiers:
              description: A string listing all the Kura Applications running on this Device
              type: string
            acceptEncoding:
              description: The MIME Encoding accepted by this Device
              type: string
            customAttribute1:
              description: A Custom Attribute of this Device - 1
              type: string
            customAttribute2:
              description: A Custom Attribute of this Device - 2
              type: string
            customAttribute3:
              description: A Custom Attribute of this Device - 3
              type: string
            customAttribute4:
              description: A Custom Attribute of this Device - 4
              type: string
            customAttribute5:
              description: A Custom Attribute of this Device - 5
              type: string
            tamperStatus:
              description: The tamper status of the Device
              type: string
            extendedProperties:
              type: array
              items:
                allOf:
                  - allOf:
                      - type: object
                        properties:
                          groupName:
                            type: string
                          name:
                            type: string
                          value:
                            type: string
                    example:
                      type: deviceExtendedProperty
                      groupName: Hardware Info
                      name: CPU Family
                      value: ARM
            tagIds:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/kapuaId'
      example:
        type: device
        id: dIVxI5QpFUI
        scopeId: AQ
        createdOn: '2019-09-12T12:08:12.179Z'
        createdBy: AQ
        modifiedOn: '2019-09-12T12:08:12.179Z'
        modifiedBy: AQ
        optlock: 1
        clientId: testDevice
        status: ENABLED
        displayName: Test Device
        serialNumber: '1234567890'
        modelId: Test Model
        biosVersion: N/A
        firmwareVersion: N/A
        osVersion: 3.13.0-93-generic
        jvmVersion: 24.111-b01 mixed mode
        osgiFrameworkVersion: 1.7.0
        acceptEncoding: gzip
        extendedProperties:
          - type: deviceExtendedProperty
            groupName: Hardware Info
            name: CPU Family
            value: ARM
          - type: deviceExtendedProperty
            groupName: Hardware Info
            name: CPU Cores
            value: 4
        tamperStatus: NOT_TAMPERED
        tagIds: []
    deviceCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntityCreator'
        - type: object
          properties:
            groupId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the Access Group to which this Device is assigned to
            clientId:
              type: string
              readOnly: true
              description: The Kura Client ID of this device
            status:
              $ref: '#/components/schemas/device/allOf/1/properties/status'
            lastEventId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the last recorded Event from this Device
                  readOnly: true
            displayName:
              description: The Kura Display Name of this Device
              type: string
            serialNumber:
              description: The Serial Number of this Device
              type: string
            modelId:
              description: The Model ID (not an Kapua ID) of this Device
              type: string
            modelName:
              description: The Model Name of this Device
              type: string
            imei:
              description: The IMEI Code of this Device
              type: string
            imsi:
              description: The IMSI Code of this Device
              type: string
            iccid:
              description: The ICCID Code of this Device
              type: string
            biosVersion:
              description: The BIOS Version running on this Device
              type: string
            firmwareVersion:
              description: The Firmware Version of this Device
              type: string
            osVersion:
              description: The OS Version running on this Device
              type: string
            jvmVersion:
              description: The JVM Version running on this Device
              type: string
            osgiFrameworkVersion:
              description: The OSGi Framework Version running on this Device
              type: string
            applicationFrameworkVersion:
              description: The Application Framework Version running on this Device
              type: string
            connectionInterface:
              description: The Primary Connection Interface Name of this Device
              type: string
            connectionIp:
              description: The IP Address of the Primary Connection Interface on this Device
              type: string
            applicationIdentifiers:
              description: A string listing all the Kura Applications running on this Device
              type: string
            acceptEncoding:
              description: The MIME Encoding accepted by this Device
              type: string
            customAttribute1:
              description: A Custom Attirbute of this Device - 1
              type: string
            customAttribute2:
              description: A Custom Attirbute of this Device - 2
              type: string
            customAttribute3:
              description: A Custom Attirbute of this Device - 3
              type: string
            customAttribute4:
              description: A Custom Attirbute of this Device - 4
              type: string
            customAttribute5:
              description: A Custom Attirbute of this Device - 5
              type: string
            tamperStatus:
              description: The tamper status of the Device
              type: string
            tagIds:
              description: A list of tag ID to link to the Device
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/kapuaId'
          required:
            - clientId
          example:
            clientId: testDevice
            status: ENABLED
            displayName: Test Device
            serialNumber: '1234567890'
            modelId: Test Model
            biosVersion: N/A
            firmwareVersion: N/A
            osVersion: 3.13.0-93-generic
            jvmVersion: 24.111-b01 mixed mode
            osgiFrameworkVersion: 1.7.0
            acceptEncoding: gzip
            deviceCredentialsMode: LOOSE
            tamperStatus: NOT_TAMPERED
            tagIds: []
    deviceListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/device'
    deviceManagementActivity:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - type: object
          properties:
            action:
              $ref: '#/components/schemas/action'
            activityDefinitionId:
              $ref: '#/components/schemas/kapuaId'
            appName:
              type: string
            appVersion:
              type: string
            appResource:
              type: string
            deviceId:
              $ref: '#/components/schemas/kapuaId'
            endedOn:
              type: string
              format: date-time
            log:
              type: array
              items:
                $ref: '#/components/schemas/managementActivityUpdate'
            logLevel:
              $ref: '#/components/schemas/deviceManagementActivityLogLevel'
            syncFromDevice:
              type: boolean
            startedOn:
              type: string
              format: date-time
            status:
              $ref: '#/components/schemas/deviceManagementActivityStatus'
            taskId:
              $ref: '#/components/schemas/kapuaId'
          example:
            type: deviceManagementActivity
            id: cjmXXKvLUY8
            scopeId: AQ
            createdOn: '2019-11-15T11:27:24.857Z'
            createdBy: AQ
            modifiedOn: '2019-11-15T11:30:01.975Z'
            modifiedBy: Ag
            optlock: 3
            deviceId: UVjeGkGVT3A
            activityDefinitionId: cjmXXKvLUY8
            action: SUBMIT
            appName: ANSIBLE
            appVersion: V1
            startedOn: '2019-11-15T11:27:24.842Z'
            endedOn: '2019-11-15T11:30:01.568Z'
            status: COMPLETED
            taskId: I-1DnL467js
    deviceManagementActivityListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/deviceManagementActivity'
          example:
            type: deviceManagementActivityListResult
            limitExceeded: false
            size: 1
            items:
              - type: deviceManagementActivity
                id: cjmXXKvLUY8
                scopeId: AQ
                createdOn: '2019-11-15T11:27:24.857Z'
                createdBy: AQ
                modifiedOn: '2019-11-15T11:30:01.975Z'
                modifiedBy: Ag
                optlock: 3
                deviceId: UVjeGkGVT3A
                activityDefinitionId: cjmXXKvLUY8
                action: SUBMIT
                appName: ANSIBLE
                appVersion: V1
                startedOn: '2019-11-15T11:27:24.842Z'
                endedOn: '2019-11-15T11:30:01.568Z'
                status: COMPLETED
                taskId: I-1DnL467js
    deviceManagementActivityStatus:
      type: string
      enum:
        - CREATED
        - CANCELLED
        - FAILED
        - SUCCESSFUL
        - STALE
        - WORKING
    deviceManagementActivityLogLevel:
      type: string
      enum:
        - DISABLED
        - INFO
        - TRACE
    deviceManagementActivityDefinition:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - type: object
          properties:
            appName:
              type: string
            appVersion:
              type: string
            appResource:
              type: string
            resourceUrl:
              type: string
            resourceAuthenticationType:
              type: string
              enum:
                - NONE
                - BASIC
            labels:
              type: string
          example:
            type: deviceManagementActivityDefinition
            id: cjmAAKvLUY8
            scopeId: AQ
            createdOn: '2021-04-15T11:27:24.857Z'
            createdBy: AQ
            modifiedOn: '2021-04-15T11:30:01.975Z'
            modifiedBy: Ag
            optlock: 3
            name: Heater 1.0.500
            description: Install the Kura Demo heater package
            appName: ANSIBLE
            appVersion: V1
            appResource: aResource
            resourceUrl: 'http://kura-repo.s3-us-west-2.amazonaws.com/new-ansible-tests/playbook-esf-package-update.zip'
            resourceAuthenticationType: NONE
            labels: 'heater,kura,ansible'
    deviceManagementActivityDefinitionCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntityCreator'
        - type: object
          properties:
            appName:
              type: string
            appVersion:
              type: string
            appResource:
              type: string
            resourceUrl:
              type: string
            resourceAuthenticationType:
              $ref: '#/components/schemas/deviceManagementActivityDefinition/allOf/1/properties/resourceAuthenticationType'
            labels:
              type: string
          example:
            type: deviceManagementActivityDefinitionCreator
            scopeId: AQ
            createdOn: '2021-04-15T11:27:24.857Z'
            createdBy: AQ
            modifiedOn: '2021-04-15T11:30:01.975Z'
            modifiedBy: Ag
            optlock: 3
            name: Heater 1.0.500
            description: Install the Kura Demo heater package
            appName: ANSIBLE
            appVersion: V1
            appResource: aResource
            resourceUrl: 'http://kura-repo.s3-us-west-2.amazonaws.com/new-ansible-tests/playbook-esf-package-update.zip'
            resourceAuthenticationType: NONE
            labels: 'heater,kura,ansible'
    deviceManagementActivityDefinitionListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/deviceManagementActivityDefinition'
          example:
            type: deviceManagementActivityDefinitionListResult
            limitExceeded: false
            size: 1
            items:
              type: deviceManagementActivityDefinition
              id: cjmAAKvLUY8
              scopeId: AQ
              createdOn: '2021-04-15T11:27:24.857Z'
              createdBy: AQ
              modifiedOn: '2021-04-15T11:30:01.975Z'
              modifiedBy: Ag
              optlock: 3
              name: Heater 1.0.500
              description: Install the Kura Demo heater package
              appName: ANSIBLE
              appVersion: V1
              appResource: aResource
              resourceUrl: 'http://kura-repo.s3-us-west-2.amazonaws.com/new-ansible-tests/playbook-esf-package-update.zip'
              resourceAuthenticationType: NONE
              labels: 'heater,kura,ansible'
    managementActivityUpdate:
      allOf:
        - $ref: '#/components/schemas/kapuaEntity'
        - properties:
            activityId:
              $ref: '#/components/schemas/kapuaId'
            message:
              type: string
            detailMessage:
              type: string
            progress:
              type: integer
            resource:
              type: string
            sentOn:
              type: string
              format: date-time
            sequence:
              type: integer
            startsOn:
              type: string
              format: date-time
            status:
              $ref: '#/components/schemas/deviceManagementActivityStatus'
          example:
            type: managementActivityUpdate
            id: RGoRWw9Pkhc
            scopeId: AQ
            createdOn: '2019-11-15T11:27:25.331Z'
            createdBy: Ag
            activityId: cjmXXKvLUY8
            detailMessage: Downloading at 666 KB/s
            message: Downloading
            progress: 0
            resource: download
            sentOn: '2019-11-15T11:27:25.267Z'
            sequence: 1289798123789
            startsOn: '2019-11-15T11:27:25.267Z'
            status: WORKING
    managementActivityUpdateListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/managementActivityUpdate'
          example:
            type: managementActivityUpdateListResult
            limitExceeded: false
            size: 2
            items:
              - type: managementActivityUpdate
                id: RGoRWw9Pkhc
                scopeId: AQ
                createdOn: '2019-11-15T11:27:25.331Z'
                createdBy: Ag
                activityId: cjmXXKvLUY8
                detailMessage: Downloading at 666 KB/s
                message: Downloading
                progress: 0
                resource: download
                sentOn: '2019-11-15T11:27:25.267Z'
                sequence: 1289798123789
                startsOn: '2019-11-15T11:27:25.267Z'
                status: WORKING
              - type: managementActivityUpdate
                id: RGoRWw9Pkha
                scopeId: AQ
                createdOn: '2019-11-15T11:27:26.331Z'
                createdBy: Ag
                activityId: cjmXXKvLUY8
                detailMessage: Downloading at 666 KB/s
                message: Downloading
                progress: 10
                resource: download
                sentOn: '2019-11-15T11:27:26.267Z'
                sequence: 1289798123790
                startsOn: '2019-11-15T11:27:26.267Z'
                status: WORKING
    assetDescription:
      description: |
        An **Asset**, as defined in Kura, is a logical representation of a field device, described by a list of **Channels**.
        The Asset uses a specific Driver instance to communicate with the underlying device and it models a generic device resource as a Channel.
        A register in a PLC or a GATT Characteristic in a Bluetooth device are examples of Channels.
        In this way, each Asset has multiple Channels for reading and writing data from/to an Industrial Device.
    channelMode:
      type: string
      description: 'The AssetChannel mode, which determines which operation you can execute on it'
      enum:
        - READ
        - WRITE
        - READ_WRITE
    channelValueType:
      type: string
      description: The date type of AssetChannel value
      enum:
        - boolean
        - float
        - string
        - integer
        - long
        - binary
        - double
    channelDefinition:
      type: object
      description: 'The definition of an Asset Channel describing its name, value type and mode.'
      properties:
        mode:
          $ref: '#/components/schemas/channelMode'
        name:
          type: string
          description: The name of the AssetChannel
        valueType:
          $ref: '#/components/schemas/channelValueType'
      example:
        valueType: boolean
        name: Channel-1
        mode: READ
    deviceAssetDefinition:
      allOf:
        - $ref: '#/components/schemas/assetDescription'
        - type: object
          properties:
            channels:
              type: array
              items:
                $ref: '#/components/schemas/channelDefinition'
            name:
              type: string
              description: The name of the DeviceAsset
          example:
            name: Asset-1
            channels:
              - valueType: boolean
                name: Channel-1
                mode: READ
              - valueType: integer
                name: Channel-2
                mode: READ_WRITE
              - valueType: binary
                name: Channel-3
                mode: WRITE
    deviceAssetDefinitions:
      description: A list of the DeviceAssetDefinitions
      type: object
      properties:
        deviceAsset:
          type: array
          items:
            $ref: '#/components/schemas/deviceAssetDefinition'
      example:
        deviceAsset:
          - name: Asset-1
            channels:
              - valueType: boolean
                name: Channel-1
                mode: READ
              - valueType: integer
                name: Channel-2
                mode: READ_WRITE
              - valueType: binary
                name: Channel-3
                mode: WRITE
          - name: Asset-2
            channels:
              - valueType: integer
                name: Channel-1
                mode: READ
              - valueType: integer
                name: Channel-2
                mode: READ
              - valueType: integer
                name: Channel-3
                mode: READ
    deviceAssetDefinitionsFilter:
      type: object
      properties:
        deviceAssets:
          type: array
          description: List of DeviceAsset names to filter DeviceAssetDefinitions
          items:
            properties:
              name:
                type: string
                description: The DeviceAsset name to filter
            required:
              - name
      required:
        - deviceAssets
      example:
        deviceAssets:
          - name: Asset-1
    channelValue:
      type: object
      description: The value read from an AssetChannel. Only AssetChannel that have READ or READ_WRITE can be read.
      properties:
        name:
          type: string
          description: The name of the channel
        valueType:
          $ref: '#/components/schemas/channelValueType'
        value:
          type: string
          description: The value read from the channel. Not present if read operation fails.
        error:
          type: string
          description: The error associated with the read operation if it fails.
        timestamp:
          type: string
          description: The time when this value was read
          format: date-time
      required:
        - name
        - valueType
        - value
      example:
        name: Channel-1
        valueType: boolean
        value: true
        timestamp: '2019-09-12T14:50:24.446Z'
    deviceAssetValue:
      type: object
      properties:
        name:
          type: string
          description: The name of the DeviceAsset from which the values are read.
        channels:
          type: array
          items:
            $ref: '#/components/schemas/channelValue'
      required:
        - name
      example:
        name: Asset-1
        channels:
          - name: Channel-1
            valueType: boolean
            value: true
            timestamp: '2019-09-12T14:50:24.446Z'
          - name: Channel-2
            valueType: integer
            value: 8
            timestamp: '2019-09-12T14:50:24.446Z'
    deviceAssetValues:
      type: object
      description: A list of DeviceAssets and their AssetChannel values
      properties:
        deviceAssets:
          type: array
          items:
            $ref: '#/components/schemas/deviceAssetValue'
      required:
        - deviceAssets
      example:
        deviceAsset:
          - name: Asset-1
            channels:
              - name: Channel-1
                valueType: boolean
                value: true
                timestamp: '2019-09-12T14:50:24.446Z'
              - name: Channel-2
                valueType: integer
                value: 8
                timestamp: '2019-09-12T14:50:24.446Z'
    deviceAssetsFilter:
      type: object
      properties:
        deviceAssets:
          type: array
          description: List of DeviceAsset names to filter DeviceAssets
          items:
            properties:
              name:
                type: string
                description: The DeviceAsset name to filter
              channels:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                  required:
                    - name
            required:
              - name
      required:
        - deviceAssets
      example:
        deviceAssets:
          - name: Asset-1
            channels:
              - name: Channel-1
    deviceAssetStoreEnablementPolicy:
      type: string
      description: The policy for which the Device Asset Store Application is enabled or not for this device. 'INHERITED' means that it inherits the setting from the Account-wide Asset Store Service Configuration
      enum:
        - ENABLED
        - DISABLED
        - INHERITED
    deviceAssetStoreSettings:
      allOf:
        - $ref: '#/components/schemas/byDeviceAppManagementSettings'
        - type: object
          properties:
            enablementPolicy:
              $ref: '#/components/schemas/deviceAssetStoreEnablementPolicy'
          required:
            - enablementPolicy
          example:
            scopeId: AQ
            deviceId: dIVxI5QpFUI
            enablementPolicy: ENABLED
    deviceBundle:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        state:
          type: string
        version:
          type: string
      example:
        id: 0
        name: org.eclipse.osgi
        state: ACTIVE
        version: 3.12.50.v20170928-1321
    deviceBundles:
      type: object
      properties:
        bundle:
          type: array
          items:
            $ref: '#/components/schemas/deviceBundle'
      example:
        type: deviceBundles
        bundle:
          - id: 0
            name: org.eclipse.osgi
            state: ACTIVE
            version: 3.12.50.v20170928-1321
          - id: 1
            name: org.eclipse.equinox.cm
            state: ACTIVE
            version: 1.2.0.v20170105-1446
    commandInput:
      description: An object containing the Command to be executed on a Device
      type: object
      properties:
        command:
          type: string
        password:
          type: string
          format: password
        arguments:
          properties:
            argument:
              oneOf:
                - description: An array of strings containing multiple arguments for the command
                  type: array
                  items:
                    type: string
                - description: A string containing the argument for the command
                  type: string
        timeout:
          type: integer
        workingDir:
          type: string
        body:
          type: string
          format: base64
        environment:
          type: array
          deprecated: true
          items:
            type: string
        environments:
          properties:
            environment:
              oneOf:
                - description: An array of strings containing multiple environment variables for the command/script
                  type: array
                  items:
                    type: string
                - description: A string containing the environment variable for the command/script
                  type: string
        runAsynch:
          type: boolean
        stdin:
          type: string
      example:
        command: ls
        arguments:
          argument: '-lisa'
        timeout: 60000
    commandOutput:
      description: The output of a Command executed on a Device
      type: object
      properties:
        stderr:
          type: string
        stdout:
          type: string
        exceptionMessage:
          type: string
        exceptionStack:
          type: string
        exitCode:
          type: integer
        hasTimedout:
          type: boolean
      example:
        type: deviceCommandOutput
        stderr: ''
        stdout: |
          total 40
          12503707 4 drwxrwxrwt 1 root root 4096 Sep 13 07:44 .
          12507178 4 drwxr-xr-x 1 root root 4096 Sep 12 08:03 ..
          61409843 4 drwxrwxrwt 2 root root 4096 Feb 28  2018 .ICE-unix
          61409845 4 drwxrwxrwt 2 root root 4096 Feb 28  2018 .Test-unix
          61409838 4 drwxrwxrwt 2 root root 4096 Feb 28  2018 .X11-unix
          61409844 4 drwxrwxrwt 2 root root 4096 Feb 28  2018 .XIM-unix
          61409846 4 drwxrwxrwt 2 root root 4096 Feb 28  2018 .font-unix
          12503708 4 drwxr-xr-x 3 root root 4096 Sep 12 08:03 .kura
          12507353 4 drwxr-xr-x 2 root root 4096 Sep 12 08:03 hsperfdata_root
          12507385 4 drwxr-xr-x 3 root root 4096 Sep 12 08:03 kura
        exitCode: 0
        hasTimedout: false
    deviceCertificateTypeGet:
      name: certificateType
      in: query
      schema:
        type: string
        description: The type of the keystore of the DeviceCertificate
        enum:
          - DEVICE_MANAGEMENT
          - SSL
    deviceCertificateTypePost:
      name: certificateType
      in: query
      schema:
        $ref: '#/components/schemas/deviceCertificateTypeGet/schema'
      required: true
    deviceCertificate:
      allOf:
        - $ref: '#/components/schemas/kapuaEntity'
        - description: An object that holds all the information pertaining a Device Certificate
          type: object
          properties:
            type:
              type: string
            certificateId:
              $ref: '#/components/schemas/kapuaId'
            certificateType:
              type: string
            deviceId:
              $ref: '#/components/schemas/kapuaId'
      example:
        type: deviceCertificate
        id: KgMazsDdEUA
        scopeId: AQ
        createdOn: '2024-09-10T13:54:35.035Z'
        createdBy: AQ
        certificateId: DWQKcITM7H0
        certificateType: DEVICE_MANAGEMENT
        deviceId: LOXr-9AKHO
    deviceCertificateListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - description: A list container for Device Certificate objects
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/deviceCertificate'
    componentConfiguration:
      type: object
      properties:
        id:
          type: string
        definition:
          type: object
          properties:
            id:
              type: string
            AD:
              type: array
              items:
                $ref: '#/components/schemas/attributeDefinition'
            Icon:
              type: array
              items:
                $ref: '#/components/schemas/icon'
            name:
              type: string
            description:
              type: string
        properties:
          type: object
          properties:
            property:
              type: array
              items:
                $ref: '#/components/schemas/propertyDefinition'
      example:
        id: org.eclipse.kura.wire.graph.WireGraphService
        definition:
          description: WireGraphService metatype
          id: org.eclipse.kura.wire.graph.WireGraphService
          name: WireGraphService
          AD:
            - cardinality: 0
              description: The default wire graph JSON
              id: WireGraph
              name: WireGraph
              required: true
              type: String
              Option: []
          Icon: []
        properties:
          property:
            - name: WireGraph
              array: false
              encrypted: false
              type: String
              value:
                - '{"components":[{"pid":"asset1","inputPortCount":1,"outputPortCount":1,"renderingProperties":{"position":{"x":-580,"y":-120},"inputPortNames":{},"outputPortNames":{}}},{"pid":"asset2","inputPortCount":1,"outputPortCount":1,"renderingProperties":{"position":{"x":-1100,"y":-100},"inputPortNames":{},"outputPortNames":{}}}],"wires":[]}'
            - name: kura.service.pid
              array: false
              encrypted: false
              type: String
              value:
                - org.eclipse.kura.wire.graph.WireGraphService
            - name: service.pid
              array: false
              encrypted: false
              type: String
              value:
                - org.eclipse.kura.wire.graph.WireGraphService
    componentConfigurationInput:
      type: object
      properties:
        id:
          type: string
        properties:
          type: object
          properties:
            property:
              type: array
              items:
                $ref: '#/components/schemas/propertyDefinition'
    componentConfigurations:
      type: object
      properties:
        configuration:
          type: array
          items:
            $ref: '#/components/schemas/componentConfiguration'
      example:
        type: deviceConfiguration
        configuration:
          - id: org.eclipse.kura.wire.graph.WireGraphService
            definition:
              description: WireGraphService metatype
              id: org.eclipse.kura.wire.graph.WireGraphService
              name: WireGraphService
              AD:
                - cardinality: 0
                  description: The default wire graph JSON
                  id: WireGraph
                  name: WireGraph
                  required: true
                  type: String
                  Option: []
              Icon: []
            properties:
              property:
                - name: WireGraph
                  array: false
                  encrypted: false
                  type: String
                  value:
                    - '{"components":[{"pid":"asset1","inputPortCount":1,"outputPortCount":1,"renderingProperties":{"position":{"x":-580,"y":-120},"inputPortNames":{},"outputPortNames":{}}},{"pid":"asset2","inputPortCount":1,"outputPortCount":1,"renderingProperties":{"position":{"x":-1100,"y":-100},"inputPortNames":{},"outputPortNames":{}}}],"wires":[]}'
                - name: kura.service.pid
                  array: false
                  encrypted: false
                  type: String
                  value:
                    - org.eclipse.kura.wire.graph.WireGraphService
                - name: service.pid
                  array: false
                  encrypted: false
                  type: String
                  value:
                    - org.eclipse.kura.wire.graph.WireGraphService
    componentConfigurationsInput:
      type: object
      properties:
        configuration:
          type: array
          items:
            $ref: '#/components/schemas/componentConfigurationInput'
      example:
        configuration:
          - id: org.eclipse.kura.wire.graph.WireGraphService
            properties:
              property:
                - name: kura.service.pid
                  array: false
                  encrypted: false
                  type: String
                  value:
                    - org.eclipse.kura.wire.graph.WireGraphService
    icon:
      type: object
      properties:
        resource:
          type: string
        size:
          type: integer
    propertyDefinition:
      type: object
      properties:
        name:
          type: string
        array:
          type: boolean
        encrypted:
          type: boolean
        type:
          type: string
        value:
          type: array
          items:
            type: string
      example:
        name: kura.service.pid
        array: false
        encrypted: false
        type: String
        value:
          - org.eclipse.kura.wire.graph.WireGraphService
    option:
      type: object
      properties:
        label:
          type: string
        value:
          type: string
    attributeDefinition:
      type: object
      properties:
        Option:
          type: array
          items:
            $ref: '#/components/schemas/option'
        default:
          type: string
        type:
          type: object
        cardinality:
          type: integer
        min:
          type: string
        max:
          type: string
        description:
          type: string
        id:
          type: string
        required:
          type: boolean
        name:
          type: string
      example:
        cardinality: 0
        description: The default wire graph JSON
        id: WireGraph
        name: WireGraph
        required: true
        type: String
        Option: []
    connection:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - type: object
          properties:
            status:
              type: string
              enum:
                - CONNECTED
                - DISCONNECTED
                - MISSING
                - 'NULL'
            clientId:
              type: string
            userId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
            allowUserChange:
              type: boolean
            userCouplingMode:
              $ref: '#/components/schemas/provisionRequestConnectionOptions/properties/userCouplingMode'
            reservedUserId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
            authenticationType:
              type: string
              description: The authentication type that must be used when connection
            lastAuthenticationType:
              type: string
              description: The authentication type used when connecting last time
            protocol:
              type: string
            clientIp:
              type: string
            serverIp:
              type: string
              readOnly: true
          example:
            type: deviceConnection
            id: Gd1BfeWwh3s
            scopeId: AQ
            createdOn: '2019-09-12T09:04:32.101Z'
            createdBy: Ag
            modifiedOn: '2019-09-13T08:04:49.927Z'
            modifiedBy: Ag
            optlock: 17
            status: CONNECTED
            clientId: Client-Id-1
            userId: Ag
            allowUserChange: false
            userCouplingMode: INHERITED
            authenticationType: USER_PASS
            lastAuthenticationType: USER_PASS
            protocol: MQTT
            clientIp: 'tcp://172.21.0.1:44400'
            serverIp: broker
    connectionListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/connection'
          example:
            type: deviceConnectionListResult
            limitExceeded: false
            size: 1
            items:
              - type: deviceConnection
                id: Gd1BfeWwh3s
                scopeId: AQ
                createdOn: '2019-09-12T09:04:32.101Z'
                createdBy: Ag
                modifiedOn: '2019-09-13T08:04:49.927Z'
                modifiedBy: Ag
                optlock: 17
                status: CONNECTED
                clientId: Client-Id-1
                userId: Ag
                allowUserChange: false
                userCouplingMode: INHERITED
                authenticationType: USER_PASS
                lastAuthenticationType: USER_PASS
                protocol: MQTT
                clientIp: 'tcp://172.21.0.1:44400'
                serverIp: broker
    deviceEvent:
      allOf:
        - $ref: '#/components/schemas/kapuaEntity'
        - type: object
          properties:
            deviceId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
            sentOn:
              type: string
              format: date-time
            receivedOn:
              type: string
              format: date-time
            position:
              $ref: '#/components/schemas/position'
            resource:
              type: string
            action:
              $ref: '#/components/schemas/action'
            responseCode:
              type: string
              enum:
                - ACCEPTED
                - SENT
                - BAD_REQUEST
                - NOT_FOUND
                - INTERNAL_ERROR
            eventMessage:
              type: string
          example:
            id: YYHQ2i1S-P0
            scopeId: AQ
            createdOn: '2019-09-12T09:04:37.392Z'
            createdBy: Ag
            deviceId: WyczTs_GuDM
            receivedOn: '2019-09-12T09:04:32.646Z'
            position:
              altitude: 0
              latitude: 0
              longitude: 0
            resource: BIRTH
            action: CREATE
            responseCode: ACCEPTED
            eventMessage: 'acceptEncoding=gzip~~applicationFramework=Kura~~applicationFrameworkVersion=ESF_6.0.0~~applicationIdentifiers=heaterPROV-V2DEPLOY-V2VPNCLIENT-V2CONF-V1CERT-V1ASSET-V1CMD-V1~~availableProcessors=4~~bios=N/A~~biosVersion=N/A~~connectionInterface=lo (00:00:00:00:00:00)~~connectionIp=127.0.0.1~~containerFramework=Eclipse~~containerFrameworkVersion=1.8.0~~displayName=~~firmware=N/A~~firmwareVersion=N/A~~jvm=Java HotSpot(TM) 64-Bit Server VM~~jvmProfile=Java(TM) SE Runtime Environment 1.8.0_161-b12~~jvmVersion=25.161-b12 mixed mode~~modelId=ESF-Docker-RHEL~~modelName=ESF-Docker-RHEL~~os=Linux~~osArch=amd64~~osVersion=4.9.184-linuxkit #1 SMP Tue Jul 2 22:58:16 UTC 2019~~partNumber=ESF-Docker-RHEL~~serialNumber=ESF-Docker-RHEL~~totalMemory=1023488~~uptime=187894320'
    deviceEventListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/deviceEvent'
    inventoryItem:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        itemType:
          type: string
      example:
        name: adduser
        version: 3.118
        type: DEB
    deviceInventory:
      type: object
      properties:
        inventoryItems:
          type: array
          items:
            $ref: '#/components/schemas/inventoryItem'
      example:
        type: deviceInventory
        inventoryItems:
          - name: adduser
            version: 3.118
            itemType: DEB
          - name: redis
            version: latest
            itemType: DOCKER
    deviceInventoryBundle:
      type: object
      properties:
        id:
          type: string
          description: 'This is the ID of the bundle. Even if type is String, it must be a number!'
        name:
          type: string
        version:
          type: string
        status:
          type: string
        signed:
          type: boolean
      example:
        id: 0
        name: org.eclipse.osgi
        version: 3.16.0.v20200828-0759
        status: ACTIVE
        signed: false
    deviceInventoryBundles:
      type: object
      properties:
        inventoryBundles:
          type: array
          items:
            $ref: '#/components/schemas/deviceInventoryBundle'
      example:
        type: deviceInventoryBundles
        inventoryBundles:
          - id: 0
            name: org.eclipse.osgi
            version: 3.16.0.v20200828-0759
            status: ACTIVE
          - id: 1
            name: org.eclipse.equinox.cm
            version: 1.4.400.v20200422-1833
            status: RESOLVED
    deviceInventoryContainerState:
      type: string
      enum:
        - ACTIVE
        - INSTALLED
        - UNINSTALLED
        - UNKNOWN
    deviceInventoryContainer:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        containerType:
          type: string
        state:
          $ref: '#/components/schemas/deviceInventoryContainerState'
      example:
        name: docker_container_1
        version: 'nginx:latest'
        containerType: DOCKER
        state: ACTIVE
    deviceInventoryContainers:
      type: object
      properties:
        inventoryContainers:
          type: array
          items:
            $ref: '#/components/schemas/deviceInventoryContainer'
      example:
        type: deviceInventoryContainers
        inventoryBundles:
          - name: docker_container_1
            version: 'nginx:latest'
            containerType: DOCKER
            state: ACTIVE
          - name: docker_container_2
            version: 'haproxy:latest'
            containerType: DOCKER
            state: INSTALLED
    deviceInventoryPackage:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        packageType:
          type: string
      example:
        name: adduser
        packageType: DEB
        version: 3.118
    deviceInventoryPackages:
      type: object
      properties:
        systemPackages:
          type: array
          items:
            $ref: '#/components/schemas/deviceInventoryPackage'
      example:
        type: deviceInventorySystemPackages
        systemPackages:
          - name: adduser
            version: 3.118
            type: DEB
          - name: alsa-utils
            version: 1.1.8-2
            type: DEB
    deviceInventoryDeploymentPackage:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        packageBundles:
          type: array
          items:
            $ref: '#/components/schemas/deviceInventoryBundle'
      example:
        name: org.eclipse.kura.example.beacon
        version: 1.0.500
        packageBundles:
          - id: 0
            name: org.eclipse.kura.example.beacon
            version: 1.0.500
            status: ACTIVE
          - id: 1
            name: org.eclipse.kura.example.package
            version: 1.5.400
            status: RESOLVED
    deviceInventoryDeploymentPackages:
      type: object
      properties:
        systemPackages:
          type: array
          items:
            $ref: '#/components/schemas/deviceInventoryDeploymentPackage'
      example:
        type: deviceInventoryDeploymentPackages
        deploymentPackages:
          - name: org.eclipse.kura.example.beacon
            version: 1.0.500
            packageBundles:
              - id: 0
                name: org.eclipse.kura.example.beacon
                version: 1.0.500
                status: ACTIVE
              - id: 1
                name: org.eclipse.kura.example.package
                version: 1.5.400
                status: RESOLVED
          - name: org.eclipse.kura.example.heater
            version: 1.0.500
            packageBundles:
              - id: 0
                name: org.eclipse.kura.example.heater
                version: 1.0.500
                status: ACTIVE
    deviceKeystores:
      type: object
      properties:
        deviceKeystore:
          type: array
          items:
            $ref: '#/components/schemas/deviceKeystore'
      example:
        type: deviceKeystores
        deviceKeystore:
          - id: SSLKeystore
            size: 3
            keystoreType: jks
          - id: HTTPSKeystore
            size: 1
            keystoreType: jks
    deviceKeystore:
      type: object
      properties:
        id:
          type: string
        size:
          type: integer
        keystoreType:
          type: string
      example:
        id: SSLKeystore
        size: 3
        keystoreType: jks
    deviceKeystoreItems:
      type: object
      properties:
        keystoreItems:
          type: array
          items:
            $ref: '#/components/schemas/deviceKeystoreItem'
      example:
        type: deviceKeystoreItems
        keystoreItem:
          - keystoreId: SSLKeystore
            alias: ssl-eclipse
            itemType: TRUSTED_CERTIFICATE
            size: 2048
            algorithm: RSA
            subjectDN: mqtt.eclipse.org
            issuer: 'Let''s Encrypt Authority X3,O = Let''s Encrypt,C = US'
            notBefore: 'Jul 19 10:21:17 2019 GMT'
            notAfter: 'Oct 17 10:21:17 2019 GMT'
            certificate: |
              -----BEGIN CERTIFICATE-----
              MIIFVzCCBD+gAwIBAgISA38CzQctm3+HkSyZPnDL8TFsMA0GCSqGSIb3DQEBCwUA
              MEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD
              ExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xOTA3MTkxMDIxMTdaFw0x
              OTEwMTcxMDIxMTdaMBsxGTAXBgNVBAMTEG1xdHQuZWNsaXBzZS5vcmcwggEiMA0G
              CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQnt6ZBEZ/vDG0JLqVB45lO6xlLazt
              YpEqZlGBket6PtjUGLdE2XivTpjtUkERS1cvPBqT1DH/yEZ1CU7iT/gfZtZotR0c
              qEMogSGkmrN1sAV6Eb+xGT3sPm1WFeKZqKdzAScdULoweUgwbNXa9kAB1uaSYBTe
              cq2ynfxBKWL/7bVtoeXUOyyaiIxVPTYz5XgpjSUB+9ML/v/+084XhIKA/avGPOSi
              RHOB+BsqTGyGhDgAHF+CDrRt8U1preS9AKXUvZ0aQL+djV8Y5nXPQPR8c2wplMwL
              5W/YMrM/dBm64vclKQLVPyEPqMOLMqcf+LkfQi6WOH+JByJfywAlme6jAgMBAAGj
              ggJkMIICYDAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsG
              AQUFBwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFHc+PmokFlx8Fh/0Lob125ef
              fLNyMB8GA1UdIwQYMBaAFKhKamMEfd265tE5t6ZFZe/zqOyhMG8GCCsGAQUFBwEB
              BGMwYTAuBggrBgEFBQcwAYYiaHR0cDovL29jc3AuaW50LXgzLmxldHNlbmNyeXB0
              Lm9yZzAvBggrBgEFBQcwAoYjaHR0cDovL2NlcnQuaW50LXgzLmxldHNlbmNyeXB0
              Lm9yZy8wGwYDVR0RBBQwEoIQbXF0dC5lY2xpcHNlLm9yZzBMBgNVHSAERTBDMAgG
              BmeBDAECATA3BgsrBgEEAYLfEwEBATAoMCYGCCsGAQUFBwIBFhpodHRwOi8vY3Bz
              LmxldHNlbmNyeXB0Lm9yZzCCAQMGCisGAQQB1nkCBAIEgfQEgfEA7wB2AHR+2oMx
              rTMQkSGcziVPQnDCv/1eQiAIxjc1eeYQe8xWAAABbAn2/p8AAAQDAEcwRQIhAIBl
              IZC2ZCMDs7bkBQN79xNO84VFpe7bQcMeaqHsQH9jAiAYV5kdZBgl17M5RB44NQ+y
              Y/WOF1PWOrNrP3XdeEo7HAB1ACk8UZZUyDlluqpQ/FgH1Ldvv1h6KXLcpMMM9OVF
              R/R4AAABbAn2/o4AAAQDAEYwRAIgNYxfY0bjRfjhXjjAgyPRSLKq4O5tWTd2W4mn
              CpE3aCYCIGeKPyuuo9tvHbyVKF4bsoN76FmnOkdsYE0MCKeKkUOkMA0GCSqGSIb3
              DQEBCwUAA4IBAQCB0ykl1N2U2BMhzFo6dwrECBSFO+ePV2UYGrb+nFunWE4MMKBb
              dyu7dj3cYRAFCM9A3y0H967IcY+h0u9FgZibmNs+y/959wcbr8F1kvgpVKDb1FGs
              cuEArADQd3X+4TMM+IeIlqbGVXv3mYPrsP78LmUXkS7ufhMXsD5GSbSc2Zp4/v0o
              3bsJz6qwzixhqg30tf6siOs9yrpHpPnDnbRrahbwnYTpm6JP0lK53GeFec4ckNi3
              zT5+hEVOZ4JYPb3xVXkzIjSWmnDVbwC9MFtRaER9MhugKmiAp8SRLbylD0GKOhSB
              2BDf6JrzhIddKxQ75KgMZE6FQaC3Bz1DFyrj
              -----END CERTIFICATE-----
    deviceKeystoreItem:
      type: object
      properties:
        keystoreId:
          type: string
        alias:
          type: string
        itemType:
          type: string
        size:
          type: integer
        algorithm:
          type: string
        subjectDN:
          type: string
        subjectANs:
          type: array
          items:
            $ref: '#/components/schemas/deviceKeystoreSubjectAN'
        issuer:
          type: string
        notBefore:
          type: string
          format: date-time
        notAfter:
          type: string
          format: date-time
        certificate:
          type: string
        certificateChain:
          type: array
          items:
            type: string
      example:
        keystoreId: SSLKeystore
        alias: ssl-eclipse
        itemType: TRUSTED_CERTIFICATE
        size: 2048
        algorithm: RSA
        subjectDN: mqtt.eclipse.org
        issuer: 'Let''s Encrypt Authority X3,O = Let''s Encrypt,C = US'
        notBefore: 'Jul 19 10:21:17 2019 GMT'
        notAfter: 'Oct 17 10:21:17 2019 GMT'
        certificate: |
          -----BEGIN CERTIFICATE-----
          MIIFVzCCBD+gAwIBAgISA38CzQctm3+HkSyZPnDL8TFsMA0GCSqGSIb3DQEBCwUA
          MEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD
          ExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xOTA3MTkxMDIxMTdaFw0x
          OTEwMTcxMDIxMTdaMBsxGTAXBgNVBAMTEG1xdHQuZWNsaXBzZS5vcmcwggEiMA0G
          CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQnt6ZBEZ/vDG0JLqVB45lO6xlLazt
          YpEqZlGBket6PtjUGLdE2XivTpjtUkERS1cvPBqT1DH/yEZ1CU7iT/gfZtZotR0c
          qEMogSGkmrN1sAV6Eb+xGT3sPm1WFeKZqKdzAScdULoweUgwbNXa9kAB1uaSYBTe
          cq2ynfxBKWL/7bVtoeXUOyyaiIxVPTYz5XgpjSUB+9ML/v/+084XhIKA/avGPOSi
          RHOB+BsqTGyGhDgAHF+CDrRt8U1preS9AKXUvZ0aQL+djV8Y5nXPQPR8c2wplMwL
          5W/YMrM/dBm64vclKQLVPyEPqMOLMqcf+LkfQi6WOH+JByJfywAlme6jAgMBAAGj
          ggJkMIICYDAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsG
          AQUFBwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFHc+PmokFlx8Fh/0Lob125ef
          fLNyMB8GA1UdIwQYMBaAFKhKamMEfd265tE5t6ZFZe/zqOyhMG8GCCsGAQUFBwEB
          BGMwYTAuBggrBgEFBQcwAYYiaHR0cDovL29jc3AuaW50LXgzLmxldHNlbmNyeXB0
          Lm9yZzAvBggrBgEFBQcwAoYjaHR0cDovL2NlcnQuaW50LXgzLmxldHNlbmNyeXB0
          Lm9yZy8wGwYDVR0RBBQwEoIQbXF0dC5lY2xpcHNlLm9yZzBMBgNVHSAERTBDMAgG
          BmeBDAECATA3BgsrBgEEAYLfEwEBATAoMCYGCCsGAQUFBwIBFhpodHRwOi8vY3Bz
          LmxldHNlbmNyeXB0Lm9yZzCCAQMGCisGAQQB1nkCBAIEgfQEgfEA7wB2AHR+2oMx
          rTMQkSGcziVPQnDCv/1eQiAIxjc1eeYQe8xWAAABbAn2/p8AAAQDAEcwRQIhAIBl
          IZC2ZCMDs7bkBQN79xNO84VFpe7bQcMeaqHsQH9jAiAYV5kdZBgl17M5RB44NQ+y
          Y/WOF1PWOrNrP3XdeEo7HAB1ACk8UZZUyDlluqpQ/FgH1Ldvv1h6KXLcpMMM9OVF
          R/R4AAABbAn2/o4AAAQDAEYwRAIgNYxfY0bjRfjhXjjAgyPRSLKq4O5tWTd2W4mn
          CpE3aCYCIGeKPyuuo9tvHbyVKF4bsoN76FmnOkdsYE0MCKeKkUOkMA0GCSqGSIb3
          DQEBCwUAA4IBAQCB0ykl1N2U2BMhzFo6dwrECBSFO+ePV2UYGrb+nFunWE4MMKBb
          dyu7dj3cYRAFCM9A3y0H967IcY+h0u9FgZibmNs+y/959wcbr8F1kvgpVKDb1FGs
          cuEArADQd3X+4TMM+IeIlqbGVXv3mYPrsP78LmUXkS7ufhMXsD5GSbSc2Zp4/v0o
          3bsJz6qwzixhqg30tf6siOs9yrpHpPnDnbRrahbwnYTpm6JP0lK53GeFec4ckNi3
          zT5+hEVOZ4JYPb3xVXkzIjSWmnDVbwC9MFtRaER9MhugKmiAp8SRLbylD0GKOhSB
          2BDf6JrzhIddKxQ75KgMZE6FQaC3Bz1DFyrj
          -----END CERTIFICATE-----
    deviceKeystoreSubjectAN:
      type: object
      properties:
        ANType:
          type: string
        value:
          type: string
    deviceKeystoreCertificate:
      type: object
      properties:
        keystoreId:
          type: string
        alias:
          type: string
        certificate:
          type: string
      example:
        keystoreId: SSLKeystore
        alias: ssl-eclipse
        certificate: |
          -----BEGIN CERTIFICATE-----
          MIIFVzCCBD+gAwIBAgISA38CzQctm3+HkSyZPnDL8TFsMA0GCSqGSIb3DQEBCwUA
          MEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD
          ExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xOTA3MTkxMDIxMTdaFw0x
          OTEwMTcxMDIxMTdaMBsxGTAXBgNVBAMTEG1xdHQuZWNsaXBzZS5vcmcwggEiMA0G
          CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQnt6ZBEZ/vDG0JLqVB45lO6xlLazt
          YpEqZlGBket6PtjUGLdE2XivTpjtUkERS1cvPBqT1DH/yEZ1CU7iT/gfZtZotR0c
          qEMogSGkmrN1sAV6Eb+xGT3sPm1WFeKZqKdzAScdULoweUgwbNXa9kAB1uaSYBTe
          cq2ynfxBKWL/7bVtoeXUOyyaiIxVPTYz5XgpjSUB+9ML/v/+084XhIKA/avGPOSi
          RHOB+BsqTGyGhDgAHF+CDrRt8U1preS9AKXUvZ0aQL+djV8Y5nXPQPR8c2wplMwL
          5W/YMrM/dBm64vclKQLVPyEPqMOLMqcf+LkfQi6WOH+JByJfywAlme6jAgMBAAGj
          ggJkMIICYDAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsG
          AQUFBwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFHc+PmokFlx8Fh/0Lob125ef
          fLNyMB8GA1UdIwQYMBaAFKhKamMEfd265tE5t6ZFZe/zqOyhMG8GCCsGAQUFBwEB
          BGMwYTAuBggrBgEFBQcwAYYiaHR0cDovL29jc3AuaW50LXgzLmxldHNlbmNyeXB0
          Lm9yZzAvBggrBgEFBQcwAoYjaHR0cDovL2NlcnQuaW50LXgzLmxldHNlbmNyeXB0
          Lm9yZy8wGwYDVR0RBBQwEoIQbXF0dC5lY2xpcHNlLm9yZzBMBgNVHSAERTBDMAgG
          BmeBDAECATA3BgsrBgEEAYLfEwEBATAoMCYGCCsGAQUFBwIBFhpodHRwOi8vY3Bz
          LmxldHNlbmNyeXB0Lm9yZzCCAQMGCisGAQQB1nkCBAIEgfQEgfEA7wB2AHR+2oMx
          rTMQkSGcziVPQnDCv/1eQiAIxjc1eeYQe8xWAAABbAn2/p8AAAQDAEcwRQIhAIBl
          IZC2ZCMDs7bkBQN79xNO84VFpe7bQcMeaqHsQH9jAiAYV5kdZBgl17M5RB44NQ+y
          Y/WOF1PWOrNrP3XdeEo7HAB1ACk8UZZUyDlluqpQ/FgH1Ldvv1h6KXLcpMMM9OVF
          R/R4AAABbAn2/o4AAAQDAEYwRAIgNYxfY0bjRfjhXjjAgyPRSLKq4O5tWTd2W4mn
          CpE3aCYCIGeKPyuuo9tvHbyVKF4bsoN76FmnOkdsYE0MCKeKkUOkMA0GCSqGSIb3
          DQEBCwUAA4IBAQCB0ykl1N2U2BMhzFo6dwrECBSFO+ePV2UYGrb+nFunWE4MMKBb
          dyu7dj3cYRAFCM9A3y0H967IcY+h0u9FgZibmNs+y/959wcbr8F1kvgpVKDb1FGs
          cuEArADQd3X+4TMM+IeIlqbGVXv3mYPrsP78LmUXkS7ufhMXsD5GSbSc2Zp4/v0o
          3bsJz6qwzixhqg30tf6siOs9yrpHpPnDnbRrahbwnYTpm6JP0lK53GeFec4ckNi3
          zT5+hEVOZ4JYPb3xVXkzIjSWmnDVbwC9MFtRaER9MhugKmiAp8SRLbylD0GKOhSB
          2BDf6JrzhIddKxQ75KgMZE6FQaC3Bz1DFyrj
          -----END CERTIFICATE-----
    deviceKeystoreKeypair:
      type: object
      properties:
        keystoreId:
          type: string
        alias:
          type: string
        algorithm:
          type: string
        size:
          type: integer
        singnatureAlgorithm:
          type: string
        attributes:
          type: string
      example:
        type: deviceKeystoreKeypair
        keystoreId: SSLKeystore
        alias: ssl-eclipse
        algorithm: RSA
        size: '2048,'
        signatureAlgorithm: SHA256withRSA
        attributes: 'CN=Let''s Encrypt Authority X3,O=Let''s Encrypt,C=US'
    deviceKeystoreCSRInfo:
      type: object
      properties:
        keystoreId:
          type: string
        alias:
          type: string
        singnatureAlgorithm:
          type: string
        attributes:
          type: string
      example:
        keystoreId: HttpsKeystore
        alias: localhost
        signatureAlgorithm: SHA256withRSA
        attributes: 'CN=Kura, OU=IoT, O=Eclipse, C=US'
    deviceKeystoreCSR:
      type: object
      properties:
        signingRequest:
          type: string
      example:
        signingRequest: |
          -----BEGIN CERTIFICATE REQUEST-----
          MIICgTCCAWkCAQAwPDELMAkGA1UEBhMCVVMxEDAOBgNVBAoTB0VjbGlwc2UxDDAK
          BgNVBAsTA0lvVDENMAsGA1UEAxMES3VyYTCCASIwDQYJKoZIhvcNAQEBBQADggEP
          ADCCAQoCggEBAKpmnJeOJ7wczIMj3nUe+qxAtfJaXhUJkGy+bQuEfSEKRhA9QXAT
          bt6N5alSj9mHb0OcOESBdUEr8vt28d5qHyHUUJ3yOJH3qURGO3He8yqLuUmgMgdK
          Dtp5bGFy5ltW/F+ASB8vJlX2jaC/Tybq8KjPTzVeEIilyQ9LDQMLmH7l+WklkpsK
          LZHF+2fATJK7HISijozZiVfk8EFi5JXbGo9VFlKouwTU3V2NVY9f4cIftPb5pNs2
          lEL+ZkAuaPksHzkI0z+bPwR4+tlMTxgcQE25r7fPK3FYEuOugSV8zGghI1dBDAHx
          eHYVpduJPhz7RtdVw3x7eM7I1C2IrmfHaP0CAwEAAaAAMA0GCSqGSIb3DQEBCwUA
          A4IBAQAC8rvMaHZ+7szRm490O0nOj2wC0yngvciyBvCqEiKGmlOjeXxJAVjTG+r6
          tXe6Jce9weIRdbI0HHVWkNVBX7Z0xjuD/SjrXOKjx1gm1DTbkp97OTBXuPhuiNXq
          Ihvy/j0P/yFRAUP+YRkV6N5OE76fUst/VHUvMWbEEnH9qPGYmSwV4yBgsSRiL4km
          84uuNDaILuCuYqTMtfoPSrfcILrKMfmPRvNE5DNDbk/BsR33zyBXCjnd+/P61sKo
          VSn6maFDBHcZP2jkBOBr8QmW8jt3oR9qWX5LXBpEHkmki8cy6FEhUOGZIuPAd8Rj
          PfZ8kKHpraMQuOeg0ZsZcZzlZsa8
          -----END CERTIFICATE REQUEST-----
    activityGetRequest:
      allOf:
        - type: object
          properties:
            appName:
              type: string
            appVersion:
              type: string
          example:
            type: activityGetRequest
            appName: ANSIBLE
            appVersion: V1
    activitySubmitRequest:
      allOf:
        - type: object
          properties:
            activityDefinitionId:
              $ref: '#/components/schemas/kapuaId'
            resourceAuthenticationUsername:
              type: string
            resourceAuthenticationPassword:
              type: string
            updateLogLevel:
              $ref: '#/components/schemas/activityUpdateLogLevel'
          example:
            type: activitySubmitRequest
            activityDefinitionId: UVjeGkGVT3A
            resourceAuthenticationUsername: username
            resourceAuthenticationPassword: password
            updateLogLevel: INFO
    activityUpdateLogLevel:
      type: string
      enum:
        - DISABLED
        - INFO
        - TRACE
    deviceActivity:
      type: object
      properties:
        appName:
          type: string
        appVersion:
          type: string
        downloadResume:
          type: string
        downloadUrl:
          type: string
        endedOn:
          type: string
          format: date-time
        updateLogLevel:
          type: string
        startedOn:
          type: string
          format: date-time
        status:
          type: string
        taskId:
          $ref: '#/components/schemas/kapuaId'
      example:
        type: deviceActivity
        appName: ANSIBLE
        appVersion: V1
        downloadResume: false
        downloadUrl: 'http://some.url'
        endedOn: '2021-02-19T17:05:37.471Z'
        updateLogLevel: INFO
        startedOn: '2021-02-19T17:01:52.099Z'
        status: SUCCESSFUL
        taskId: AWCPthGS4A0
    deviceActivities:
      allOf:
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/deviceActivity'
          example:
            type: deviceActivities
            items:
              - type: deviceActivity
                appName: ANSIBLE
                appVersion: V1
                downloadResume: false
                downloadUrl: 'http://some.url'
                endedOn: '2021-02-19T17:05:37.471Z'
                updateLogLevel: INFO
                startedOn: '2021-02-19T17:01:52.099Z'
                status: SUCCESSFUL
                taskId: AWCPthGS4A0
              - type: deviceActivity
                appName: ANSIBLE
                appVersion: V1
                downloadResume: false
                downloadUrl: 'http://anothersome.url'
                endedOn: '2021-02-20T17:07:37.471Z'
                updateLogLevel: INFO
                startedOn: '2021-02-20T17:00:52.099Z'
                status: SUCCESSFUL
                taskId: UVjeGkGVT3A
    deviceNotification:
      allOf:
        - $ref: '#/components/schemas/kapuaEntity'
        - properties:
            operationId:
              $ref: '#/components/schemas/kapuaId'
            progress:
              type: integer
            resource:
              type: string
            sentOn:
              type: string
              format: date-time
            status:
              $ref: '#/components/schemas/deviceOperation'
          example:
            type: managementOperationNotification
            id: RGoRWw9Pkhc
            scopeId: AQ
            createdOn: '2019-11-15T11:27:25.331Z'
            createdBy: Ag
            operationId: cjmXXKvLUY8
            progress: 0
            resource: download
            sentOn: '2019-11-15T11:27:25.267Z'
            status: RUNNING
    deviceNotificationListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/deviceNotification'
          example:
            type: managementOperationNotificationListResult
            limitExceeded: false
            size: 2
            items:
              - type: managementOperationNotification
                id: RGoRWw9Pkhc
                scopeId: AQ
                createdOn: '2019-11-15T11:27:25.331Z'
                createdBy: Ag
                operationId: cjmXXKvLUY8
                progress: 0
                resource: download
                sentOn: '2019-11-15T11:27:25.267Z'
                status: RUNNING
              - type: managementOperationNotification
                id: f1Hu1T8iIRw
                scopeId: AQ
                createdOn: '2019-11-15T11:27:32.331Z'
                createdBy: Ag
                operationId: cjmXXKvLUY8
                progress: 5
                resource: download
                sentOn: '2019-11-15T11:27:32.277Z'
                status: RUNNING
    operationProperty:
      type: object
      properties:
        name:
          type: string
        propertyType:
          type: string
        propertyValue:
          type: string
    deviceOperation:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - type: object
          properties:
            action:
              $ref: '#/components/schemas/action'
            appId:
              type: string
            deviceId:
              $ref: '#/components/schemas/kapuaId'
            endedOn:
              type: string
              format: date-time
            operationProperties:
              type: array
              items:
                $ref: '#/components/schemas/operationProperty'
            log:
              type: string
            operationId:
              $ref: '#/components/schemas/kapuaId'
            resource:
              type: string
            startedOn:
              type: string
              format: date-time
            status:
              type: string
              enum:
                - RUNNING
                - COMPLETED
                - FAILED
                - STALE
          example:
            type: deviceManagementOperation
            id: cjmXXKvLUY8
            scopeId: AQ
            createdOn: '2019-11-15T11:27:24.857Z'
            createdBy: AQ
            modifiedOn: '2019-11-15T11:30:01.975Z'
            modifiedBy: Ag
            optlock: 3
            action: EXECUTE
            appId: DEPLOY
            deviceId: UVjeGkGVT3A
            endedOn: '2019-11-15T11:30:01.568Z'
            operationProperties:
              - name: kapau.package.download.file.type
                propertyType: string
                propertyValue: DEPLOYMENT_PACKAGE
              - name: kapau.package.download.password
                propertyType: string
                propertyValue: kapua-password
              - name: kapau.package.download.username
                propertyType: string
                propertyValue: kapua-sys
              - name: kapua.package.download.block.delay
                propertyType: integer
                propertyValue: '1000'
              - name: kapua.package.download.block.size
                propertyType: integer
                propertyValue: '128'
              - name: kapua.package.download.block.timeout
                propertyType: integer
                propertyValue: '60000'
              - name: kapua.package.download.install
                propertyType: boolean
                propertyValue: 'true'
              - name: kapua.package.download.name
                propertyType: string
                propertyValue: heater
              - name: kapua.package.download.uri
                propertyType: java.net.URI
                propertyValue: 'http://download.eclipse.org/kura/releases/4.1.0/org.eclipse.kura.demo.heater_1.0.500.dp'
              - name: kapua.package.download.version
                propertyType: string
                propertyValue: 1.0.500
              - name: kapua.package.operation.id
                propertyType: org.eclipse.kapua.commons.model.id.KapuaEid
                propertyValue: '2588799701293395515'
              - name: kapua.package.reboot
                propertyType: boolean
                propertyValue: 'false'
            log: ''
            operationId: I-1DnL467js
            resource: DOWNLOAD
            startedOn: '2019-11-15T11:27:24.842Z'
            status: COMPLETED
    deviceOperationListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/deviceOperation'
          example:
            type: deviceManagementOperationListResult
            limitExceeded: false
            size: 1
            items:
              - type: deviceManagementOperation
                id: cjmXXKvLUY8
                scopeId: AQ
                createdOn: '2019-11-15T11:27:24.857Z'
                createdBy: AQ
                modifiedOn: '2019-11-15T11:30:01.975Z'
                modifiedBy: Ag
                optlock: 3
                action: EXECUTE
                appId: DEPLOY
                deviceId: UVjeGkGVT3A
                endedOn: '2019-11-15T11:30:01.568Z'
                operationProperties:
                  - name: kapau.package.download.file.type
                    propertyType: string
                    propertyValue: DEPLOYMENT_PACKAGE
                  - name: kapau.package.download.password
                    propertyType: string
                    propertyValue: kapua-password
                  - name: kapau.package.download.username
                    propertyType: string
                    propertyValue: kapua-sys
                  - name: kapua.package.download.block.delay
                    propertyType: integer
                    propertyValue: '1000'
                  - name: kapua.package.download.block.size
                    propertyType: integer
                    propertyValue: '128'
                  - name: kapua.package.download.block.timeout
                    propertyType: integer
                    propertyValue: '60000'
                  - name: kapua.package.download.install
                    propertyType: boolean
                    propertyValue: 'true'
                  - name: kapua.package.download.name
                    propertyType: string
                    propertyValue: heater
                  - name: kapua.package.download.uri
                    propertyType: java.net.URI
                    propertyValue: 'http://download.eclipse.org/kura/releases/4.1.0/org.eclipse.kura.demo.heater_1.0.500.dp'
                  - name: kapua.package.download.version
                    propertyType: string
                    propertyValue: 1.0.500
                  - name: kapua.package.operation.id
                    propertyType: org.eclipse.kapua.commons.model.id.KapuaEid
                    propertyValue: '2588799701293395515'
                  - name: kapua.package.reboot
                    propertyType: boolean
                    propertyValue: 'false'
                log: ''
                operationId: I-1DnL467js
                resource: DOWNLOAD
                startedOn: '2019-11-15T11:27:24.842Z'
                status: COMPLETED
    bundleInfo:
      type: object
      properties:
        name:
          type: string
          description: The bundle name
        version:
          type: string
          description: the bundle version
    devicePackage:
      type: object
      description: A Device Package
      properties:
        name:
          type: string
          description: The name of the package
        version:
          type: string
          description: The version of the package
        bundleInfos:
          type: object
          description: The bundles of this package
          properties:
            bundleInfo:
              type: array
              items:
                $ref: '#/components/schemas/bundleInfo'
        installDate:
          type: string
          description: The installation date of the package
          format: date-time
      example:
        name: org.eclipse.kura.demo.heater
        version: 1.0.300
        bundleInfos:
          bundleInfo:
            - name: org.eclipse.kura.demo.heater
              version: 1.0.300
    devicePackages:
      type: object
      properties:
        devicePackage:
          type: array
          items:
            $ref: '#/components/schemas/devicePackage'
      example:
        type: devicePackages
        devicePackage:
          - name: org.eclipse.kura.demo.heater
            version: 1.0.300
            bundleInfos:
              bundleInfo:
                - name: org.eclipse.kura.demo.heater
                  version: 1.0.300
    devicePackageDownloadRequestFileType:
      type: string
      description: The type of the URI resource content
      enum:
        - DEPLOYMENT_PACKAGE
        - EXECUTABLE_SCRIPT
    devicePackageDownloadRequest:
      type: object
      properties:
        uri:
          type: string
          description: The URI to download the resource
        name:
          type: string
          description: The name of the downloaded package
        version:
          type: string
          description: The version of the downloaded package
        username:
          type: string
          description: The username to use in the HTTP basic authentication when accessing the URI resource
        password:
          type: string
          description: The password to use in the HTTP basic authentication when accessing the URI resource
        fileHash:
          type: string
          description: The MD5 has to check resource integrity after download
        fileType:
          $ref: '#/components/schemas/devicePackageDownloadRequestFileType'
        install:
          type: boolean
          description: Whether to install or not the package after download
        reboot:
          type: boolean
          description: Whether to reboot the device after installation of the package
        rebootDelay:
          type: integer
          description: The delay in milliseconds to delay the reboot after installation
        advancedOptions:
          type: object
          properties:
            restart:
              type: boolean
              description: Whether or not to resume the partial download of the URI resource. The resource is identified by name and version provided
            blockSize:
              type: integer
              description: The block size in kBi to use while downloading the URI resource
            blockDelay:
              type: integer
              description: The delay in ms to delay each block download of the URI resource
            blockTimeout:
              type: integer
              description: The delay timeout to download each block of the URI resource
            notifyBlockSize:
              type: integer
              description: The amount of kBi to download before sending a new Operation Notification to the platform
            installVerifyURI:
              type: string
              description: The URI to download the script that can verify that the package installation has successfully completed.
      required:
        - uri
        - name
        - version
      example:
        uri: 'https://download.eclipse.org/kura/releases/4.1.0/org.eclipse.kura.demo.heater_1.0.500.dp'
        name: heater
        version: 1.0.500
        username: username
        password: password
        fileHash: 'MD5:0d04154164145cd6b2167fdd457ed28f'
        fileType: DEPLOYMENT_PACKAGE
        install: true
        reboot: false
        rebootDelay: 0
        advancedOptions:
          restart: false
          blockSize: 128
          blockDelay: 0
          blockTimeout: 5000
          notifyBlockSize: 256
          installVerifyURI: 'https://download.eclipse.org/kura/releases/4.1.0/org.eclipse.kura.demo.heater_1.0.500.verifier.sh'
    devicePackageUninstallRequest:
      type: object
      properties:
        name:
          type: string
          description: The package name to uninstall
        version:
          type: string
          description: The package verson to uninstall
        reboot:
          type: boolean
          description: Whether to reboot the device after uninstall of the package
        rebootDelay:
          type: integer
          description: The delay in milliseconds to delay the reboot after uninstallation
      required:
        - name
        - version
      example:
        name: org.eclipse.kura.demo.heater
        version: 1.0.500
        reboot: false
        rebootDelay: 0
    requestInput:
      type: object
      description: A Device Request
      properties:
        position:
          $ref: '#/components/schemas/position'
        channel:
          type: object
          properties:
            semanticParts:
              type: array
              items:
                type: string
            appName:
              type: string
            version:
              type: string
            method:
              $ref: '#/components/schemas/action'
            resources:
              type: array
              items:
                type: string
      example:
        channel:
          type: genericRequestChannel
          method: EXECUTE
          appName: CMD
          version: V1
          resources:
            - command
        payload:
          metrics:
            - valueType: string
              value: sleep
              name: command.command
            - valueType: string
              value: '180'
              name: command.argument
    requestOutput:
      type: object
      properties:
        id:
          type: string
          format: uuid
        scopeId:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
        deviceId:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
        clientId:
          type: string
        receivedOn:
          type: string
          format: date-time
        sentOn:
          type: string
          format: date-time
        capturedOn:
          type: string
          format: date-time
        position:
          $ref: '#/components/schemas/position'
        channel:
          type: object
          properties:
            appName:
              type: string
            version:
              type: string
            semanticParts:
              type: array
              items:
                type: string
        payload:
          type: object
          properties:
            exceptionMessage:
              type: string
            exceptionStack:
              type: string
            metrics:
              type: array
              items:
                type: object
            body:
              type: string
              format: base64
        responseCode:
          type: string
          enum:
            - ACCEPTED
            - SENT
            - BAD_REQUEST
            - NOT_FOUND
            - INTERNAL_ERROR
      example:
        capturedOn: '2019-09-13T13:53:09.447Z'
        channel:
          appName: CMD
          version: V1
        payload:
          metrics:
            - valueType: string
              value: 'false'
              name: command.timedout
            - valueType: string
              value: |
                sleep: missing operand
                Try 'sleep --help' for more information.
              name: command.stderr
            - valueType: string
              name: kapua.response.exception.stack
            - valueType: string
              name: kapua.response.exception.message
            - valueType: string
              value: '1'
              name: command.exit.code
            - valueType: string
              value: ''
              name: command.stdout
            - valueType: string
              value: '200'
              name: response.code
        receivedOn: '2019-09-13T13:53:09.466Z'
        scopeId: AQ
        sentOn: '2019-09-13T13:53:09.447Z'
    snapshot:
      type: object
      properties:
        id:
          type: string
        timestamp:
          type: integer
    snapshots:
      type: object
      properties:
        snapshotId:
          type: array
          items:
            $ref: '#/components/schemas/snapshot'
      example:
        type: deviceSnapshots
        snapshotId:
          - id: '0'
            timestamp: 0
          - id: '1568300687500'
            timestamp: 1568300687500
    deviceTamperServiceInfo:
      allOf:
        - type: object
          description: Identifies one available Tamper Service
          properties:
            id:
              type: string
              description: The unique id of the service
            name:
              type: string
              description: The display name of the service
          example:
            id: com.eurotech.framework.security.aide.AideTamperDetectionService
            name: AIDE Integrity Check
    deviceTamperServices:
      allOf:
        - type: object
          description: List of available Tamper Services
          properties:
            serviceInfos:
              type: array
              items:
                $ref: '#/components/schemas/deviceTamperServiceInfo'
          example:
            serviceInfos:
              - id: com.eurotech.framework.security.aide.AideTamperDetectionService
                name: AIDE Integrity Check
    deviceTamperServiceStatusProperty:
      allOf:
        - type: object
          description: A property of the tamper service
          properties:
            key:
              type: string
              description: its unique name
            value:
              description: its value
              type: string
          example:
            key: timestamp
            value: 1627555793414
    deviceTamperServiceStatus:
      allOf:
        - type: object
          description: The information about tampering of a Tamper Service
          properties:
            tampered:
              type: boolean
              description: Whether has been tampered or not.
            timestamp:
              type: string
              description: The timestamp of the event
              format: date-time
            serviceProperties:
              type: array
              description: Additional properties about the Tamper Service
              items:
                $ref: '#/components/schemas/deviceTamperServiceStatusProperty'
          example:
            tampered: false
            timestamp: '2021-07-29T10:49:53.414Z'
            serviceProperties:
              - key: AIDE Command
                value: CHECK
              - key: timestamp
                value: 1627555793414
    domain:
      allOf:
        - $ref: '#/components/schemas/kapuaEntity'
        - type: object
          properties:
            groupable:
              type: boolean
            actions:
              type: array
              items:
                type: string
            name:
              type: string
          example:
            type: domain
            id: AQ
            createdOn: '2019-09-10T15:08:47.851Z'
            createdBy: AQ
            name: account
            actions:
              - delete
              - write
              - read
            groupable: false
    domainListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/domain'
          example:
            type: domainListResult
            limitExceeded: false
            size: 1
            items:
              - type: domain
                id: AQ
                createdOn: '2019-09-10T15:08:47.851Z'
                createdBy: AQ
                name: account
                actions:
                  - delete
                  - write
                  - read
                groupable: false
    usage:
      type: object
      properties:
        name:
          type: string
    endpointInfo:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - $ref: '#/components/schemas/endpointInfoCreator'
        - type: object
          example:
            type: endpointInfo
            id: PEMf9sotlls
            scopeId: AQ
            createdOn: '2019-09-13T14:52:19.850Z'
            createdBy: AQ
            modifiedOn: '2019-09-13T14:52:19.850Z'
            modifiedBy: AQ
            optlock: 1
            dns: 10.200.12.144
            port: 1883
            schema: mqtt
            secure: false
            usages:
              - name: MESSAGE_BROKER
              - name: PROVISION
            endpointType: resource
    endpointInfoCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntityCreator'
        - type: object
          properties:
            schema:
              type: string
            dns:
              type: string
            port:
              type: integer
            secure:
              type: boolean
            usages:
              type: array
              items:
                $ref: '#/components/schemas/usage'
            endpointType:
              type: string
              enum:
                - resource
                - cors
          example:
            schema: mqtt
            dns: 10.200.12.148
            port: '1883'
            secure: false
            usages:
              - name: MESSAGE_BROKER
              - name: PROVISION
            endpointType: resource
    endpointInfoListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/endpointInfo'
          example:
            type: endpointInfoListResult
            limitExceeded: false
            size: 1
            items:
              - type: endpointInfo
                id: PEMf9sotlls
                scopeId: AQ
                createdOn: '2019-09-13T14:52:19.850Z'
                createdBy: AQ
                modifiedOn: '2019-09-13T14:52:19.850Z'
                modifiedBy: AQ
                optlock: 1
                dns: 10.200.12.148
                port: 1883
                schema: mqtt
                secure: false
                usages:
                  - name: MESSAGE_BROKER
                  - name: PROVISION
                endpointType: resource
    group:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - type: object
          example:
            type: group
            id: Skm7PvmgOh0
            scopeId: AQ
            createdOn: '2019-09-13T15:16:09.174Z'
            createdBy: AQ
            modifiedOn: '2019-09-13T15:16:09.174Z'
            modifiedBy: AQ
            optlock: 1
            name: group-1
            description: An Access Group
    groupCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntityCreator'
        - type: object
          example:
            name: group-1
            description: An Access Group
    groupListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/group'
          example:
            type: groupListResult
            limitExceeded: false
            size: 1
            items:
              - type: group
                id: Skm7PvmgOh0
                scopeId: AQ
                createdOn: '2019-09-13T15:16:09.174Z'
                createdBy: AQ
                modifiedOn: '2019-09-13T15:16:09.174Z'
                modifiedBy: AQ
                optlock: 1
                name: group-1
                description: An Access Group
    job:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - type: object
          example:
            type: job
            id: auSoU2ph1bY
            scopeId: AQ
            createdOn: '2019-12-06T10:59:47.000Z'
            createdBy: AQ
            modifiedOn: '2019-12-06T10:59:47.000Z'
            modifiedBy: AQ
            optlock: 1
            name: new_job
    jobCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntityCreator'
      example:
        type: jobCreator
        name: newJob
        description: A new Job with a fancy description
    jobListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/job'
          example:
            type: jobListResult
            limitExceeded: false
            size: 1
            items:
              - type: job
                id: auSoU2ph1bY
                scopeId: AQ
                createdOn: '2019-12-06T10:59:47.000Z'
                createdBy: AQ
                modifiedOn: '2019-12-06T10:59:47.000Z'
                modifiedBy: AQ
                optlock: 1
                name: new_job
    isJobRunning:
      type: object
      properties:
        jobId:
          $ref: '#/components/schemas/kapuaId'
        isRunning:
          type: boolean
      example:
        isRunning: true
    jobStartOptions:
      type: object
      properties:
        targetIdSublist:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/kapuaId'
              - description: The ID of a Job Target
        resetStepIndex:
          type: boolean
        fromStepIndex:
          type: number
        enqueue:
          type: boolean
    jobExecutionStatus:
      description: The status of a job execution
      type: string
      enum:
        - RUNNING
        - TERMINATED
    jobExecution:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - type: object
          properties:
            startedOn:
              description: The moment when the job execution started
              type: string
              format: date-time
            endedOn:
              description: The moment when the job execution ended
              type: string
              format: date-time
            log:
              description: logs for the job execution
              type: string
            jobId:
              description: job id for this job execution
              $ref: '#/components/schemas/kapuaId'
            targetIds:
              type: array
              description: the IDs of the job target
              items:
                allOf:
                  - $ref: '#/components/schemas/kapuaId'
            status:
              $ref: '#/components/schemas/jobExecutionStatus'
          example:
            type: jobExecution
            id: GTh9xBWezHY
            scopeId: AQ
            createdOn: '2019-12-06T11:00:58.000Z'
            createdBy: AQ
            modifiedOn: '2019-12-06T11:01:00.000Z'
            modifiedBy: AQ
            optlock: 2
            endedOn: '2019-12-06T12:01:00+01:00'
            jobId: {}
            log: "[INFO] 12/6/19 11:00 AM - Running before job...\n[INFO] 12/6/19 11:00 AM - Run configuration:\n[INFO] 12/6/19 11:00 AM - \tTarget count:           all\n[INFO] 12/6/19 11:00 AM - \tReset step index:       false\n[INFO] 12/6/19 11:00 AM - \tFrom step index:        0\n[INFO] 12/6/19 11:00 AM - \tResuming job execution: none\n[INFO] 12/6/19 11:00 AM - \tEnqueue:                false\n[INFO] 12/6/19 11:00 AM - Creating job execution...\n[INFO] 12/6/19 11:00 AM - Creating job execution... DONE!\n[INFO] 12/6/19 11:00 AM - Running before job... DONE!\n[INFO] 12/6/19 11:00 AM - Reading step: download package (index: 0)...\n[INFO] 12/6/19 11:00 AM - Reading step: download package (index: 0)... DONE!\n[INFO] 12/6/19 11:00 AM - RReading target: pahoClient (id: SbQbzB6oOOo)...\n[INFO] 12/6/19 11:00 AM - Reading target:pahoClient (id:SbQbzB6oOOo)... DONE!\n[INFO] 12/6/19 11:00 AM - Processing target: pahoClient (id: SbQbzB6oOOo)\n[INFO] 12/6/19 11:01 AM - Processing target: pahoClient (id: SbQbzB6oOOo) - DONE!\n[INFO] 12/6/19 11:01 AM - Reading target: client2 (id: A4QbzB6oZZo)...\n[INFO] 12/6/19 11:01 AM - Reading target: client2 (id: A4QbzB6oZZo)... DONE!\n[INFO] 12/6/19 11:01 AM - Writing target processing results...\n[INFO] 12/6/19 11:01 AM - Writing target processing results... DONE!\n[INFO] 12/6/19 11:01 AM - Running after job...\n"
            startedOn: '2019-12-06T12:00:58+01:00'
            targetIds:
              - Y-vYl9TKaf8
    jobExecutionListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/jobExecution'
          example:
            type: jobExecutionListResult
            limitExceeded: true
            size: 50
            items:
              - type: jobExecution
                id: GTh9xBWezHY
                scopeId: AQ
                createdOn: '2019-12-06T11:00:58.000Z'
                createdBy: AQ
                modifiedOn: '2019-12-06T11:01:00.000Z'
                modifiedBy: AQ
                optlock: 2
                endedOn: '2019-12-06T12:01:00+01:00'
                jobId: {}
                log: "[INFO] 12/6/19 11:00 AM - Running before job...\n[INFO] 12/6/19 11:00 AM - Run configuration:\n[INFO] 12/6/19 11:00 AM - \tTarget count:           all\n[INFO] 12/6/19 11:00 AM - \tReset step index:       false\n[INFO] 12/6/19 11:00 AM - \tFrom step index:        0\n[INFO] 12/6/19 11:00 AM - \tResuming job execution: none\n[INFO] 12/6/19 11:00 AM - \tEnqueue:                false\n[INFO] 12/6/19 11:00 AM - Creating job execution...\n[INFO] 12/6/19 11:00 AM - Creating job execution... DONE!\n[INFO] 12/6/19 11:00 AM - Running before job... DONE!\n[INFO] 12/6/19 11:00 AM - Reading step: download package (index: 0)...\n[INFO] 12/6/19 11:00 AM - Reading step: download package (index: 0)... DONE!\n[INFO] 12/6/19 11:00 AM - RReading target: pahoClient (id: SbQbzB6oOOo)...\n[INFO] 12/6/19 11:00 AM - Reading target:pahoClient (id:SbQbzB6oOOo)... DONE!\n[INFO] 12/6/19 11:00 AM - Processing target: pahoClient (id: SbQbzB6oOOo)\n[INFO] 12/6/19 11:01 AM - Processing target: pahoClient (id: SbQbzB6oOOo) - DONE!\n[INFO] 12/6/19 11:01 AM - Reading target: client2 (id: A4QbzB6oZZo)...\n[INFO] 12/6/19 11:01 AM - Reading target: client2 (id: A4QbzB6oZZo)... DONE!\n[INFO] 12/6/19 11:01 AM - Writing target processing results...\n[INFO] 12/6/19 11:01 AM - Writing target processing results... DONE!\n[INFO] 12/6/19 11:01 AM - Running after job...\n"
                startedOn: '2019-12-06T12:00:58+01:00'
                targetIds:
                  - Y-vYl9TKaf8
    jobStep:
      description: Step of the Job
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - type: object
          properties:
            jobId:
              type: string
            jobStepDefinitionId:
              type: string
            stepIndex:
              type: integer
            stepProperties:
              type: array
              items:
                description: Property of a Job's Step
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                      propertyType:
                        type: string
                      propertyValue:
                        type: string
          example:
            type: jobStep
            id: BL2MaF-ldS0
            scopeId: AQ
            createdOn: '2019-12-06T11:00:21.000Z'
            createdBy: AQ
            modifiedOn: '2019-12-06T11:00:21.000Z'
            modifiedBy: AQ
            optlock: 1
            name: step_one
            jobId: auSoU2ph1bY
            jobStepDefinitionId: Cg
            stepIndex: 0
            stepProperties:
              - name: commandInput
                propertyType: org.eclipse.kapua.service.device.management.command.DeviceCommandInput
                propertyValue: |-
                  <?xml version="1.0" encoding="UTF-8"?>
                   <commandInput>
                      <command>ls</command>
                      <timeout>30000</timeout>
                      <runAsynch>false</runAsynch>
                   </commandInput>
              - name: timeout
                propertyType: java.lang.Long
    jobStepCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntityCreator'
        - type: object
          properties:
            stepIndex:
              type: number
            jobStepDefinitionId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
            stepProperties:
              type: array
              items:
                $ref: '#/components/schemas/jobStepDefinitionProperty'
            jobStepProperties:
              type: array
              deprecated: true
              items:
                $ref: '#/components/schemas/jobStepDefinitionProperty'
      example:
        type: jobStepCreator
        name: Step 1
        description: A step with a description
        stepIndex: 0
        jobStepDefinitionId: Aw
        stepProperties:
          - name: bundleId
            propertyType: java.lang.String
            propertyValue: '999'
        jobStepProperties:
          - name: bundleId
            propertyType: java.lang.String
            propertyValue: '999'
    jobStepListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/jobStep'
          example:
            type: jobStepListResult
            limitExceeded: false
            size: 1
            items:
              - type: jobStep
                id: BL2MaF-ldS0
                scopeId: AQ
                createdOn: '2019-12-06T11:00:21.000Z'
                createdBy: AQ
                modifiedOn: '2019-12-06T11:00:21.000Z'
                modifiedBy: AQ
                optlock: 1
                name: step_one
                jobId: auSoU2ph1bY
                jobStepDefinitionId: Cg
                stepIndex: 0
                stepProperties:
                  - name: commandInput
                    propertyType: org.eclipse.kapua.service.device.management.command.DeviceCommandInput
                    propertyValue: |-
                      <?xml version="1.0" encoding="UTF-8"?>
                       <commandInput>
                          <command>ls</command>
                          <timeout>30000</timeout>
                          <runAsynch>false</runAsynch>
                       </commandInput>
                  - name: timeout
                    propertyType: java.lang.Long
    jobStepDefinition:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - type: object
          properties:
            stepType:
              type: string
            processorName:
              type: string
            readerName:
              type: string
            writerName:
              type: string
            stepProperties:
              type: array
              items:
                $ref: '#/components/schemas/jobStepDefinitionProperty'
      example:
        type: jobStepDefinition
        id: AQ
        createdOn: '2021-01-29T14:46:40.257Z'
        createdBy: AQ
        modifiedOn: '2021-01-29T14:46:40.257Z'
        modifiedBy: AQ
        optlock: 0
        name: Asset Write
        description: Writes to an asset using the Device Asset Management Service
        processorName: org.eclipse.kapua.service.device.management.asset.job.DeviceAssetWriteTargetProcessor
        stepProperties:
          - exampleValue: |-
              <?xml version="1.0" encoding="UTF-8"?>
              <deviceAssets>
                  <deviceAsset>
                      <name>assetName</name>
                      <channels>
                          <channel>
                              <valueType>binary</valueType>
                              <value>EGVzdCBzdHJpbmcgdmFsdWU=</value>
                              <name>binaryTest</name>
                          </channel>
                      </channels>
                  </deviceAsset>
              </deviceAssets>
            name: assets
            description: Execute request to write values on a specified set of channels and assets to the target devices of the Job
            propertyType: org.eclipse.kapua.service.device.management.asset.DeviceAssets
            required: true
            secret: false
          - name: password
            propertyType: java.lang.String
            required: true
            secret: true
          - name: timeout
            description: The amount of time the step waits a response before the operation is considered failed. The time is calculated from when the request is sent to the device
            propertyType: java.lang.Long
            propertyValue: '30000'
            required: false
            secret: false
        stepType: TARGET
    jobStepDefinitionProperty:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          description: The description that may contain textual information for the user on how to input this property
        propertyType:
          type: string
        propertyValue:
          type: string
        required:
          type: boolean
        secret:
          type: boolean
        exampleValue:
          type: string
          readOnly: true
        minLength:
          type: integer
          readOnly: true
        maxLength:
          type: integer
          readOnly: true
        minValue:
          type: string
          readOnly: true
        maxValue:
          type: string
          readOnly: true
        validationRegex:
          type: string
          readOnly: true
    jobStepDefinitionListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/jobStepDefinition'
          example:
            type: jobStepDefinitionListResult
            limitExceeded: false
            size: 2
            items:
              - type: jobStepDefinition
                id: AQ
                createdOn: '2021-01-29T14:46:40.257Z'
                createdBy: AQ
                modifiedOn: '2021-01-29T14:46:40.257Z'
                modifiedBy: AQ
                optlock: 0
                name: Asset Write
                description: Execute request to write values on a specified set of channels and assets to the target devices of the Job
                processorName: org.eclipse.kapua.service.device.management.asset.job.DeviceAssetWriteTargetProcessor
                stepProperties:
                  - exampleValue: |-
                      <?xml version="1.0" encoding="UTF-8"?>
                      <deviceAssets>
                          <deviceAsset>
                              <name>assetName</name>
                              <channels>
                                  <channel>
                                      <valueType>binary</valueType>
                                      <value>EGVzdCBzdHJpbmcgdmFsdWU=</value>
                                      <name>binaryTest</name>
                                  </channel>
                              </channels>
                          </deviceAsset>
                      </deviceAssets>
                    name: assets
                    description: Execute request to write values on a specified set of channels and assets to the target devices of the Job
                    propertyType: org.eclipse.kapua.service.device.management.asset.DeviceAssets
                    required: true
                    secret: false
                  - name: timeout
                    description: The amount of time the step waits a response before the operation is considered failed. The time is calculated from when the request is sent to the device
                    propertyType: java.lang.Long
                    propertyValue: '30000'
                    required: false
                    secret: false
                stepType: TARGET
              - type: jobStepDefinition
                id: Ag
                createdOn: '2021-01-29T14:46:48.061Z'
                createdBy: AQ
                modifiedOn: '2021-01-29T14:46:48.061Z'
                modifiedBy: AQ
                optlock: 0
                name: Bundle Start
                description: Execute request to start a bundle to the target devices of the Job
                processorName: org.eclipse.kapua.service.device.management.bundle.job.DeviceBundleStartTargetProcessor
                stepProperties:
                  - name: bundleId
                    description: Numeric identifier of the bundle installed in the device
                    propertyType: java.lang.String
                    required: true
                    secret: false
                  - name: timeout
                    description: The amount of time the step waits a response before the operation is considered failed. The time is calculated from when the request is sent to the device
                    propertyType: java.lang.Long
                    propertyValue: '30000'
                    required: false
                    secret: false
                stepType: TARGET
    jobTarget:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - $ref: '#/components/schemas/jobTargetCreator'
        - type: object
          properties:
            status:
              type: string
              enum:
                - PROCESS_OK
                - PROCESS_FAILED
                - PROCESS_AWAITING
                - AWAITING_COMPLETION
                - NOTIFIED_COMPLETION
            stepIndex:
              type: integer
            statusMessage:
              type: string
    jobTargetCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntityCreator'
        - type: object
          properties:
            jobId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the Job to attach the target to
            jobTargetId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the Device to attach the target to
          example:
            type: jobTargetCreator
            jobId: auSoU2ph1bY
            jobTargetId: JMQdKuPgUjE
    jobTargetListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/jobTarget'
          example:
            type: jobTargetListResult
            limitExceeded: false
            size: 1
            items:
              - type: jobTarget
                id: Y-vYl9TKaf8
                scopeId: AQ
                createdOn: '2019-12-06T11:00:02.000Z'
                createdBy: AQ
                modifiedOn: '2019-12-06T11:01:00.000Z'
                modifiedBy: AQ
                optlock: 2
                jobId: auSoU2ph1bY
                jobTargetId: VBk_ZDZSOV0
                status: PROCESS_OK
                stepIndex: 0
              - type: jobTarget
                id: Y-vYl9TKaf8
                scopeId: AQ
                createdOn: '2019-12-06T11:00:02.000Z'
                createdBy: AQ
                modifiedOn: '2019-12-06T11:01:00.000Z'
                modifiedBy: AQ
                optlock: 2
                jobId: baSSoU2ph1bY
                jobTargetId: VRG42ZDZSOV
                status: PROCESS_FAILED
                statusMessage: Device not connected
                stepIndex: 0
    jobTrigger:
      description: Trigger for the Job
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - type: object
          properties:
            startsOn:
              type: string
              format: date-time
            endsOn:
              type: string
              format: date-time
            triggerDefinitionId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
            triggerProperties:
              type: array
              items:
                $ref: '#/components/schemas/triggerProperty'
          example:
            type: trigger
            id: OlIPEFS4MYU
            scopeId: AQ
            createdOn: '2019-12-06T11:01:16.000Z'
            createdBy: AQ
            modifiedOn: '2019-12-06T11:01:16.000Z'
            modifiedBy: AQ
            optlock: 1
            name: cron
            description: A trigger description
            endsOn: '2019-12-07T01:30:00+01:00'
            startsOn: '2019-12-06T12:00:00+01:00'
            triggerDefinitionId: AQ
            triggerProperties:
              - name: cronExpression
                propertyType: java.lang.String
                propertyValue: '* 0/5 * * * ?'
              - name: jobId
                propertyType: org.eclipse.kapua.model.id.KapuaId
                propertyValue: auSoU2ph1bY
              - name: scopeId
                propertyType: org.eclipse.kapua.model.id.KapuaId
                propertyValue: AQ
    jobTriggerCreator:
      description: An object that contains the informations needed to create a Job Trigger
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntityCreator'
        - type: object
          properties:
            startsOn:
              type: string
              format: date-time
            endsOn:
              type: string
              format: date-time
            triggerDefinitionId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
            triggerProperties:
              type: array
              items:
                $ref: '#/components/schemas/triggerProperty'
      example:
        type: triggerCreator
        name: A trigger
        description: A trigger description
        startsOn: '2021-01-31T00:00:00.000Z'
        triggerDefinitionId: AQ
        triggerProperties:
          - name: cronExpression
            propertyType: java.lang.String
            propertyValue: '* * * * * ? *'
    jobTriggerListResult:
      description: List of Triggers for a Job
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/jobTrigger'
          example:
            type: triggerListResult
            limitExceeded: false
            size: 3
            items:
              - type: trigger
                id: Q5psa2kJzks
                scopeId: AQ
                createdOn: '2019-12-06T11:00:49.000Z'
                createdBy: AQ
                modifiedOn: '2019-12-06T11:00:49.000Z'
                modifiedBy: AQ
                optlock: 1
                name: interval
                description: A trigger description
                startsOn: '2019-12-06T12:00:00+01:00'
                triggerDefinitionId: Ag
                triggerProperties:
                  - name: interval
                    propertyType: java.lang.Integer
                    propertyValue: '3600'
                  - name: jobId
                    propertyType: org.eclipse.kapua.model.id.KapuaId
                    propertyValue: auSoU2ph1bY
                  - name: scopeId
                    propertyType: org.eclipse.kapua.model.id.KapuaId
                    propertyValue: AQ
              - type: trigger
                id: OlIPEFS4MYU
                scopeId: AQ
                createdOn: '2019-12-06T11:01:16.000Z'
                createdBy: AQ
                modifiedOn: '2019-12-06T11:01:16.000Z'
                modifiedBy: AQ
                optlock: 1
                name: cron
                description: A trigger description
                endsOn: '2019-12-07T01:30:00+01:00'
                startsOn: '2019-12-06T12:00:00+01:00'
                triggerDefinitionId: AQ
                triggerProperties:
                  - name: cronExpression
                    propertyType: java.lang.String
                    propertyValue: '* 0/5 * * * ?'
                  - name: jobId
                    propertyType: org.eclipse.kapua.model.id.KapuaId
                    propertyValue: auSoU2ph1bY
                  - name: scopeId
                    propertyType: org.eclipse.kapua.model.id.KapuaId
                    propertyValue: AQ
              - type: trigger
                id: GOQMkJEQCPg
                scopeId: AQ
                createdOn: '2019-12-06T11:01:24.000Z'
                createdBy: AQ
                modifiedOn: '2019-12-06T11:01:24.000Z'
                modifiedBy: AQ
                optlock: 1
                name: device_conn
                description: A trigger description
                startsOn: '2019-12-06T12:00:00+01:00'
                triggerDefinitionId: Aw
                triggerProperties:
                  - name: jobId
                    propertyType: org.eclipse.kapua.model.id.KapuaId
                    propertyValue: auSoU2ph1bY
                  - name: scopeId
                    propertyType: org.eclipse.kapua.model.id.KapuaId
                    propertyValue: AQ
    firedTrigger:
      allOf:
        - $ref: '#/components/schemas/kapuaEntity'
        - type: object
          example:
            type: firedTrigger
            id: OlIPEFS4MYU
            scopeId: AQ
            createdOn: '2019-12-06T11:01:16.000Z'
            createdBy: AQ
            firedOn: '2019-12-07T01:30:00+01:00'
            message: A error message
            status:
              type: string
              enum:
                - FIRED
                - FAILED
            triggerId:
              name: triggerId
              in: path
              description: The ID of the Job Trigger on which to perform the operation
              schema:
                $ref: '#/components/schemas/kapuaId'
              required: true
    firedTriggerListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/firedTrigger'
          example:
            - type: triggerListResult
              limitExceeded: false
              size: 3
              items:
                - type: firedTrigger
                  id: OlIPEFS4MYU
                  scopeId: AQ
                  createdOn: '2019-12-06T11:03:16.000Z'
                  createdBy: AQ
                  firedOn: '2019-12-06T11:03:16.000Z'
                  message: A error message
                  status: FAILED
                  triggerId: auSoU2ph1bY
                - type: firedTrigger
                  id: OlIPEFS4MYU
                  scopeId: AQ
                  createdOn: '2019-12-06T11:02:16.000Z'
                  createdBy: AQ
                  firedOn: '2019-12-06T11:02:16.000Z'
                  status: FIRED
                  triggerId: auSoU2ph1bY
                - type: firedTrigger
                  id: OlIPEFS4MYU
                  scopeId: AQ
                  createdOn: '2019-12-06T11:01:16.000Z'
                  createdBy: AQ
                  firedOn: '2019-12-06T11:01:16.000Z'
                  status: FIRED
                  triggerId: auSoU2ph1bY
    triggerInvalidDatesExceptionInfo:
      description: The trigger data range is invalid
      allOf:
        - $ref: '#/components/schemas/exceptionInfo'
        - properties:
            startsOn:
              type: string
              description: The given startsOn
              format: date-time
            endsOn:
              type: string
              description: The given endsOn
              format: date-time
            currentDate:
              type: string
              description: The current date
              format: date-time
      example:
        type: 'triggerInvalidDatesExceptionInfo,'
        httpErrorCode: '400,'
        message: 'Trigger with given startsOn and endsOn will never fire according to the current date,'
        kapuaErrorCode: 'TRIGGER_INVALID_DATES,'
        startsOn: '2021-01-31T00:00:00.000Z,'
        endsOn: '2023-01-31T00:00:00.000Z,'
        currentDate: '2024-11-28T14:49:46.671Z'
    triggerInvalidSchedulingExceptionInfo:
      description: The trigger schedule with the given data range is invalid
      allOf:
        - $ref: '#/components/schemas/exceptionInfo'
        - properties:
            startsOn:
              type: string
              description: The given startsOn
              format: date-time
            endsOn:
              type: string
              description: The given endsOn
              format: date-time
            triggerDefinitionId:
              description: The given TriggerDefinition.id
              allOf:
                - $ref: '#/components/schemas/kapuaId'
            scheduling:
              type: string
              description: The given scheduling
      example:
        type: 'triggerInvalidSchedulingExceptionInfo,'
        httpErrorCode: '400,'
        message: 'Trigger with given startsOn and endsOn triggerDefinitionId ''1'' will never fire according to the given schedule ''* * * * * ? 2020'','
        kapuaErrorCode: 'TRIGGER_INVALID_SCHEDULE,'
        startsOn: '2021-01-31T00:00:00.000Z,'
        endsOn: '2025-01-31T00:00:00.000Z,'
        triggerDefinitionId: 'AQ,'
        scheduling: '* * * * * ? 2020'
    role:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - type: object
          example:
            type: role
            id: KmhOD4JHfwk
            scopeId: AQ
            createdOn: '2019-09-16T07:33:26.719Z'
            createdBy: AQ
            modifiedOn: '2019-09-16T07:33:26.719Z'
            modifiedBy: AQ
            optlock: 1
            name: new-role
            description: A new role
    roleCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntityCreator'
        - type: object
          properties:
            permissions:
              type: array
              items:
                $ref: '#/components/schemas/permission'
          example:
            name: new-role
            description: A new role
            permissions:
              - domain: broker
                action: connect
                forwardable: true
                targetScopeId: AQ
    roleListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/role'
          example:
            type: roleListResult
            limitExceeded: false
            size: 2
            items:
              - type: role
                id: AQ
                scopeId: AQ
                createdOn: '2019-09-10T15:08:50.701Z'
                createdBy: AQ
                modifiedOn: '2019-09-10T15:08:50.701Z'
                modifiedBy: AQ
                optlock: 0
                name: admin
              - type: role
                id: OYLRT30Z9sA
                scopeId: AQ
                createdOn: '2019-09-11T14:48:33.531Z'
                createdBy: AQ
                modifiedOn: '2019-09-11T14:48:33.531Z'
                modifiedBy: AQ
                optlock: 1
                name: role
                description: desc
    rolePermission:
      allOf:
        - $ref: '#/components/schemas/kapuaEntity'
        - type: object
          properties:
            roleId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
            permission:
              $ref: '#/components/schemas/permission'
          example:
            type: rolePermission
            id: BpbQqk31GLc
            scopeId: AQ
            createdOn: '2019-09-16T07:49:51.117Z'
            createdBy: AQ
            roleId: OYLRT30Z9sA
            permission:
              domain: domain
              action: read
              forwardable: true
    rolePermissionCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaEntityCreator'
        - type: object
          properties:
            permission:
              $ref: '#/components/schemas/permission'
          example:
            permission:
              domain: account
              action: read
              forwardable: true
    rolePermissionListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/rolePermission'
          example:
            type: rolePermissionListResult
            limitExceeded: false
            size: 2
            items:
              - type: rolePermission
                id: BPJyd1ObUK8
                scopeId: AQ
                createdOn: '2019-09-16T07:46:06.191Z'
                createdBy: AQ
                roleId: OYLRT30Z9sA
                permission:
                  domain: broker
                  action: connect
                  forwardable: true
              - type: rolePermission
                id: Zi4XYBuG7Xw
                scopeId: AQ
                createdOn: '2019-09-16T07:46:14.082Z'
                createdBy: AQ
                roleId: OYLRT30Z9sA
                permission:
                  domain: device
                  action: read
                  forwardable: true
    servicePropertyDefinition:
      type: object
      properties:
        name:
          description: The name of the field that is represented by this property
          type: string
        array:
          description: A flag indicating whether this property has an array value or not
          type: boolean
        encrypted:
          description: A flag indicating whether this property value is encrypted or not
          type: boolean
        type:
          description: The data type of this property
          type: string
        value:
          description: The value of this property
          type: array
          items:
            type: string
      example:
        name: maxNumberChildEntities
        array: false
        encrypted: false
        type: Integer
        value:
          - '0'
    serviceIcon:
      type: object
      properties:
        resource:
          type: string
        size:
          type: integer
    serviceComponentConfiguration:
      type: object
      properties:
        name:
          description: A name for the Service
          type: string
        id:
          description: An ID for the Service
          type: string
        definition:
          description: An object containing all the Property Definitions
          type: object
          properties:
            id:
              type: string
            AD:
              type: array
              items:
                $ref: '#/components/schemas/serviceAttributeDefinition'
            Icon:
              type: array
              items:
                $ref: '#/components/schemas/serviceIcon'
            name:
              type: string
            description:
              type: string
        properties:
          description: An object containing all the Property Values
          type: object
          properties:
            property:
              type: array
              items:
                $ref: '#/components/schemas/servicePropertyDefinition'
      example:
        name: AccountService
        id: org.eclipse.kapua.service.account.AccountService
        definition:
          description: 'This is the configuration for the kapua AccountService. '
          id: org.eclipse.kapua.service.account.AccountService
          name: AccountService
          AD:
            - cardinality: 0
              default: 'false'
              description: Whether to allow infinite child accounts for this account or not.
              id: infiniteChildEntities
              name: infiniteChildAccounts
              required: true
              type: Boolean
              Option: []
            - cardinality: 0
              default: '0'
              description: Maximum number of child accounts that are allowed to be created for this account. Valid if infiniteChildAccounts set to false.
              id: maxNumberChildEntities
              min: '0'
              name: maxNumberChildAccounts
              required: true
              type: Integer
              Option: []
          Icon:
            - resource: OSGI-INF/account-service.png
              size: 32
        properties:
          property:
            - name: maxNumberChildEntities
              array: false
              encrypted: false
              type: Integer
              value:
                - '0'
            - name: infiniteChildEntities
              array: false
              encrypted: false
              type: Boolean
              value:
                - 'true'
    serviceComponentConfigurationInput:
      type: object
      properties:
        id:
          type: string
        properties:
          type: object
          properties:
            property:
              type: array
              items:
                $ref: '#/components/schemas/servicePropertyDefinition'
      example:
        id: org.eclipse.kapua.service.account.AccountService
        properties:
          property:
            - name: maxNumberChildEntities
              type: Integer
              value:
                - '7'
            - name: infiniteChildEntities
              type: Boolean
              value:
                - 'true'
    serviceComponentConfigurations:
      type: object
      properties:
        configuration:
          type: array
          items:
            $ref: '#/components/schemas/serviceComponentConfiguration'
      example:
        type: serviceConfiguration
        configuration:
          - name: AccountService
            id: org.eclipse.kapua.service.account.AccountService
            definition:
              description: 'This is the configuration for the kapua AccountService. '
              id: org.eclipse.kapua.service.account.AccountService
              name: AccountService
              AD:
                - cardinality: 0
                  default: 'false'
                  description: Whether to allow infinite child accounts for this account or not.
                  id: infiniteChildEntities
                  name: infiniteChildAccounts
                  required: true
                  type: Boolean
                  Option: []
                - cardinality: 0
                  default: '0'
                  description: Maximum number of child accounts that are allowed to be created for this account. Valid if infiniteChildAccounts set to false.
                  id: maxNumberChildEntities
                  min: '0'
                  name: maxNumberChildAccounts
                  required: true
                  type: Integer
                  Option: []
              Icon:
                - resource: OSGI-INF/account-service.png
                  size: 32
            properties:
              property:
                - name: maxNumberChildEntities
                  array: false
                  encrypted: false
                  type: Integer
                  value:
                    - '0'
                - name: infiniteChildEntities
                  array: false
                  encrypted: false
                  type: Boolean
                  value:
                    - 'true'
          - name: CredentialService
            id: org.eclipse.kapua.service.authentication.credential.CredentialService
            definition:
              description: 'This is the configuration for the kapua CredentialService. '
              id: org.eclipse.kapua.service.authentication.credential.CredentialService
              name: CredentialService
              AD:
                - cardinality: 0
                  default: 'true'
                  description: User lockout policy enable.
                  id: lockoutPolicy.enabled
                  name: lockoutPolicy.enabled
                  required: true
                  type: Boolean
                  Option: []
                - cardinality: 0
                  default: '3'
                  description: Number of consecutive login failures before the user gets locked. Valid if lockout policy is enabled.
                  id: lockoutPolicy.maxFailures
                  min: '0'
                  name: lockoutPolicy.maxFailures
                  required: true
                  type: Integer
                  Option: []
                - cardinality: 0
                  default: '3600'
                  description: The amount of time in seconds required after the last login failure to automatically reset the failure counter.
                  id: lockoutPolicy.resetAfter
                  min: '0'
                  name: lockoutPolicy.resetAfter
                  required: true
                  type: Integer
                  Option: []
                - cardinality: 0
                  default: '10800'
                  description: For a locked user the amount of time in seconds required after the last login failure to automatically unlock the user.
                  id: lockoutPolicy.lockDuration
                  min: '0'
                  name: lockoutPolicy.lockDuration
                  required: true
                  type: Integer
                  Option: []
              Icon:
                - resource: OSGI-INF/user-service.png
                  size: 32
            properties:
              property:
                - name: lockoutPolicy.resetAfter
                  array: false
                  encrypted: false
                  type: Integer
                  value:
                    - '3600'
                - name: lockoutPolicy.lockDuration
                  array: false
                  encrypted: false
                  type: Integer
                  value:
                    - '10800'
                - name: lockoutPolicy.enabled
                  array: false
                  encrypted: false
                  type: Boolean
                  value:
                    - 'true'
                - name: lockoutPolicy.maxFailures
                  array: false
                  encrypted: false
                  type: Integer
                  value:
                    - '3'
    serviceComponentConfigurationsInput:
      type: object
      properties:
        configuration:
          type: array
          items:
            $ref: '#/components/schemas/serviceComponentConfigurationInput'
      example:
        type: serviceConfiguration
        configuration:
          - id: org.eclipse.kapua.service.account.AccountService
            properties:
              property:
                - name: maxNumberChildEntities
                  type: Integer
                  value:
                    - '15'
                - name: infiniteChildEntities
                  type: Boolean
                  value:
                    - false
          - id: org.eclipse.kapua.service.authentication.credential.CredentialService
            properties:
              property:
                - name: lockoutPolicy.resetAfter
                  type: Integer
                  value:
                    - '36000'
                - name: lockoutPolicy.lockDuration
                  type: Integer
                  value:
                    - '108000'
                - name: lockoutPolicy.enabled
                  type: Boolean
                  value:
                    - 'false'
                - name: lockoutPolicy.maxFailures
                  type: Integer
                  value:
                    - '30'
    serviceOption:
      type: object
      properties:
        label:
          type: string
        value:
          type: string
    serviceAttributeDefinition:
      description: The definition for a single configuration value
      type: object
      properties:
        Option:
          type: array
          items:
            $ref: '#/components/schemas/serviceOption'
        default:
          description: The default value for this field
          type: string
        type:
          description: The data type of this field
          type: object
        cardinality:
          description: The cardinality of this field
          type: integer
        min:
          description: The minimum allowed value for this field
          type: string
        max:
          description: The maximum allowed value for this field
          type: string
        description:
          description: The description of this field
          type: string
        id:
          description: An unique ID for this field
          type: string
        required:
          description: A flag indicating whether this field is required or not
          type: boolean
        name:
          description: A human readable name for this field
          type: string
        allowSelfEdit:
          description: A flag indicating whether this field is editable by a user of the account to which the configuration belong to
          type: boolean
      example:
        cardinality: 0
        default: 'false'
        description: Whether to allow infinite groups for this account or not.
        id: infiniteChildEntities
        name: infiniteChildGroups
        required: true
        type: Boolean
        Option: []
    serviceConfigurationLimitExceededExceptionInfo:
      description: The update of the configuration for the service exceeds available resources of the current scope
      allOf:
        - $ref: '#/components/schemas/exceptionInfo'
        - properties:
            scopeId:
              description: The scope for which limit has been exceeded
              $ref: '#/components/schemas/kapuaId'
            servicePid:
              type: string
              description: The Pid of the service
            limitExceededBy:
              type: string
              description: The amount of excess
      example:
        type: ServiceConfigurationLimitExceededExceptionInfo
        httpErrorCode: 400
        message: The maximum of resources for the org.eclipse.kapua.service.account.AccountService service for the account 2 has been exceeded. The resource limit is exceeded by 3.
        kapuaErrorCode: LIMIT_EXCEEDED
        scopeId: 2
        servicePid: org.eclipse.kapua.service.account.AccountService
        limitExceededBy: 3
    serviceConfigurationParentLimitExceededExceptionInfo:
      description: The update of the configuration for the service exceeds available resources of the parent scope
      allOf:
        - $ref: '#/components/schemas/exceptionInfo'
        - properties:
            parentScopeId:
              description: The parent scope for which limit has been exceeded
              $ref: '#/components/schemas/kapuaId'
            servicePid:
              type: string
              description: The Pid of the service
            limitExceededBy:
              type: string
              description: The amount of excess
      example:
        type: ServiceConfigurationLimitExceededExceptionInfo
        httpErrorCode: 400
        message: The maximum of resources for the org.eclipse.kapua.service.account.AccountService service for the parent account 2 has been exceeded.
        kapuaErrorCode: PARENT_LIMIT_EXCEEDED
        scopeId: 2
        servicePid: org.eclipse.kapua.service.account.AccountService
        limitExceededBy: 3
    serviceConfigurationUpdateForbiddenExceptionInfo:
      description: The update of the configuration for the service contains an update to a property than cannot be updated
      allOf:
        - $ref: '#/components/schemas/exceptionInfo'
        - properties:
            scopeId:
              description: The scope for which the update is forbidden
              $ref: '#/components/schemas/kapuaId'
            servicePid:
              type: string
              description: The Pid of the service
            propertyId:
              type: string
              description: The property id for which the update is forbidden.
            propertyValue:
              type: string
              description: The property value for which the update is forbidden.
      example:
        type: serviceConfigurationUpdateForbiddenExceptionInfo
        httpErrorCode: 403
        message: Current User cannot update property maxNumberChildEntities of ServiceComponentConfiguration org.eclipse.kapua.service.account.AccountService of Account 2 with value 10
        kapuaErrorCode: UPDATE_PROPERTY_FORBIDDEN
        scopeId: 2
        servicePid: org.eclipse.kapua.service.account.AccountService
        propertyId: maxNumberChildEntities
        propertyValue: '10'
    controlMessage:
      type: object
      description: A Device Request
      properties:
        position:
          $ref: '#/components/schemas/position'
        channel:
          type: object
          properties:
            resources:
              type: array
              items:
                type: string
        payload:
          type: object
          properties:
            metrics:
              type: array
              items:
                $ref: '#/components/schemas/metric'
            body:
              type: string
              format: base64
      example:
        channel:
          type: controlChannel
          resources:
            - command
            - exec
        payload:
          metrics:
            - valueType: string
              value: sleep
              name: command.command
            - valueType: string
              value: '180'
              name: command.argument
    systemInfo:
      type: object
      description: System info
      properties:
        version:
          type: string
          description: Version of the system
        revision:
          type: string
          description: Last commit hash of the system
        buildDate:
          type: string
          description: Build date of the system
        buildNumber:
          type: string
          description: Build number of the system
        buildBranch:
          type: string
          description: Build branch of the system
      example:
        buildBranch: release/2.0.0
        buildNumber: 142
        buildDate: '2023-03-02T08:50:59Z UTC'
        revision: e53c7b7d4208204a0791ec296fa3d4dbe2344585
        version: 2.0.0
    tag:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - type: object
          example:
            type: tag
            id: FJ6-FLuIcok
            scopeId: AQ
            createdOn: '2019-09-16T08:52:32.562Z'
            createdBy: AQ
            modifiedOn: '2019-09-16T08:52:32.562Z'
            modifiedBy: AQ
            optlock: 1
            name: tag-1
            description: A new Tag
    tagCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntityCreator'
        - type: object
          example:
            name: tag-1
            description: A new Tag
    tagListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/tag'
          example:
            type: tagListResult
            limitExceeded: false
            size: 1
            items:
              - type: tag
                id: FJ6-FLuIcok
                scopeId: AQ
                createdOn: '2019-09-16T08:52:32.562Z'
                createdBy: AQ
                modifiedOn: '2019-09-16T08:52:32.562Z'
                modifiedBy: AQ
                optlock: 1
                name: tag-1
                description: A new Tag
    triggerProperty:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          description: The description that may contain textual information for the user on how to input this property
        propertyType:
          type: string
        propertyValue:
          type: string
      required:
        - name
        - propertyType
        - propertyValue
      example:
        name: jobId
        propertyType: org.eclipse.kapua.model.id.KapuaId
        propertyValue: AQ
    triggerDefinition:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - type: object
          properties:
            triggerType:
              type: string
              enum:
                - TIMER
                - EVENT
            processorName:
              type: string
            triggerProperties:
              type: array
              items:
                $ref: '#/components/schemas/triggerProperty'
      example:
        type: triggerDefinition
        id: AQ
        scopeId: AQ
        createdOn: '2021-01-29T14:45:04.460Z'
        createdBy: AQ
        modifiedOn: '2021-01-29T14:45:04.460Z'
        modifiedBy: AQ
        optlock: 0
        name: Cron Job
        description: Starts the job according to the given CRON expression
        processorName: org.eclipse.kapua.service.scheduler.trigger.quartz.job.KapuaJobLauncer
        triggerProperties:
          - name: cronExpression
            propertyType: java.lang.String
            description: The cron expression that defines the schedule of executions. Check documentation for CRON syntax.
          - name: jobId
            propertyType: org.eclipse.kapua.model.id.KapuaId
            description: Identifier of the job this schedule will be applied to
          - name: scopeId
            propertyType: org.eclipse.kapua.model.id.KapuaId
            description: Identifier of the scope of the job this schedule will be applied to
        triggerType: TIMER
    triggerDefinitionListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/triggerDefinition'
          example:
            type: triggerDefinitionListResult
            limitExceeded: false
            size: 3
            items:
              - type: triggerDefinition
                id: AQ
                scopeId: AQ
                createdOn: '2021-01-29T14:45:04.460Z'
                createdBy: AQ
                modifiedOn: '2021-01-29T14:45:04.460Z'
                modifiedBy: AQ
                optlock: 0
                name: Cron Job
                description: Starts the job according to the given CRON expression
                processorName: org.eclipse.kapua.service.scheduler.trigger.quartz.job.KapuaJobLauncer
                triggerProperties:
                  - name: cronExpression
                    propertyType: java.lang.String
                    description: The cron expression that defines the schedule of executions. Check documentation for CRON syntax.
                  - name: jobId
                    propertyType: org.eclipse.kapua.model.id.KapuaId
                    description: Identifier of the job this schedule will be applied to
                  - name: scopeId
                    propertyType: org.eclipse.kapua.model.id.KapuaId
                    description: Identifier of the scope of the job this schedule will be applied to
                triggerType: TIMER
              - type: triggerDefinition
                id: Ag
                scopeId: AQ
                createdOn: '2021-01-29T14:45:04.614Z'
                createdBy: AQ
                modifiedOn: '2021-01-29T14:45:04.614Z'
                modifiedBy: AQ
                optlock: 0
                name: Interval Job
                description: Starts the job according to the given interval
                processorName: org.eclipse.kapua.service.scheduler.trigger.quartz.job.KapuaJobLauncer
                triggerProperties:
                  - name: interval
                    propertyType: java.lang.Integer
                    description: Fixed time between job executions in seconds
                  - name: jobId
                    propertyType: org.eclipse.kapua.model.id.KapuaId
                    description: Identifier of the job this schedule will be applied to
                  - name: scopeId
                    propertyType: org.eclipse.kapua.model.id.KapuaId
                    description: Identifier of the scope of the job this schedule will be applied to
                triggerType: TIMER
              - type: triggerDefinition
                id: Aw
                scopeId: AQ
                createdOn: '2021-01-29T14:45:04.781Z'
                createdBy: AQ
                modifiedOn: '2021-01-29T14:45:04.781Z'
                modifiedBy: AQ
                optlock: 0
                name: Device Connect
                description: Starts the job when the device target connects
                processorName: '???'
                triggerProperties:
                  - name: jobId
                    propertyType: org.eclipse.kapua.model.id.KapuaId
                    description: Identifier of the job this schedule will be applied to
                  - name: scopeId
                    propertyType: org.eclipse.kapua.model.id.KapuaId
                    description: Identifier of the scope of the job this schedule will be applied to
                triggerType: EVENT
    user:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - $ref: '#/components/schemas/userCreator'
        - type: object
          example:
            type: user
            id: AQ
            scopeId: AQ
            createdOn: '2019-09-10T15:08:54.781Z'
            createdBy: AQ
            modifiedOn: '2019-09-10T15:08:54.781Z'
            modifiedBy: AQ
            optlock: 0
            name: kapua-sys
            displayName: Kapua Sysadmin
            email: kapua-sys@eclipse.org
            phoneNumber: +1 555 123 4567
            status: ENABLED
            userType: INTERNAL
    userCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntityCreator'
        - type: object
          properties:
            status:
              type: string
              enum:
                - ENABLED
                - DISABLED
            displayName:
              type: string
            email:
              type: string
              format: email
            phoneNumber:
              type: string
            userType:
              type: string
              enum:
                - DEVICE
                - INTERNAL
                - EXTERNAL
            externalId:
              type: string
            externalUsername:
              type: string
            expirationDate:
              type: string
              format: date-time
          example:
            name: donald-duck
            status: ENABLED
            displayName: Donald Duck
            email: donald.duck@duckburg.org
            phoneNumber: +1 (555) 816 1851
            userType: INTERNAL
            expirationDate: '2019-12-31T00:00:00.000Z'
    userListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/user'
          example:
            type: userListResult
            limitExceeded: false
            size: 2
            users:
              - type: user
                id: AQ
                scopeId: AQ
                createdOn: '2019-09-10T15:08:54.781Z'
                createdBy: AQ
                modifiedOn: '2019-09-10T15:08:54.781Z'
                modifiedBy: AQ
                optlock: 0
                name: kapua-sys
                displayName: Kapua Sysadmin
                email: kapua-sys@eclipse.org
                phoneNumber: +1 555 123 4567
                status: ENABLED
                userType: INTERNAL
              - type: user
                id: Ag
                scopeId: AQ
                createdOn: '2019-09-10T15:08:54.781Z'
                createdBy: AQ
                modifiedOn: '2019-09-10T15:08:54.781Z'
                modifiedBy: AQ
                optlock: 0
                name: kapua-broker
                displayName: Kapua Broker
                email: kapua-broker@eclipse.org
                phoneNumber: +1 555 123 4567
                status: ENABLED
                userType: INTERNAL
    mfaOptionCreationResponse:
      allOf:
        - allOf:
            - $ref: '#/components/schemas/kapuaUpdatableEntity'
            - description: An object containing all the information for a single MfaOption
              type: object
              properties:
                userId:
                  allOf:
                    - $ref: '#/components/schemas/kapuaId'
                trustKey:
                  description: |
                    The key of the trusted machine. Returned only on first activation to allow local storage.
                  type: string
                hasTrustMe:
                  type: boolean
                  description: Whether the trust key enabled present or not.
                trustExpirationDate:
                  description: |
                    The moment when the machine trust will expire.
                  type: string
                  format: date-time
              example:
                type: mfaOption
                id: Tu4UpgmN0A4
                scopeId: AQ
                createdOn: '2021-05-12T08:04:21.962Z'
                createdBy: AQ
                modifiedOn: '2021-05-12T08:04:21.962Z'
                modifiedBy: AQ
                optlock: '1,'
                userId: AQ
                trustKey: 52dfe60f-93e5-43b6-a071-dfc5df52da7b
                trustExpirationDate: '2020-31-12T00:00:00.000Z'
        - type: object
          properties:
            scratchCodes:
              description: A list of one-use-only tokens to be used for authentication
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/kapuaEntity'
                  - description: An object containing the list of available scratch (one-use-only) codes for account recovery
                    type: object
                    properties:
                      scratchCode:
                        description: |
                          The one-time-code to use to recover the account
                        type: string
                      mfaOptionId:
                        allOf:
                          - $ref: '#/components/schemas/kapuaId'
                          - description: The id of the MFA Option this code refers to
                    example:
                      type: scratchCode
                      id: RAgOxnjSkEM
                      scopeId: AQ
                      createdOn: '2021-05-12T08:04:21.962Z'
                      createdBy: AQ
                      scratchCode: '32930567'
                      mfaOptionId: Tu4UpgmN0A4
      example:
        type: mfaOption
        id: Tu4UpgmN0A4
        scopeId: AQ
        createdOn: '2021-05-12T08:04:21.962Z'
        createdBy: AQ
        modifiedOn: '2021-05-12T08:04:21.962Z'
        modifiedBy: AQ
        optlock: '1,'
        userId: AQ
        mfaSecretKey: DN4CALTCLAHKCMRT6GPKKCTDVLUFSOCM
        qrCodeImage: iVBORw0KGgoAAAANSUhEUgAAAIYAAACGCAIAAACXG2XGAAAGaklEQVR4Xu2RwZLsOAgE5/9/evdAdCit6tLg16aHA3kiipRkzM9/QzN+9mD4a2Yl7ZiVtGNW0o5ZSTtmJe2YlbRjVtKOWUk7ZiXtmJW0Y1bSjllJO2Yl7ZiVtGNW0o5ZSTtmJe2YlbRjVtKOWUk7ZiXtmJW0Y1bSjllJO2Yl7ZiVtGNW0o5ZSTsKV/KThv71joWazr9rssvkzPWmJ6m8Og396x0LNZ1/12SXyZnrTU9SeXXi0+moH4lzXFeTqDMOa0fG+YTKqxOffv4dkTjHdTWJOuOwdmScT6i8WkYlZyeSs0PUd9DJ1ESdCiqvljHI2Ynk7BD1HXQyNVGngsqrZQxy17mbq6MJc3bPJusKKq+WMchd526ujibM2T2brCuovFrGIOqo+VSiuTrnruZRV1B5tYxB1FHzqURzdc5dzaOuoPLqxKfrqOTqLscl6+S733e3dmScT6i8OvHp+jvI1V2OS9bJd7/4bu3IOJ9QeXUa+h3qDOFXUHl1Gvod6gzhV1B49Se44V1CnEnU70O7DwrcL3MJcSZRvw+FH+TGZq5dOlqfUfOcaFfzqJXriSepvNoMwFy7dLQ+o+Y50a7mUSvXE09SebV8+icj8ZS7IZNHTdRR0zkVFD6gA6wR7w/GU+6GTB41UUdN51RQ+IAOk0HPkozpHCbMmSjubB2Fz3AMDnZGz5KM6RwmzJko7mwd33oGI7nx1ugvmKujXXW0SzJOkHGe4lvPYCQ3XuSEuTraVUe7JOMEGecpCp9xYzBXJxJFHSaEXVcr0XUOu855isqrzaczVycSRR0mhF1XK9F1DrvOeYrCq5XzSOzS2VOfB+xqzYSwS4e1M5+l/AFyHoxdOnvq84BdrZkQdumwduazFD6QGUMdJkS765Yr2uUpdvM1k2oKn8kMow4Tot11yxXt8hS7+ZpJNYXP6GDX/nvUdPdErdztRuLIm09R+AzHyI+kprsnauVuNxJH3nyKwmd0GK2JOi5xrLteaJeJ5uvkb0nUFVRefRyGXc2jdolj3fVCu0w0Xyd/S6KuoPBqomNkhjw7kSjO0YTwFE2tq/nWMzJSZuCzE4niHE0IT9HUupryZ87DRJdozkRrZZ30t7mcCeGpasofO490HXyZLtFaWSf9bS5nQniqmvLHOJKrlXOXhEk0v57Yu3kn2L2nqX8AY7haOXdJmETz64m9m3eC3Xua8geIDqYJcybMXTdg92wG68Yr6mhdQeHVyhp3VuIpvFo5D6ZddUjeV5M1E8Iu2b2nKX+AcCQdT7vqkLyvJmsmhF2ye09T/0CCjK9dnnLQ11MuIex+h/In9xHfkfG1y1MO+nrKJYTd71D4ZH4kNZmcaxK5mueEORMHb6ig8IH8AGoyOdckcjXPCXMmDt5QQeEDmQHOo2a6e+rXdrV2aKq/93677RMqr058+nnITHdPZyUH9iGuqHmuNTl3NSd3c7LuraHwgX2UK2qea03OXc3J3Zyse2sofyDYx/pteNd1eXDuBuowifpv+dJH8Bdw+D194bouD87dQB0mUf8tX/0I/RGaO2jqWSbnPNA7ydVdjtYVFF6trKHf/dYzNPUsk3Me6J3k6i5H6woqrxbu5mTd61H/fJZ+nv2Wpyl8YB/F/3qXk3WvR/3zWfp59luepvyBPDo2E8Kumq6bMYma3+Grj53RX8CEsKum62ZMouZ3KHyMI53ZT747q1017zrsupqsM5UUPrMP5NlPvjurXTXvOuy6mqwzlRQ+kxmDjtZMXH52iDpak4xTQeEzmTHc2FEzcfnZIepoTTJOBYXP6EjEOVGTT/Ko1XSO4px119NUXo1Pv46z51qTT/Ko1XSO4px119NUXo1Pv46z5+vMfTOTuFwd5tplXkfhMxyDg2m+ztw3M4nL1WGuXeZ1FD7DMTiY5uvMi6u7O5pr/UnC/PsUPszBrsPu+Trz4urujuZaf5Iw/z6FD2cGo7N+hk+YZ2omxOWO823PUvhAZgA6a2ifMM/UTIjLHefbnqXwAY5xhr7WiutGzq4zFTXXXe+g+SyVV6ehr7XiupGz60xFzXXXO2g+S+HVw78xK2nHrKQds5J2zEraMStpx6ykHbOSdsxK2jEracespB2zknbMStoxK2nHrKQds5J2zEraMStpx6ykHbOSdsxK2jEracespB2zknbMStoxK2nHrKQds5J2zEraMStpx/+vj/u8X/4rrwAAAABJRU5ErkJggg==
        scratchCodes:
          - id: RgHPZWpltNw
            scopeId: AQ
            createdOn: '2024-02-09T07:58:42.174Z'
            createdBy: AQ
            scratchCode: '37721853'
            mfaOptionId: Tu4UpgmN0A4
          - id: aJQoAVS4gtE
            scopeId: AQ
            createdOn: '2024-02-09T07:58:42.174Z'
            createdBy: AQ
            scratchCode: '54644504'
            mfaOptionId: Tu4UpgmN0A4
          - id: RAgOxnjSkEM
            scopeId: AQ
            createdOn: '2024-02-09T07:58:42.174Z'
            createdBy: AQ
            scratchCode: '32930567'
            mfaOptionId: Tu4UpgmN0A4
          - id: SCdg9xd1Crc
            scopeId: AQ
            createdOn: '2024-02-09T07:58:42.174Z'
            createdBy: AQ
            scratchCode: '81508973'
            mfaOptionId: Tu4UpgmN0A4
          - id: b0r_BCpc2k4
            scopeId: AQ
            createdOn: '2024-02-09T07:58:42.174Z'
            createdBy: AQ
            scratchCode: '20795182'
            mfaOptionId: Tu4UpgmN0A4
    passwordChangeRequest:
      allOf:
        - description: Represent a request for changing the user password
          type: object
          properties:
            currentPassword:
              type: string
            newPassword:
              type: string
          example:
            currentPassword: Welcome1234!
            newPassword: NewWelcome1234!
    passwordResetRequest:
      allOf:
        - description: Represent a request for resetting a user password
          type: object
          properties:
            newPassword:
              type: string
          example:
            newPassword: newPassword42!
    userProfile:
      allOf:
        - description: The user profile
          type: object
          properties:
            displayName:
              type: string
            phoneNumber:
              type: string
            email:
              type: string
          example:
            displayName: Foo42
            phoneNumber: '424202424'
            email: foo@bar.com
    certificateUsage:
      type: object
      properties:
        name:
          type: string
    keyUsageSetting:
      type: object
      properties:
        keyUsage:
          type: string
          enum:
            - DIGITAL_SIGNATURE
            - NON_REPUDIATION
            - KEY_ENCIPHERMENT
            - DATA_ENCIPHERMENT
            - KEY_AGREEMENT
            - KEY_CERT_SIGN
            - CRL_SIGN
            - ENCIPHER_ONLY
            - DECIPHER_ONLY
        allowed:
          description: |
            A flag indicating whether a single usage is allowed or not for this certificate.
            The current CertificateService implementation makes no use of this field
          type: boolean
        kapuaAllowed:
          description: |
            A flag indicating whether a single usage is allowed or not for this certificate.
            This fields serves as an additional restriction relative to the `allowed` field,
            in order to further restrict a usage for a Certificate. However, a usage that is not
            normally enabled for the Certificate cannot be enabled specifically for Everyware Cloud.
            The current CertificateService implementation makes no use of this field
          type: boolean
    certificate:
      allOf:
        - $ref: '#/components/schemas/certificateInfo'
        - description: 'An object that holds all the informations pertaining a Certificate, including private key and password'
          type: object
          properties:
            privateKey:
              description: The Private Key of the Certificate
              type: string
            password:
              description: The Password for the Private Key
              type: string
          example:
            type: certificate
            id: E0eo-KqLHsA
            scopeId: AQ
            createdOn: '2019-09-23T14:31:28.000Z'
            createdBy: AQ
            modifiedOn: '2019-09-23T14:31:28.000Z'
            modifiedBy: AQ
            optlock: 1
            name: New Certificate
            algorithm: SHA1withRSA
            ca: false
            certificate: |
              -----BEGIN CERTIFICATE-----
              MIIC+DCCAeCgAwIBAgIUXZP34kjEK16Pvqg4FK2fwwdrWKgwDQYJKoZIhvcNAQEF
              BQAwNjELMAkGA1UEBhMCSVQxETAPBgNVBAoMCEV1cm90ZWNoMRQwEgYDVQQDDAtF
              dXJvdGVjaCBDQTAeFw0xODAxMDEwMDAwMDBaFw0xOTAxMDEwMDAwMDBaMDYxCzAJ
              BgNVBAYTAklUMREwDwYDVQQKDAhFdXJvdGVjaDEUMBIGA1UEAwwLRXVyb3RlY2gg
              Q0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCO9bS1j5Hxuv3/BtP0
              L4o9DZNgkxQF0Er1J81xk87Wr4SBeZSdlz0pXk29xfq1EoM5qX+oy57/+o8oqZ3G
              AP5/DuLJmHH52qQClGB2r9aH4khKcEhlO31v1x0iRukB6MnR9+S1ARBOYrF5m1aG
              ArlKfgrd9zK9FGqzZ8aK05i2U027Omhs86sBAeN+CjChwgcKEPUX6AA0lDFANRO5
              33sFwrES97PVGgwM7Zytv0Bih/ZXnwniRZdDxIZXOe7Qe6hiqMy/8K6AVGyw+OkB
              qCkNbuHixKSQ2OoST8/ST8VaJ2piKuVK2xRSyQRL8OsgWnqetJHzwuF6qahw85ap
              xKinAgMBAAEwDQYJKoZIhvcNAQEFBQADggEBAEYrPDxCm28Dmg+ZGn92jzvLqWcp
              Y88acnwaoUPQlrG1v/eluEg4oXN4DODYwrPOZS21pb2I4vMRuwBx0B4mcPxuXiQY
              zaJpJxHFImfxpd7z/ys80Ud3EcVeC5jWo+3sv9+z2GMf/oTO1pL+r7PqmNDSduLV
              6sl04qJ3NFXfi8bzRypEhUJV47CbQ8szt0+/Qu9bFID3L4IdQiFlg4rzGkVdKPgH
              fYQOg+AhUxsjLX+dl0Kq2IOw2gkhlblvTTlW7Da7WnN5yxxeuCnmNAwg9KUFiMTT
              SfVApHoFzXwkDIIErV25B8io++KkcfGjyt4+ngzMbcPpja2LES6QZBSTgkw=
              -----END CERTIFICATE-----
            certificateUsages: []
            forwardable: true
            issuer: 'CN=Eurotech CA,O=Eurotech,C=IT'
            keyUsageSettings: []
            notAfter: '2019-01-01T00:00:00.000Z'
            notBefore: '2018-01-01T00:00:00.000Z'
            password: super-secret-password
            privateKey: |
              -----BEGIN PRIVATE KEY-----
              MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCO9bS1j5Hxuv3/
              BtP0L4o9DZNgkxQF0Er1J81xk87Wr4SBeZSdlz0pXk29xfq1EoM5qX+oy57/+o8o
              qZ3GAP5/DuLJmHH52qQClGB2r9aH4khKcEhlO31v1x0iRukB6MnR9+S1ARBOYrF5
              m1aGArlKfgrd9zK9FGqzZ8aK05i2U027Omhs86sBAeN+CjChwgcKEPUX6AA0lDFA
              NRO533sFwrES97PVGgwM7Zytv0Bih/ZXnwniRZdDxIZXOe7Qe6hiqMy/8K6AVGyw
              +OkBqCkNbuHixKSQ2OoST8/ST8VaJ2piKuVK2xRSyQRL8OsgWnqetJHzwuF6qahw
              85apxKinAgMBAAECggEAFCvI/qEuR3xJ4FT3TQn0KF8k/0hhV9ym5uZhz3e6hIIp
              YRdlh8LSJ2cd8vvfPvNIvrcSwx9P5PBWiLc+ArUbM5RHHYi79DQMVizXW4e97lhY
              OOCU5mu5bDFe8/orYFCXQWAHzh5DTbwRLIZlc+0odcFJCT6a0yDxWTT4R5hJgNgT
              vknLJYtXgRm6sJWqdJgYPYaPxzmSoDAXQDzNYuNZJtj+ajimvubeuYNr15IcOFJW
              AMxxyFRamvfLgcZlkwQ46D9UrCBAtPzVKJFPTCzgSEswp/XpEKbmOd/Le5rzvU2V
              krvi7umWH0vUoa09xtvuQJY6LNumNL0A6wLMP41bMQKBgQDZg3utHMOYGxw5Jeva
              +B4NE8wP8P8cJ6xMeEtS1ZyT+17zIJfmQAUNtXwgLrR/yjzfUWecJuUBAQEB2hVx
              39Dt3XDdPagHj+ttkdCWY91nS7U8CFmTgvQWZoHDRyczJpSYn2U0cvtCuyGA32LT
              on/e4+kvXsnFeznXbaIcJ4cuPwKBgQCoQTncaiuPVAxDfK4ZlGs6OoRsSWUkyKSw
              3POz43AqcoHwTJjAVXIUZUgWgZcei26n3d4aEz6eo+0A8XnisoxVPKaCo+UhYbVf
              3lWznCdghgYkVxgfaDPCWMcsXq9UmJX6lj4Zvvitt2HcXFzwXtPZpVpwM051mjAt
              z7/nzE67mQKBgQCAltKOzOp1CdHtlxWQJg7d/E4vPnIS2wFpU9Rz7ATdF0ZSxXoH
              jOFv8VKoU/QxeAX0n9N45SWNKmLGDX+QCpkhhkArC0BC+DpeVE3UGsXRQ1ipXOZX
              5psWgxNDttTd0HkYoWLbVv5jvO1ZmrZ6Fx8xTduVPZxbOzY+vXmQ2213UQKBgEIK
              D+bWeTBxgbq/Zio+GfQp4a4LBLryUcnlf3Xc0Dqo5R1nQxFCuFsPAcNrq9/eRFl4
              +OLtKMfleXHEVd3HzNLr0kM2hwmaKzFst+Ceaso08JY05Q/2u1INvGdK5rBij4Ni
              kw9R6JNuheeTDRt/bNFhWGTvjl0UXtKsVxtpEoIJAoGAM1u1393idPrkdkG1DS+4
              zUp44AVdHaw5JfxgPoJr9Hzb5VMtwJ0WRluJwPnXG04RAeUsFDvRD8K9+AU094XU
              Jc3/AXJJ0jiHhXX8gRepDgFZDWL0ijmbYovk0zKWM3uPb38OPhNAtis2PdG9+Q+3
              cn54V0FLqgiLhTJdn/eX6Q0=
              -----END PRIVATE KEY-----
            serial: '534235944965964131784836439176327891479262091432'
            signature: Ris8PEKbbwOaD5kaf3aPO8upZyljzxpyfBqhQ9CWsbW/96W4SDihc3gM4NjCs85lLbWlvYji8xG7AHHQHiZw/G5eJBjNomknEcUiZ/Gl3vP/KzzRR3cRxV4LmNaj7ey/37PYYx/+hM7Wkv6vs+qY0NJ24tXqyXTionc0Vd+LxvNHKkSFQlXjsJtDyzO3T79C71sUgPcvgh1CIWWDivMaRV0o+Ad9hA6D4CFTGyMtf52XQqrYg7DaCSGVuW9NOVbsNrtac3nLHF64KeY0DCD0pQWIxNNJ9UCkegXNfCQMggStXbkHyKj74qRx8aPK3j6eDMxtw+mNrYsRLpBkFJOCTA==
            status: VALID
            subject: 'CN=Eurotech CA,O=Eurotech,C=IT'
            version: 3
    certificateCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntityCreator'
        - description: An object with all the information needed to create a new Certificate
          type: object
          properties:
            certificate:
              description: An X.509 representation of the Certificate
              type: string
            status:
              $ref: '#/components/schemas/certificateInfo/allOf/1/properties/status'
            privateKey:
              description: An X.509 representation of the Private Key
              type: string
            caId:
              description: The ID of the Certificate that will serve as a CA for this Certificate
              type: string
              pattern: '[A-Za-z0-9-_=]+'
            password:
              description: The Password to decrypt this Certificate
              type: string
            certificateUsages:
              description: A list of Everyware Cloud features to use this certificate for
              type: array
              items:
                $ref: '#/components/schemas/certificateUsage'
            forwardable:
              description: A flag indicating whether this Certificate can be used in children scopes or not
              type: boolean
          required:
            - name
            - certificate
          example:
            type: certificateCreator
            name: New DM Certificate
            certificate: |
              -----BEGIN CERTIFICATE-----
              MIICpjCCAY6gAwIBAgIUUv9zdUpgelk+PfJ/aXtV5jNS7iYwDQYJKoZIhvcNAQEF
              BQAwDTELMAkGA1UEBhMCQkUwHhcNMTcxMjA3MTMwNjEzWhcNMjcxMjA1MTMwNjEz
              WjANMQswCQYDVQQGEwJCRTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
              AIuyNVhHJCgraFjanoA4ng/FbrBQmLTPqBjR6mfqt7yWFQN5W5aOaVFj/LPO0WsL
              mVstVjJoaZnBQCtCCJF5dvy6vUNQ3zNSA5TyY4LdNZYYie4q10HunQSx3bqEJupd
              r2Xllbtnm3k3rspnDCaqwA+hJ8EAPvuHokSRplxjyg8TIdJlIHkbQ1pf6BfOsDJ4
              bD4BtfFPUeuaAjLwh/O6t6Xam6SQQ4209lQ2AgFlHQ6VK0Sp6JJ+tleAcyav14yy
              aM6biQkQLSytSXAVz+dISp3e8pzWF90lIftt9VI79kK4xNuQtgld6+eHVXsggItV
              mOiYILs9duyRdDoCrAKTlxUCAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAWUBd4vgE
              FGhCN0WaeHdMm0rKWUL6b1TmDgAhe1k7CFrX6lzC/p7wWsNKqlr3mUoSLW19mQCr
              UT6HJcXKj8f9bChULT2VlieezDMwhMBF+3Zy0NbTwRSsW9km2r+YDlZQ3+Csiq69
              PRr5Sy2qBIv8q18bRJiPGTebfvBccdEZPDdv7QAuEgimljAT1eGBybHH4zS2D7ON
              bJakl9xOOYJqcu+z9aBSlq9Xu0G9gAtNVbIlJAS67V9Odr/KkdTHgr0jhIBjs08t
              rOdsPHBJ5Ddj/ak9KLAXlBNVThI+fxkxaS1V6yFcL7AneTZkwl4XvDAGEWP3hA8X
              PQzDWWvM5zM2ig==
              -----END CERTIFICATE-----
            status: VALID
            certificateUsages:
              - name: DEVICE_MANAGEMENT
            forwardable: false
    certificateListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - description: A list container for Certificate objects
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/certificate'
          example:
            type: certificateListResult
            limitExceeded: false
            size: 1
            items:
              - type: certificate
                id: FqmHgoRrDrM
                scopeId: AQ
                createdOn: '2019-09-23T13:52:35.000Z'
                createdBy: AQ
                modifiedOn: '2019-09-23T13:52:35.000Z'
                modifiedBy: AQ
                optlock: 1
                name: Default_JWT_Certificate
                algorithm: SHA1withRSA
                ca: false
                certificate: |
                  -----BEGIN CERTIFICATE-----
                  MIIC+DCCAeCgAwIBAgIUcGMsSWscatah7BIwBmqqF8O4lF4wDQYJKoZIhvcNAQEF
                  BQAwNjELMAkGA1UEBhMCSVQxETAPBgNVBAoMCEV1cm90ZWNoMRQwEgYDVQQDDAtF
                  dXJvdGVjaCBDQTAeFw0xOTA5MjMxMzUyMzBaFw0yOTA5MjAxMzUyMzBaMDYxCzAJ
                  BgNVBAYTAklUMREwDwYDVQQKDAhFdXJvdGVjaDEUMBIGA1UEAwwLRXVyb3RlY2gg
                  Q0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDbK8cxbhCUEtRFyUml
                  n1RKVXTq51DIIJHgLsVH9LAyIg4AAJln4JMYW1dGoPIxoniohm1r7mZvdIzRucr/
                  QDggX3+mtJdVB8sJ5dfIfhKpecLTlElMWio87OWue8k/9m7yA8gtml3hcy79cqFG
                  29ZYCDquSQ23BZwTLmo9nsFR5E/80xdPv8Ewktrx4BpBaLj3vUViwWGaao6y3F4J
                  pTnx51xSFyWHSfbVa7AhmW0cerEgb2Mi4audKFkwiyhPjF382yRRRvVnVp1uHSFw
                  DH94/HOSnduoeQcLObqarHFPYcAY48J2KIYlSVVhCBjeK+yMGGR6He7R+PF0Pn/M
                  0Pu/AgMBAAEwDQYJKoZIhvcNAQEFBQADggEBACj5qXsZz/xi6IcOSnYJVWE8N9qf
                  o9bqrO4rzdOk+99HfEoNmE8RGZ6R/NxVLaqfMEzNyWz1xUbYvpgsamlpcgMF1Q5Z
                  1c41DUy1Yn4YbMQ2U/gQBsntYC53lZJjmbrbCPce42xMSqlDfts1xOId5IfiQE17
                  2e9QFrkCc07AW5ykBUTd7+K5Td12HMsjamcEMSr3wecozCQpLlQI3bKcq/APbF+z
                  bd93Luh290JjBrbbygu+a8Jq3JQh/eqwbmOo66ngiOujoKmQjaw54+2DE1IhI1Um
                  fi31FrsbIHrljtd+D1NZriF/zcDIC8hzRa9pFqk8WG0XFymjIJzNEoZGLQ0=
                  -----END CERTIFICATE-----
                certificateUsages:
                  - name: JWT
                forwardable: true
                issuer: 'CN=Eurotech CA,O=Eurotech,C=IT'
                keyUsageSettings: []
                notAfter: '2029-09-20T13:52:30.000Z'
                notBefore: '2019-09-23T13:52:30.000Z'
                password: super-secret-password
                privateKey: |
                  -----BEGIN PRIVATE KEY-----
                  MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDbK8cxbhCUEtRF
                  yUmln1RKVXTq51DIIJHgLsVH9LAyIg4AAJln4JMYW1dGoPIxoniohm1r7mZvdIzR
                  ucr/QDggX3+mtJdVB8sJ5dfIfhKpecLTlElMWio87OWue8k/9m7yA8gtml3hcy79
                  cqFG29ZYCDquSQ23BZwTLmo9nsFR5E/80xdPv8Ewktrx4BpBaLj3vUViwWGaao6y
                  3F4JpTnx51xSFyWHSfbVa7AhmW0cerEgb2Mi4audKFkwiyhPjF382yRRRvVnVp1u
                  HSFwDH94/HOSnduoeQcLObqarHFPYcAY48J2KIYlSVVhCBjeK+yMGGR6He7R+PF0
                  Pn/M0Pu/AgMBAAECggEADlp7nR0cMNZa2IcqL5KTrpqSIaAshi673vaxLNk1gNMC
                  H7XqVgc7GulAefuoYN/HDyJeoCboxnvXjRSh2r2V72jRr1U8Y/Eytt86loLLLhYv
                  UDPx6PIuufa5xAePUoUNFwRwY6wsYcttVGPhdAaJrxI65ZcbMtVHN2pewtJWzsoJ
                  8mu6KBIRcguZzLvjUPQzfSYmDAy3F/TW+rEcbIevvkox43FQnM6GWwgTkgorzksA
                  3ptbDeStPMkJmt4p+ortIwB6bnxTsPAxLJy7P3nlBzwjoBYWzwaxCeQtOUbzsnN8
                  +IAo+UizgCz0Gj61EQlPrJrnUSJGFdw46035yYPMoQKBgQD5EG36s2y3Xk82UczT
                  JFdjwRuyHPYlUc6qb5VpTX2Bokumv7omIt1GxhXpuljo8avUF1x/R4IzRmY70XrY
                  mZNlxmtKFuTdwwjvjtKwEOfQap33vwjjj6blJ0SqEazakPIclTvXvf+8zQNpsll6
                  W1ymYbTvG6LuV6kAIYO9zG5UVQKBgQDhRj22CCaSSMccnN+Aj9ro0OWel/C+gpa0
                  0Ak3M63JnBPx1e4NlKt8McjbCKtKpBRXVSsgYfM0fndLqYP5TS4xW49CjQHQOttF
                  kDS9d6Y0W1yknF3sGeycfNEXXgr7lLuK8NwUJZG3ZhV4u6L4O87+PNghYq4a89on
                  v5bnumLDwwKBgGG81svI2WLj+YXBd/Vrj3ev8iRlRRrEDavIegOGyzex7qoTFwOc
                  LuV1GmhMHlPbcqiaOkwgTbG9cKUMwX56VeNciAHdFhcIUFth2sAJAk9BZ5gvOVfD
                  qaTHUiTDJufmdXxN+9vfzZnTggFaYc6oR6VrNkuWtst9Tu6kOESlEq65AoGBALCx
                  s32v7vEWfHaI5RWlwAKUt0Ypzv7e1u6DrnbJ5ioYbdxl/A5S6h7DvdNvfUtSX1IQ
                  z37a1TP7bf6+u3EzhGPaeQeuKhn10D9D2Nozmv2+G3BR5almvBwSGr7FWL/z7RYR
                  zc1PmnfLblQAeNdTsgvgFXY6PG2PjzFWKTshCo6ZAoGAIUYxqdN0fiw3kWsi5MxF
                  ktstYak6zrn4Si2Dmq5bodOTcn66zrBOFZ1dohR8GFZkk6ufwNxqerIP9RkfioqV
                  6BtB9q5lJRVJ4ymGFDZB185GIrvATgBJfGAUnLMwGtagtNBhqQ5aJN5o0xnhLymf
                  qPCL4VUw/sca6z5qIXxTmIc=
                  -----END PRIVATE KEY-----
                serial: '641618598030493287885866652367398240291428799582'
                signature: KPmpexnP/GLohw5KdglVYTw32p+j1uqs7ivN06T730d8Sg2YTxEZnpH83FUtqp8wTM3JbPXFRti+mCxqaWlyAwXVDlnVzjUNTLVifhhsxDZT+BAGye1gLneVkmOZutsI9x7jbExKqUN+2zXE4h3kh+JATXvZ71AWuQJzTsBbnKQFRN3v4rlN3XYcyyNqZwQxKvfB5yjMJCkuVAjdspyr8A9sX7Nt33cu6Hb3QmMGttvKC75rwmrclCH96rBuY6jrqeCI66OgqZCNrDnj7YMTUiEjVSZ+LfUWuxsgeuWO134PU1muIX/NwMgLyHNFr2kWqTxYbRcXKaMgnM0ShkYtDQ==
                status: VALID
                subject: 'CN=Eurotech CA,O=Eurotech,C=IT'
                version: 3
    certificateInfo:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - description: An object that holds all the informations pertaining a Certificate
          type: object
          externalDocs:
            description: X.509 (Wikipedia)
            url: 'https://en.wikipedia.org/wiki/X.509'
          properties:
            certificate:
              description: Standard X.509 represantation of a Certificate
              type: string
            version:
              description: X.509 Version of a Certificate
              type: integer
            serial:
              description: X.509 Serial Number of a Certificate
              type: string
              format: int64
            serialHex:
              description: X.509 Serial Number of a Certificate in hexadecimal format
              type: string
              readOnly: true
            algorithm:
              description: X.509 Encoding algorithm of a Certificate
              type: string
            signature:
              description: X.509 Signature of a Certificate
              type: string
              format: base64
            subject:
              description: X.509 Subject of a Certificate
              type: string
              format: x500name
            issuer:
              description: X.509 Issuer of a Certificate
              type: string
              format: x500name
            notBefore:
              description: X.509 Not Before validity date and time
              type: string
              format: date-time
            notAfter:
              description: X.509 Not After validity date and time
              type: string
              format: date-time
            status:
              type: string
              enum:
                - VALID
                - REVOKED
                - SUSPENDED
            ca:
              description: A flag indicating whether this certificate is a CA (Certificate Autorithy) or not
              type: boolean
            caId:
              description: The ID of the Certificate who serves as a CA for this certificate
              type: string
              pattern: '[A-Za-z0-9-_=]+'
            keyUsageSettings:
              description: A list of X.509 Key Usages
              type: array
              items:
                $ref: '#/components/schemas/keyUsageSetting'
            certificateUsages:
              description: A list of Everyware Cloud features to use this Certificate for
              type: array
              items:
                $ref: '#/components/schemas/certificateUsage'
            forwardable:
              description: A flag indicating whether this Certificate can be also used in children scopes or not
              type: boolean
          example:
            type: certificateInfo
            id: E0eo-KqLHsA
            scopeId: AQ
            createdOn: '2019-09-23T14:31:28.000Z'
            createdBy: AQ
            modifiedOn: '2019-09-23T14:31:28.000Z'
            modifiedBy: AQ
            optlock: 1
            name: New Certificate
            algorithm: SHA1withRSA
            ca: false
            certificate: |
              -----BEGIN CERTIFICATE-----
              MIIC+DCCAeCgAwIBAgIUXZP34kjEK16Pvqg4FK2fwwdrWKgwDQYJKoZIhvcNAQEF
              BQAwNjELMAkGA1UEBhMCSVQxETAPBgNVBAoMCEV1cm90ZWNoMRQwEgYDVQQDDAtF
              dXJvdGVjaCBDQTAeFw0xODAxMDEwMDAwMDBaFw0xOTAxMDEwMDAwMDBaMDYxCzAJ
              BgNVBAYTAklUMREwDwYDVQQKDAhFdXJvdGVjaDEUMBIGA1UEAwwLRXVyb3RlY2gg
              Q0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCO9bS1j5Hxuv3/BtP0
              L4o9DZNgkxQF0Er1J81xk87Wr4SBeZSdlz0pXk29xfq1EoM5qX+oy57/+o8oqZ3G
              AP5/DuLJmHH52qQClGB2r9aH4khKcEhlO31v1x0iRukB6MnR9+S1ARBOYrF5m1aG
              ArlKfgrd9zK9FGqzZ8aK05i2U027Omhs86sBAeN+CjChwgcKEPUX6AA0lDFANRO5
              33sFwrES97PVGgwM7Zytv0Bih/ZXnwniRZdDxIZXOe7Qe6hiqMy/8K6AVGyw+OkB
              qCkNbuHixKSQ2OoST8/ST8VaJ2piKuVK2xRSyQRL8OsgWnqetJHzwuF6qahw85ap
              xKinAgMBAAEwDQYJKoZIhvcNAQEFBQADggEBAEYrPDxCm28Dmg+ZGn92jzvLqWcp
              Y88acnwaoUPQlrG1v/eluEg4oXN4DODYwrPOZS21pb2I4vMRuwBx0B4mcPxuXiQY
              zaJpJxHFImfxpd7z/ys80Ud3EcVeC5jWo+3sv9+z2GMf/oTO1pL+r7PqmNDSduLV
              6sl04qJ3NFXfi8bzRypEhUJV47CbQ8szt0+/Qu9bFID3L4IdQiFlg4rzGkVdKPgH
              fYQOg+AhUxsjLX+dl0Kq2IOw2gkhlblvTTlW7Da7WnN5yxxeuCnmNAwg9KUFiMTT
              SfVApHoFzXwkDIIErV25B8io++KkcfGjyt4+ngzMbcPpja2LES6QZBSTgkw=
              -----END CERTIFICATE-----
            certificateUsages: []
            forwardable: true
            issuer: 'CN=Eurotech CA,O=Eurotech,C=IT'
            keyUsageSettings: []
            notAfter: '2019-01-01T00:00:00.000Z'
            notBefore: '2018-01-01T00:00:00.000Z'
            serial: '534235944965964131784836439176327891479262091432'
            signature: Ris8PEKbbwOaD5kaf3aPO8upZyljzxpyfBqhQ9CWsbW/96W4SDihc3gM4NjCs85lLbWlvYji8xG7AHHQHiZw/G5eJBjNomknEcUiZ/Gl3vP/KzzRR3cRxV4LmNaj7ey/37PYYx/+hM7Wkv6vs+qY0NJ24tXqyXTionc0Vd+LxvNHKkSFQlXjsJtDyzO3T79C71sUgPcvgh1CIWWDivMaRV0o+Ad9hA6D4CFTGyMtf52XQqrYg7DaCSGVuW9NOVbsNrtac3nLHF64KeY0DCD0pQWIxNNJ9UCkegXNfCQMggStXbkHyKj74qRx8aPK3j6eDMxtw+mNrYsRLpBkFJOCTA==
            status: VALID
            subject: 'CN=Eurotech CA,O=Eurotech,C=IT'
            version: 3
    certificateInfoListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - description: A list container for Certificate objects
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/certificateInfo'
          example:
            type: certificateInfoListResult
            limitExceeded: false
            size: 1
            items:
              - type: certificate
                id: FqmHgoRrDrM
                scopeId: AQ
                createdOn: '2019-09-23T13:52:35.000Z'
                createdBy: AQ
                modifiedOn: '2019-09-23T13:52:35.000Z'
                modifiedBy: AQ
                optlock: 1
                name: Default_JWT_Certificate
                algorithm: SHA1withRSA
                ca: false
                certificate: |
                  -----BEGIN CERTIFICATE-----
                  MIIC+DCCAeCgAwIBAgIUcGMsSWscatah7BIwBmqqF8O4lF4wDQYJKoZIhvcNAQEF
                  BQAwNjELMAkGA1UEBhMCSVQxETAPBgNVBAoMCEV1cm90ZWNoMRQwEgYDVQQDDAtF
                  dXJvdGVjaCBDQTAeFw0xOTA5MjMxMzUyMzBaFw0yOTA5MjAxMzUyMzBaMDYxCzAJ
                  BgNVBAYTAklUMREwDwYDVQQKDAhFdXJvdGVjaDEUMBIGA1UEAwwLRXVyb3RlY2gg
                  Q0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDbK8cxbhCUEtRFyUml
                  n1RKVXTq51DIIJHgLsVH9LAyIg4AAJln4JMYW1dGoPIxoniohm1r7mZvdIzRucr/
                  QDggX3+mtJdVB8sJ5dfIfhKpecLTlElMWio87OWue8k/9m7yA8gtml3hcy79cqFG
                  29ZYCDquSQ23BZwTLmo9nsFR5E/80xdPv8Ewktrx4BpBaLj3vUViwWGaao6y3F4J
                  pTnx51xSFyWHSfbVa7AhmW0cerEgb2Mi4audKFkwiyhPjF382yRRRvVnVp1uHSFw
                  DH94/HOSnduoeQcLObqarHFPYcAY48J2KIYlSVVhCBjeK+yMGGR6He7R+PF0Pn/M
                  0Pu/AgMBAAEwDQYJKoZIhvcNAQEFBQADggEBACj5qXsZz/xi6IcOSnYJVWE8N9qf
                  o9bqrO4rzdOk+99HfEoNmE8RGZ6R/NxVLaqfMEzNyWz1xUbYvpgsamlpcgMF1Q5Z
                  1c41DUy1Yn4YbMQ2U/gQBsntYC53lZJjmbrbCPce42xMSqlDfts1xOId5IfiQE17
                  2e9QFrkCc07AW5ykBUTd7+K5Td12HMsjamcEMSr3wecozCQpLlQI3bKcq/APbF+z
                  bd93Luh290JjBrbbygu+a8Jq3JQh/eqwbmOo66ngiOujoKmQjaw54+2DE1IhI1Um
                  fi31FrsbIHrljtd+D1NZriF/zcDIC8hzRa9pFqk8WG0XFymjIJzNEoZGLQ0=
                  -----END CERTIFICATE-----
                certificateUsages:
                  - name: JWT
                forwardable: true
                issuer: 'CN=Eurotech CA,O=Eurotech,C=IT'
                keyUsageSettings: []
                notAfter: '2029-09-20T13:52:30.000Z'
                notBefore: '2019-09-23T13:52:30.000Z'
                serial: '641618598030493287885866652367398240291428799582'
                signature: KPmpexnP/GLohw5KdglVYTw32p+j1uqs7ivN06T730d8Sg2YTxEZnpH83FUtqp8wTM3JbPXFRti+mCxqaWlyAwXVDlnVzjUNTLVifhhsxDZT+BAGye1gLneVkmOZutsI9x7jbExKqUN+2zXE4h3kh+JATXvZ71AWuQJzTsBbnKQFRN3v4rlN3XYcyyNqZwQxKvfB5yjMJCkuVAjdspyr8A9sX7Nt33cu6Hb3QmMGttvKC75rwmrclCH96rBuY6jrqeCI66OgqZCNrDnj7YMTUiEjVSZ+LfUWuxsgeuWO134PU1muIX/NwMgLyHNFr2kWqTxYbRcXKaMgnM0ShkYtDQ==
                status: VALID
                subject: 'CN=Eurotech CA,O=Eurotech,C=IT'
                version: 3
    cluster:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - type: object
          properties:
            lastUpdate:
              type: string
              format: date-time
          example:
            type: cluster
            id: CbEe5lHf_F0
            scopeId: AQ
            createdOn: '2020-02-26T09:52:49.000Z'
            createdBy: AQ
            modifiedOn: '2020-02-26T09:52:49.000Z'
            modifiedBy: AQ
            optlock: 1
            name: ec-broker
            lastUpdate: '2020-02-26T10:52:49+01:00'
    clusterListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/cluster'
          example:
            type: clusterListResult
            limitExceeded: false
            size: 1
            items:
              - type: cluster
                id: CbEe5lHf_F0
                scopeId: AQ
                createdOn: '2020-02-26T09:52:49.000Z'
                createdBy: AQ
                modifiedOn: '2020-02-26T09:52:49.000Z'
                modifiedBy: AQ
                optlock: 1
                name: ec-broker
                lastUpdate: '2020-02-26T10:52:49+01:00'
    deploymentRegistry:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - type: object
          properties:
            accountId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the Account to be assigned to a specific Cluster
            clusterId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the Cluster to be assigned to a specific Account
          example:
            type: deploymentRegistry
            id: ZMPlnAnKFhU
            scopeId: AQ
            createdOn: '2020-02-24T15:57:37.000Z'
            createdBy: AQ
            modifiedOn: '2020-02-24T15:57:37.000Z'
            modifiedBy: AQ
            optlock: 1
            clusterId: YfSuEof7fgw
            accountId: AQ
    deploymentRegistryCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntityCreator'
        - type: object
          example:
            accountId: AQ
            clusterId: ZMPlnAnKFhU
    deploymentRegistryListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/deploymentRegistry'
          example:
            type: deploymentRegistryListResult
            limitExceeded: false
            size: 1
            items:
              - type: deploymentRegistry
                id: ZMPlnAnKFhU
                scopeId: AQ
                createdOn: '2020-02-24T15:57:37.000Z'
                createdBy: AQ
                modifiedOn: '2020-02-24T15:57:37.000Z'
                modifiedBy: AQ
                optlock: 1
                clusterId: YfSuEof7fgw
                accountId: AQ
    logProperty:
      type: object
      properties:
        valueType:
          type: string
        value:
          type: string
        name:
          type: string
    logMessage:
      type: object
      properties:
        scopeId:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
            - readOnly: true
        channel:
          type: object
          properties:
            semanticParts:
              type: array
              items:
                type: string
        clientId:
          type: string
        deviceId:
          allOf:
            - $ref: '#/components/schemas/kapuaId'
        logProperties:
          type: object
          properties:
            logProperty:
              type: array
              items:
                $ref: '#/components/schemas/logProperty'
        receivedOn:
          type: string
          format: date-time
        storeId:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time
      example:
        type: deviceLogEntry
        scopeId: AQ
        channel:
          semanticParts:
            - V1
            - '10'
            - '4'
            - 'gdm-autologin]'
        clientId: claudio-sim-3
        deviceId: OxnTrfVuWBY
        logProperties:
          logProperty:
            - valueType: string
              value: '895'
              name: _PID
            - valueType: string
              value: 9ab7071996a0455d9ca68a4c9b32e978
              name: _SYSTEMD_INVOCATION_ID
            - valueType: string
              value: 3fffffffff
              name: _CAP_EFFECTIVE
            - valueType: string
              value: '1591132335237549'
              name: _SOURCE_REALTIME_TIMESTAMP
            - valueType: string
              value: '4'
              name: PRIORITY
            - valueType: string
              value: /system.slice/gdm.service
              name: _SYSTEMD_CGROUP
            - valueType: string
              value: 'Jun  2 23:12:15 '
              name: SYSLOG_TIMESTAMP
            - valueType: string
              value: '0'
              name: _GID
            - valueType: string
              value: c3604bc31227402f8468ac3055b3867a
              name: _MACHINE_ID
            - valueType: string
              value: 'gkr-pam: no password is available for user'
              name: MESSAGE
            - valueType: string
              value: gdm-session-wor
              name: _COMM
            - valueType: string
              value: a3b399270ab248a9ace3f094ed85af67
              name: _BOOT_ID
            - valueType: string
              value: syslog
              name: _TRANSPORT
            - valueType: string
              value: gdm.service
              name: _SYSTEMD_UNIT
            - valueType: string
              value: 'gdm-session-worker [pam/gdm-autologin]'
              name: _CMDLINE
            - valueType: string
              value: 'gdm-autologin]'
              name: SYSLOG_IDENTIFIER
            - valueType: string
              value: system.slice
              name: _SYSTEMD_SLICE
            - valueType: string
              value: '10'
              name: SYSLOG_FACILITY
            - valueType: string
              value: '0'
              name: _UID
            - valueType: string
              value: claudio-p17sm
              name: _HOSTNAME
            - valueType: string
              value: /usr/lib/gdm-session-worker
              name: _EXE
        receivedOn: '2020-11-20T14:35:32.907Z'
        storeId: a33a0e6b-788a-43de-a246-538660046bf1
        timestamp: '2020-11-20T15:35:32.981+01:00'
    logMessageListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/logMessage'
          example:
            type: deviceLogListResult
            limitExceeded: false
            size: 2
            items:
              - type: deviceLogEntry
                scopeId: AQ
                channel:
                  semanticParts:
                    - V1
                    - '10'
                    - '4'
                    - 'gdm-autologin]'
                clientId: claudio-sim-3
                deviceId: OxnTrfVuWBY
                logProperties:
                  logProperty:
                    - valueType: string
                      value: '895'
                      name: _PID
                    - valueType: string
                      value: 9ab7071996a0455d9ca68a4c9b32e978
                      name: _SYSTEMD_INVOCATION_ID
                    - valueType: string
                      value: 3fffffffff
                      name: _CAP_EFFECTIVE
                    - valueType: string
                      value: '1591132335237549'
                      name: _SOURCE_REALTIME_TIMESTAMP
                    - valueType: string
                      value: '4'
                      name: PRIORITY
                    - valueType: string
                      value: /system.slice/gdm.service
                      name: _SYSTEMD_CGROUP
                    - valueType: string
                      value: 'Jun  2 23:12:15 '
                      name: SYSLOG_TIMESTAMP
                    - valueType: string
                      value: '0'
                      name: _GID
                    - valueType: string
                      value: c3604bc31227402f8468ac3055b3867a
                      name: _MACHINE_ID
                    - valueType: string
                      value: 'gkr-pam: no password is available for user'
                      name: MESSAGE
                    - valueType: string
                      value: gdm-session-wor
                      name: _COMM
                    - valueType: string
                      value: a3b399270ab248a9ace3f094ed85af67
                      name: _BOOT_ID
                    - valueType: string
                      value: syslog
                      name: _TRANSPORT
                    - valueType: string
                      value: gdm.service
                      name: _SYSTEMD_UNIT
                    - valueType: string
                      value: 'gdm-session-worker [pam/gdm-autologin]'
                      name: _CMDLINE
                    - valueType: string
                      value: 'gdm-autologin]'
                      name: SYSLOG_IDENTIFIER
                    - valueType: string
                      value: system.slice
                      name: _SYSTEMD_SLICE
                    - valueType: string
                      value: '10'
                      name: SYSLOG_FACILITY
                    - valueType: string
                      value: '0'
                      name: _UID
                    - valueType: string
                      value: claudio-p17sm
                      name: _HOSTNAME
                    - valueType: string
                      value: /usr/lib/gdm-session-worker
                      name: _EXE
                receivedOn: '2020-11-20T14:35:32.907Z'
                storeId: a33a0e6b-788a-43de-a246-538660046bf1
                timestamp: '2020-11-20T15:35:32.981+01:00'
              - type: deviceLogEntry
                scopeId: AQ
                channel:
                  semanticParts:
                    - V1
                    - '0'
                    - '4'
                    - kernel
                clientId: claudio-sim-3
                deviceId: OxnTrfVuWBY
                logProperties:
                  logProperty:
                    - valueType: string
                      value: c3604bc31227402f8468ac3055b3867a
                      name: _MACHINE_ID
                    - valueType: string
                      value: 'mtd: partition "BIOS" extends beyond the end of device "intel-spi" -- size truncated to 0x200000'
                      name: MESSAGE
                    - valueType: string
                      value: '4440467'
                      name: _SOURCE_MONOTONIC_TIMESTAMP
                    - valueType: string
                      value: a3b399270ab248a9ace3f094ed85af67
                      name: _BOOT_ID
                    - valueType: string
                      value: kernel
                      name: _TRANSPORT
                    - valueType: string
                      value: kernel
                      name: SYSLOG_IDENTIFIER
                    - valueType: string
                      value: '0'
                      name: SYSLOG_FACILITY
                    - valueType: string
                      value: '4'
                      name: PRIORITY
                    - valueType: string
                      value: claudio-p17sm
                      name: _HOSTNAME
                receivedOn: '2020-11-20T14:34:59.955Z'
                storeId: e23e646f-bee2-40b5-97ac-b40f732cd9cf
                timestamp: '2020-11-20T15:35:00.029+01:00'
    vpnClientStatus:
      type: object
      properties:
        connected:
          type: boolean
        ipAddress:
          type: string
          format: ipAddress
      example:
        connected: true
        ipAddress: 10.200.12.49
    provisionRequestExecutionStatus:
      type: string
      description: The execution status of the Provision Request.
      enum:
        - CREATED
        - RUNNING
        - COMPLETED
        - FAILED
        - STOPPED
    provisionRequestAuthenticationType:
      type: string
      description: The authentication type that will be used by the Device to connect to the Device Provisioning endpoint. USER_PASS means it will provide a username and a password. USER_CERT means that it will provide a username and a public Certificate to perform mutual authentication.
      enum:
        - USER_PASS
        - USER_CERT
    provisionRequestActivationOptions:
      type: object
      description: The options of the Provision Request regarding if and when it can run
      properties:
        status:
          type: string
          description: Whether is enabled or not
          enum:
            - ENABLED
            - DISABLED
        activatesOn:
          type: string
          description: Date since it can run
          format: date-time
        expiresOn:
          type: string
          description: Date until it can run
          format: date-time
      required:
        - status
        - activatesOn
      example:
        status: ENABLED
        activatesOn: '2018-04-19T22:00:00Z'
        expiresOn: '2024-04-19T22:00:00Z'
    provisionRequestConnectionOptions:
      type: object
      description: The options of the Provision Request regarding Device Connection provisioned to the target Account
      properties:
        reserveUser:
          type: boolean
          description: Whether the provisioned User can be used by only the provisioned Device.
          default: false
        userCouplingMode:
          type: string
          enum:
            - INHERITED
            - LOOSE
            - STRICT
        passwordLength:
          type: integer
          description: The length of the generated password that will be sent to the Device. The default length is 20 unless another value is configured in the account's Service Configuration of the Provisioning Request Service
          default: 20
      required:
        - userCoupling
      example:
        reserveUser: true
        userCouplingMode: STRICT
        passwordLength: 40
    provisionRequestExtraOptions:
      type: object
      description: The options of the Provision Request regarding miscellaneous configurations.
      properties:
        deviceConfiguration:
          $ref: '#/components/schemas/componentConfigurationsInput'
        vpnAccess:
          type: boolean
          description: 'Whether or not configure the VpnClient configurable component with the same credentials as the MqttDatatrasport and give the user vpn:connect'
          default: false
        legacyMode:
          type: boolean
          description: 'Whether to use the legacy PROV-V1. To use this option, legacy PROV-V1 must be enabled for the Account'
          default: false
        legacyUsernameMode:
          type: boolean
          description: 'Whether to use the legacy username generation. To use this option, legacy username mode must be enabled for the Account'
          default: false
      example:
        deviceConfiguration:
          type: deviceConfiguration
          configuration:
            - id: org.eclipse.kura.wire.graph.WireGraphService
              properties:
                property:
                  - name: WireGraph
                    array: false
                    encrypted: false
                    type: String
                    value:
                      - '{"components":[{"pid":"asset1","inputPortCount":1,"outputPortCount":1,"renderingProperties":{"position":{"x":-580,"y":-120},"inputPortNames":{},"outputPortNames":{}}},{"pid":"asset2","inputPortCount":1,"outputPortCount":1,"renderingProperties":{"position":{"x":-1100,"y":-100},"inputPortNames":{},"outputPortNames":{}}}],"wires":[]}'
                  - name: kura.service.pid
                    array: false
                    encrypted: false
                    type: String
                    value:
                      - org.eclipse.kura.wire.graph.WireGraphService
                  - name: service.pid
                    array: false
                    encrypted: false
                    type: String
                    value:
                      - org.eclipse.kura.wire.graph.WireGraphService
        vpnAccess: true
        legacyMode: false
        legacyUsernameMode: false
    options:
      type: object
      description: Configurable options of the Provisioning Request
      properties:
        endpointInfoId:
          type: string
          description: The id of the EndpointInfo to be provisioned to the Device
          pattern: '[A-Za-z0-9-_=]+'
        activationOptions:
          $ref: '#/components/schemas/provisionRequestActivationOptions'
        connectionOptions:
          $ref: '#/components/schemas/provisionRequestConnectionOptions'
        extraOptions:
          $ref: '#/components/schemas/provisionRequestExtraOptions'
    provisionRequestProvisionOptions:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - $ref: '#/components/schemas/options'
    provisionRequest:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - type: object
          description: Contains all information for a Device Provisioning
          properties:
            clientId:
              type: string
              description: The Client Id of the Device that will perform the Device Provisioning process
            authenticationType:
              $ref: '#/components/schemas/provisionRequestAuthenticationType'
            username:
              type: string
              description: The username that the Device will use to connect to the Device Provisioning Endpoint
            userId:
              type: string
              description: The User Id of the User in the Device Provisioning Account
              pattern: '[A-Za-z0-9-_=]+'
            certificateDevId:
              type: string
              description: The Dev ID in the Certificate provided upon connect to the provisioning broker
            activationKey:
              description: The optional activation key. The Device must provide this value while sending a Device Provisioning Request Message.
              type: string
            executionStatus:
              $ref: '#/components/schemas/provisionRequestExecutionStatus'
            options:
              $ref: '#/components/schemas/options'
          example:
            type: provisioningRequest
            id: TGPP5eCWNxU
            scopeId: AQ
            createdOn: '2019-11-14T14:06:41.000Z'
            createdBy: AQ
            modifiedOn: '2019-11-14T14:06:41.000Z'
            modifiedBy: AQ
            optlock: 1
            clientId: qwe1234561
            authenticationType: USER_PASS
            executionStatus: CREATED
            userId: dk0UPhF8_JY
            username: prov-user
            options:
              endpointInfoId: du6W7iwPvi4
              activationOptions:
                status: ENABLED
                activatesOn: '2018-04-19T22:00:00Z'
                expiresOn: '2024-04-19T22:00:00Z'
              connectionOptions:
                reserveUser: true
                userCouplingMode: STRICT
                passwordLength: 40
              extraOptions:
                deviceConfiguration:
                  type: deviceConfiguration
                  configuration:
                    - id: org.eclipse.kura.wire.graph.WireGraphService
                      properties:
                        property:
                          - name: WireGraph
                            array: false
                            encrypted: false
                            type: String
                            value:
                              - '{"components":[{"pid":"asset1","inputPortCount":1,"outputPortCount":1,"renderingProperties":{"position":{"x":-580,"y":-120},"inputPortNames":{},"outputPortNames":{}}},{"pid":"asset2","inputPortCount":1,"outputPortCount":1,"renderingProperties":{"position":{"x":-1100,"y":-100},"inputPortNames":{},"outputPortNames":{}}}],"wires":[]}'
                          - name: kura.service.pid
                            array: false
                            encrypted: false
                            type: String
                            value:
                              - org.eclipse.kura.wire.graph.WireGraphService
                          - name: service.pid
                            array: false
                            encrypted: false
                            type: String
                            value:
                              - org.eclipse.kura.wire.graph.WireGraphService
                vpnAccess: true
    provisionRequestCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaEntityCreator'
        - type: object
          description: Contains all information to create a Provision Request
          properties:
            clientId:
              type: string
              description: The Client Id of the Device that will perform the Device Provisioning process
            authenticationType:
              $ref: '#/components/schemas/provisionRequestAuthenticationType'
            username:
              type: string
              description: The username that the Device will use to connect to the Device Provisioning Endpoint
            password:
              type: string
              description: The password that the Device will use to connect to the Device Provisioning Endpoint
            certificateDevId:
              type: string
              description: The Dev ID in the Certificate provided upon connect to the provisioning broker
            generateActivationKey:
              type: boolean
              description: Whether create a unique random key that the Device must provide this value while sending a Device Provisioning Request Message.
              default: false
            options:
              $ref: '#/components/schemas/options'
          required:
            - clientId
            - authenticationType
            - username
            - options
          example:
            type: provisioningRequestCreator
            clientId: qwe1234561
            authenticationType: USER_PASS
            username: prov-user
            password: Passw0rd_12345
            generateActivationKey: false
            options:
              endpointInfoId: du6W7iwPvi4
              activationOptions:
                status: ENABLED
                activatesOn: '2018-04-19T22:00:00Z'
                expiresOn: '2024-04-19T22:00:00Z'
              connectionOptions:
                reserveUser: true
                userCouplingMode: STRICT
                passwordLength: 40
              extraOptions:
                deviceConfiguration:
                  type: deviceConfiguration
                  configuration:
                    - id: org.eclipse.kura.wire.graph.WireGraphService
                      properties:
                        property:
                          - name: WireGraph
                            array: false
                            encrypted: false
                            type: String
                            value:
                              - '{"components":[{"pid":"asset1","inputPortCount":1,"outputPortCount":1,"renderingProperties":{"position":{"x":-580,"y":-120},"inputPortNames":{},"outputPortNames":{}}},{"pid":"asset2","inputPortCount":1,"outputPortCount":1,"renderingProperties":{"position":{"x":-1100,"y":-100},"inputPortNames":{},"outputPortNames":{}}}],"wires":[]}'
                          - name: kura.service.pid
                            array: false
                            encrypted: false
                            type: String
                            value:
                              - org.eclipse.kura.wire.graph.WireGraphService
                          - name: service.pid
                            array: false
                            encrypted: false
                            type: String
                            value:
                              - org.eclipse.kura.wire.graph.WireGraphService
                vpnAccess: true
    provisionRequestListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          description: A list of ProvisionRequest
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/provisionRequest'
          example:
            type: provisioningRequestListResult
            limitExceeded: false
            size: 1
            items:
              - type: provisioningRequest
                id: TGPP5eCWNxU
                scopeId: AQ
                createdOn: '2019-11-14T14:06:41.000Z'
                createdBy: AQ
                modifiedOn: '2019-11-14T14:06:41.000Z'
                modifiedBy: AQ
                optlock: 1
                clientId: qwe1234561
                authenticationType: USER_PASS
                executionStatus: CREATED
                userId: dk0UPhF8_JY
                username: prov-user
                options:
                  endpointInfoId: du6W7iwPvi4
                  activationOptions:
                    status: ENABLED
                    activatesOn: '2018-04-19T22:00:00Z'
                    expiresOn: '2024-04-19T22:00:00Z'
                  connectionOptions:
                    reserveUser: true
                    userCouplingMode: STRICT
                    passwordLength: 40
                  extraOptions:
                    deviceConfiguration:
                      type: deviceConfiguration
                      configuration:
                        - id: org.eclipse.kura.wire.graph.WireGraphService
                          properties:
                            property:
                              - name: WireGraph
                                array: false
                                encrypted: false
                                type: String
                                value:
                                  - '{"components":[{"pid":"asset1","inputPortCount":1,"outputPortCount":1,"renderingProperties":{"position":{"x":-580,"y":-120},"inputPortNames":{},"outputPortNames":{}}},{"pid":"asset2","inputPortCount":1,"outputPortCount":1,"renderingProperties":{"position":{"x":-1100,"y":-100},"inputPortNames":{},"outputPortNames":{}}}],"wires":[]}'
                              - name: kura.service.pid
                                array: false
                                encrypted: false
                                type: String
                                value:
                                  - org.eclipse.kura.wire.graph.WireGraphService
                              - name: service.pid
                                array: false
                                encrypted: false
                                type: String
                                value:
                                  - org.eclipse.kura.wire.graph.WireGraphService
                    vpnAccess: true
    provisioningStopOptions:
      type: object
      description: The options to stop a RUNNING Provision Request
      properties:
        forced:
          type: boolean
          description: Whether to force stopping a Provision Request. Forcing requires admin permissions.
          default: false
    provisionRequestExecution:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - description: Contains all information of a Device Provisioning Execution
          type: object
          properties:
            startedOn:
              type: string
              description: When it started
              format: date-time
            endedOn:
              type: string
              description: When it finished
              format: date-time
            executionStatus:
              $ref: '#/components/schemas/provisionRequestExecutionStatus'
            log:
              type: string
              description: The log of the Device Provisioning Execution
            provisionRequestId:
              $ref: '#/components/schemas/kapuaId'
          example:
            type: provisionExecution
            id: J9r3A_SXAf8
            scopeId: AQ
            createdOn: '2023-01-17T15:26:21.692Z'
            createdBy: AQ
            modifiedOn: '2023-01-17T15:26:22.725Z'
            modifiedBy: AQ
            optlock: 0
            startedOn: '2023-01-17T15:26:21.156Z'
            endedOn: '2023-01-17T15:26:22.724Z'
            executionStatus: COMPLETED
            log: The job execution has run successfully
            provisionRequestId: TGPP5eCWNxU
    provisionRequestExecutionListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          description: A list of Provision Execution
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/provisionRequestExecution'
          example:
            type: provisionExecutionListResult
            limitExceeded: false
            size: 1
            items:
              - id: J9r3A_SXAf8
                scopeId: AQ
                createdOn: '2023-01-17T15:26:21.692Z'
                createdBy: AQ
                modifiedOn: '2023-01-17T15:26:22.725Z'
                modifiedBy: AQ
                optlock: 2
                startedOn: '2023-01-17T15:26:21.156Z'
                endedOn: '2023-01-17T15:26:22.724Z'
                executionStatus: COMPLETED
                log: The job execution has run successfully
                provisionRequestId: TGPP5eCWNxU
    routeParameter:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    route:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - $ref: '#/components/schemas/routeCreator'
        - description: An object that holds all the informations pertaining a Route
          externalDocs:
            url: 'https://ec.eurotech.com/docs/routes-getting-started'
          example:
            type: route
            id: Is5bJq6qg9U
            scopeId: AQ
            createdOn: '2020-07-06T12:17:02.193Z'
            createdBy: AQ
            modifiedOn: '2020-07-06T12:17:02.193Z'
            modifiedBy: AQ
            optlock: 1
            name: new_route
            templateId: kafka-v1
            parameters:
              - name: REDELIVERY_DELAY
                value: '20'
              - name: MAXIMUM_REDELIVERIES
                value: '5'
              - name: MAXIMUM_REDELIVERY_DELAY
                value: '2000'
              - name: KAFKA_BROKERS
                value: 'localhost:9092'
              - name: KAFKA_HEADER_PROPERTY
                value: evaluatedKafkaEndPoint
              - name: KAFKA_ORIGINAL_TOPIC
                value: '$simple{in.header.originalTopic}'
              - name: KAFKA_MESSAGE_CONVERTER
                value: none
              - name: KAFKA_MESSAGE_CONVERTER_CONFIGURATION
                value: none
              - name: KAFKA_KEY_SERIALIZER
                value: org.apache.kafka.common.serialization.StringSerializer
              - name: KAFKA_SERIALIZER
                value: org.apache.kafka.common.serialization.StringSerializer
              - name: KAFKA_URL_OPTIONS
                value: ''
              - name: KAFKA_TOPIC_MATCHING
                value: '.*,${ACCOUNT_NAME}'
            forwardable: true
            status: ENABLED
    routeCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntityCreator'
        - type: object
          description: An object with all the information needed to create a new Route
          externalDocs:
            url: 'https://ec.eurotech.com/docs/routes-getting-started'
          properties:
            templateId:
              description: The ID of the Template of this Route
              type: string
              enum:
                - kafka-v1
                - rest-http4-v1
                - amqp-v1
                - jms-v1
            forwardable:
              description: A flag indicating whether this Route is forwarded to children accounts or not
              type: boolean
            status:
              description: The status of this Route. Can be ENABLED or DISABLED.
              type: string
              enum:
                - ENABLED
                - DISABLED
            parameters:
              type: array
              items:
                $ref: '#/components/schemas/routeParameter'
          required:
            - name
            - templateId
          example:
            type: routeCreator
            name: new_route
            templateId: kafka-v1
            parameters:
              - name: REDELIVERY_DELAY
                value: '20'
              - name: MAXIMUM_REDELIVERIES
                value: '5'
              - name: MAXIMUM_REDELIVERY_DELAY
                value: '2000'
              - name: KAFKA_BROKERS
                value: 'localhost:9092'
              - name: KAFKA_HEADER_PROPERTY
                value: evaluatedKafkaEndPoint
              - name: KAFKA_ORIGINAL_TOPIC
                value: '$simple{in.header.originalTopic}'
              - name: KAFKA_MESSAGE_CONVERTER
                value: none
              - name: KAFKA_MESSAGE_CONVERTER_CONFIGURATION
                value: none
              - name: KAFKA_KEY_SERIALIZER
                value: org.apache.kafka.common.serialization.StringSerializer
              - name: KAFKA_SERIALIZER
                value: org.apache.kafka.common.serialization.StringSerializer
              - name: KAFKA_URL_OPTIONS
                value: ''
              - name: KAFKA_TOPIC_MATCHING
                value: '.*,${ACCOUNT_NAME}'
            forwardable: true
            status: ENABLED
    routeListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - description: A list container for Route objects
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/route'
      example:
        type: routeListResult
        limitExceeded: false
        size: 2
        items:
          - type: route
            id: biuExZxObL8
            scopeId: AQ
            createdOn: '2020-07-07T14:42:50.741Z'
            createdBy: AQ
            modifiedOn: '2020-07-07T14:42:50.741Z'
            modifiedBy: AQ
            optlock: 1
            name: kafka_route
            templateId: kafka-v1
            parameters:
              - name: REDELIVERY_DELAY
                value: '20'
              - name: MAXIMUM_REDELIVERIES
                value: '5'
              - name: MAXIMUM_REDELIVERY_DELAY
                value: '2000'
              - name: KAFKA_BROKERS
                value: 'localhost:9092'
              - name: KAFKA_HEADER_PROPERTY
                value: evaluatedKafkaEndPoint
              - name: KAFKA_ORIGINAL_TOPIC
                value: '$simple{in.header.originalTopic}'
              - name: KAFKA_MESSAGE_CONVERTER
                value: none
              - name: KAFKA_MESSAGE_CONVERTER_CONFIGURATION
                value: none
              - name: KAFKA_KEY_SERIALIZER
                value: org.apache.kafka.common.serialization.StringSerializer
              - name: KAFKA_SERIALIZER
                value: org.apache.kafka.common.serialization.StringSerializer
              - name: KAFKA_URL_OPTIONS
                value: ''
              - name: KAFKA_TOPIC_MATCHING
                value: '.*,${ACCOUNT_NAME}'
            forwardable: true
            status: ENABLED
          - type: route
            id: TdJaTgL9Wwk
            scopeId: AQ
            createdOn: '2020-07-07T15:41:42.814Z'
            createdBy: AQ
            modifiedOn: '2020-07-07T15:41:42.814Z'
            modifiedBy: AQ
            optlock: 1
            name: rest_route
            templateId: rest-http4-v1
            parameters:
              - name: REDELIVERY_DELAY
                value: '20'
              - name: MAXIMUM_REDELIVERIES
                value: '5'
              - name: MAXIMUM_REDELIVERY_DELAY
                value: '2000'
              - name: REST_SERVER_NAME
                value: 127.0.0.1
              - name: REST_SERVER_PORT
                value: '8080'
              - name: REST_SCHEMA
                value: https
              - name: REST_AUTHENTICATION_TYPE
                value: Basic
              - name: REST_AUTHENTICATION_PARAMETERS
              - name: REST_ACTION
                value: POST
              - name: REST_HEADER_PROPERTY
                value: evaluatedRestEndPoint
              - name: REST_ORIGINAL_TOPIC
                value: '$simple{in.header.originalTopic}'
              - name: REST_MESSAGE_CONVERTER
                value: json
              - name: REST_MESSAGE_CONVERTER_CONFIGURATION
              - name: REST_URL_OPTIONS
              - name: REST_TOPIC_MATCHING
                value: '.*,${ACCOUNT}'
              - name: REST_SSL_KEYSTORE_KEY
              - name: REST_SSL_KEYSTORE_PASSWORD
              - name: REST_SSL_KEYSTORE_CERT
              - name: REST_SSL_TRUSTSTORE_CERT
            forwardable: false
            status: ENABLED
    routeTemplateParameter:
      type: object
      description: An object describing a single Route Template Parameter
      properties:
        name:
          type: string
        type:
          type: string
          enum:
            - Int
            - String
            - masked
            - TextArea
        defaultValue:
          type: string
    routeTemplate:
      description: An object defining a Route Template
      properties:
        name:
          type: string
        routeTemplateParameters:
          type: array
          items:
            $ref: '#/components/schemas/routeTemplateParameter'
      example:
        type: routeTemplate
        name: kafka-v1
        routeTemplateParameters:
          - name: REDELIVERY_DELAY
            type: String
            defaultValue: '20'
          - name: MAXIMUM_REDELIVERIES
            type: String
            defaultValue: '5'
          - name: MAXIMUM_REDELIVERY_DELAY
            type: String
            defaultValue: '2000'
          - name: KAFKA_BROKERS
            type: String
            defaultValue: 'localhost:9092'
          - name: KAFKA_HEADER_PROPERTY
            type: String
            defaultValue: evaluatedKafkaEndPoint
          - name: KAFKA_ORIGINAL_TOPIC
            type: String
            defaultValue: '$simple{in.header.originalTopic}'
          - name: KAFKA_MESSAGE_CONVERTER
            type: String
            defaultValue: none
          - name: KAFKA_MESSAGE_CONVERTER_CONFIGURATION
            value: none
            defaultValue: none
          - name: KAFKA_KEY_SERIALIZER
            type: String
            defaultValue: org.apache.kafka.common.serialization.StringSerializer
          - name: KAFKA_SERIALIZER
            type: String
            defaultValue: org.apache.kafka.common.serialization.StringSerializer
          - name: KAFKA_URL_OPTIONS
            type: String
            defaultValue: ''
          - name: KAFKA_TOPIC_MATCHING
            type: TextArea
            defaultValue: '.*,${ACCOUNT_NAME}'
    routeTemplateListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - description: A list container for RouteTemplate objects
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/routeTemplate'
      example:
        type: routeTemplateListResult
        limitExceeded: false
        size: 2
        items:
          - type: routeTemplate
            name: kafka-v1
            routeTemplateParameters:
              - name: REDELIVERY_DELAY
                type: String
                defaultValue: '20'
              - name: MAXIMUM_REDELIVERIES
                type: String
                defaultValue: '5'
              - name: MAXIMUM_REDELIVERY_DELAY
                type: String
                defaultValue: '2000'
              - name: KAFKA_BROKERS
                type: String
                defaultValue: 'localhost:9092'
              - name: KAFKA_HEADER_PROPERTY
                type: String
                defaultValue: evaluatedKafkaEndPoint
              - name: KAFKA_ORIGINAL_TOPIC
                type: String
                defaultValue: '$simple{in.header.originalTopic}'
              - name: KAFKA_MESSAGE_CONVERTER
                type: String
                defaultValue: none
              - name: KAFKA_MESSAGE_CONVERTER_CONFIGURATION
                type: String
                defaultValue: none
              - name: KAFKA_KEY_SERIALIZER
                type: String
                defaultValue: org.apache.kafka.common.serialization.StringSerializer
              - name: KAFKA_SERIALIZER
                type: String
                defaultValue: org.apache.kafka.common.serialization.StringSerializer
              - name: KAFKA_URL_OPTIONS
                type: String
                defaultValue: ''
              - name: KAFKA_TOPIC_MATCHING
                type: TextArea
                defaultValue: '.*,${ACCOUNT_NAME}'
          - type: routeTemplate
            name: rest-http4-v1
            routeTemplateParameters:
              - name: REDELIVERY_DELAY
                type: String
                defaultValue: '20'
              - name: MAXIMUM_REDELIVERIES
                type: String
                defaultValue: '5'
              - name: MAXIMUM_REDELIVERY_DELAY
                type: String
                defaultValue: '2000'
              - name: REST_SERVER_NAME
                type: String
                defaultValue: 127.0.0.1
              - name: REST_SERVER_PORT
                type: String
                defaultValue: '8080'
              - name: REST_SCHEMA
                type: String
                defaultValue: https
              - name: REST_AUTHENTICATION_TYPE
                type: String
                defaultValue: Basic
              - name: REST_AUTHENTICATION_PARAMETERS
                type: masked
                defaultValue: ''
              - name: REST_ACTION
                type: String
                defaultValue: POST
              - name: REST_HEADER_PROPERTY
                type: String
                defaultValue: evaluatedRestEndPoint
              - name: REST_ORIGINAL_TOPIC
                type: String
                defaultValue: '$simple{in.header.originalTopic}'
              - name: REST_MESSAGE_CONVERTER
                type: String
                defaultValue: json
              - name: REST_MESSAGE_CONVERTER_CONFIGURATION
                type: TextArea
                defaultValue: ''
              - name: REST_URL_OPTIONS
                type: String
                defaultValue: ''
              - name: REST_TOPIC_MATCHING
                type: TextArea
                defaultValue: '.*,${ACCOUNT}'
              - name: REST_SSL_KEYSTORE_KEY
                type: TextArea
                defaultValue: ''
              - name: REST_SSL_KEYSTORE_PASSWORD
                type: TextArea
                defaultValue: ''
              - name: REST_SSL_KEYSTORE_CERT
                type: TextArea
                defaultValue: ''
              - name: REST_SSL_TRUSTSTORE_CERT
                type: TextArea
                defaultValue: ''
    vpnConfiguration:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - description: An object containing all the information for a single VPN Configuration
          type: object
          properties:
            configurationFile:
              description: The OpenVPN Configuration File to be sent to the device before connecting. Please make reference to the OpenVPN documentation
              type: string
            minVersion:
              description: The minimum OpenVPN version string to apply this configuration
              type: string
              pattern: '^[\d]{1,4}\.[\d]{1,4}\.[\d]{1,4}$'
            maxVersion:
              description: The maximum OpenVPN version string to apply this configuration
              type: string
              pattern: '^[\d]{1,4}\.[\d]{1,4}\.[\d]{1,4}$'
            redirectAllTraffic:
              description: 'If true, all the traffic from the client connected to the VPN Server will be redirected through the VPN interface'
              type: boolean
            vpnServerId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the Server to apply this configuration to
          required:
            - configurationFile
            - redirectAllTraffic
            - vpnServerId
      example:
        type: vpnConfiguration
        id: EYGcBuqvphg
        scopeId: AQ
        createdOn: '2020-01-30T16:27:07.000Z'
        createdBy: AQ
        modifiedOn: '2020-01-31T11:41:46.000Z'
        modifiedBy: AQ
        optlock: 3
        name: Default_Config
        configurationFile: |
          # Sample OpenVPN config file for client
          client

          port 1194
          proto tcp
          dev tun

          ca ca.crt
          cert server.crt
          key server.KEY
          dh dh2048.pem
          server 10.8.0.0 255.255.255.0

          keepalive 10 120

          tls-auth ta.key 0 # This file is secret
          cipher AES-256-CBC

          persist-key
          persist-tun

          status openvpn-status.log

          verb 3

          explicit-exit-notify 1
        minVersion: 2.3.0
        maxVersion: 2.4.0
        redirectAllTraffic: true
        vpnServerId: TVENSKi11-4
    vpnConfigurationCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntityCreator'
        - type: object
          properties:
            configurationFile:
              description: The OpenVPN Configuration File to be sent to the device before connecting
              type: string
            minVersion:
              description: The minimum OpenVPN version string to apply this configuration
              type: string
              pattern: '^[\d]{1,4}\.[\d]{1,4}\.[\d]{1,4}$'
            maxVersion:
              description: The maximum OpenVPN version string to apply this configuration
              type: string
              pattern: '^[\d]{1,4}\.[\d]{1,4}\.[\d]{1,4}$'
            redirectAllTraffic:
              description: 'If true, all the traffic from the client connected to the VPN Server will be redirected through the VPN interface'
              type: boolean
            vpnServerId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the Server to apply this configuration to
          required:
            - configurationFile
            - redirectAllTraffic
            - vpnServerId
      example:
        type: vpnConfigurationCreator
        name: Default_Config
        configurationFile: |
          # Sample OpenVPN config file for client
          client

          port 1194
          proto tcp
          dev tun

          ca ca.crt
          cert server.crt
          key server.KEY
          dh dh2048.pem
          server 10.8.0.0 255.255.255.0

          keepalive 10 120

          tls-auth ta.key 0 # This file is secret
          cipher AES-256-CBC

          persist-key
          persist-tun

          status openvpn-status.log

          verb 3

          explicit-exit-notify 1
        minVersion: 2.3.0
        maxVersion: 2.4.0
        redirectAllTraffic: true
        vpnServerId: TVENSKi11-4
    vpnConfigurationListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/vpnConfiguration'
      example:
        type: vpnConfigurationListResult
        limitExceeded: false
        size: 1
        items:
          - type: vpnConfiguration
            id: XRgeNwHY2IE
            scopeId: AQ
            createdOn: '2020-01-31T15:41:43.000Z'
            createdBy: AQ
            modifiedOn: '2020-01-31T15:41:43.000Z'
            modifiedBy: AQ
            optlock: 1
            name: Default_Config
            configurationFile: |
              # Sample OpenVPN config file for client
              client

              port 1194
              proto tcp
              dev tun

              ca ca.crt
              cert server.crt
              key server.KEY
              dh dh2048.pem
              server 10.8.0.0 255.255.255.0

              keepalive 10 120

              tls-auth ta.key 0 # This file is secret
              cipher AES-256-CBC

              persist-key
              persist-tun

              status openvpn-status.log

              verb 3

              explicit-exit-notify 1
            minVersion: 2.3.0
            maxVersion: 2.4.0
            redirectAllTraffic: true
            vpnServerId: PWGG8-qIT38
    vpnConnection:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - type: object
          properties:
            inetAddress:
              type: string
              format: ipAddress
            userId:
              type: string
              pattern: '[A-Za-z0-9-_=]+'
            deviceId:
              type: string
              pattern: '[A-Za-z0-9-_=]+'
            vpnServerId:
              type: string
              pattern: '[A-Za-z0-9-_=]+'
    vpnConnectionListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - description: A list container for VPN Connection objects
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/vpnConnection'
    vpnRegistry:
      allOf:
        - $ref: '#/components/schemas/kapuaNamedEntity'
        - description: An object containing all the information for a single VPN Registry
          type: object
          properties:
            accountId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the Account to be linked to the VPN Server
            vpnServerId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the VPN Server to be linked to the Account
      example:
        type: vpnRegistry
        id: Xfjs4rBxF_E
        scopeId: AQ
        createdOn: '2020-01-31T09:08:19.000Z'
        createdBy: AQ
        modifiedOn: '2020-01-31T09:08:19.000Z'
        modifiedBy: AQ
        optlock: 1
        vpnServerId: PWGG8-qIT38
        accountId: AQ
    vpnRegistryCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntityCreator'
        - type: object
          properties:
            accountId:
              allOf:
                - $ref: '#/components/schemas/kapuaId'
                - description: The ID of the Account to be linked to the VPN Server
      example:
        type: vpnRegistryCreator
        accountId: AQ
    vpnRegistryListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/vpnRegistry'
      example:
        type: vpnRegistryListResult
        limitExceeded: false
        size: 1
        items:
          - type: vpnRegistry
            id: Xfjs4rBxF_E
            scopeId: AQ
            createdOn: '2020-01-31T09:08:19.000Z'
            createdBy: AQ
            modifiedOn: '2020-01-31T09:08:19.000Z'
            modifiedBy: AQ
            optlock: 1
            vpnServerId: PWGG8-qIT38
            accountId: AQ
    vpnServer:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntity'
        - description: An object containing all the information for a single VPN Server
          type: object
          properties:
            name:
              type: string
            host:
              type: string
            port:
              type: integer
      example:
        type: vpnServer
        id: PWGG8-qIT38
        scopeId: AQ
        createdOn: '2020-01-29T15:28:28.000Z'
        createdBy: AQ
        modifiedOn: '2020-01-29T15:28:28.000Z'
        modifiedBy: AQ
        optlock: 1
        name: new_vpn_server
        host: vpn.test.io
        port: 11959
    vpnServerCreator:
      allOf:
        - $ref: '#/components/schemas/kapuaUpdatableEntityCreator'
        - type: object
          properties:
            name:
              type: string
            host:
              type: string
            port:
              type: integer
          example:
            name: VPN_Server_1
            host: vpn.server.io
            port: 1194
    vpnServerListResult:
      allOf:
        - $ref: '#/components/schemas/kapuaListResult'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/vpnServer'
      example:
        type: vpnServerListResult
        limitExceeded: false
        size: 2
        items:
          - type: vpnServer
            id: PWGG8-qIT38
            scopeId: AQ
            createdOn: '2020-01-29T15:28:28.000Z'
            createdBy: AQ
            modifiedOn: '2020-01-29T15:28:28.000Z'
            modifiedBy: AQ
            optlock: 1
            name: new_vpn_server
            host: vpn.test.io
            port: 11959
          - type: vpnServer
            id: TVENSKi11-4
            scopeId: AQ
            createdOn: '2020-01-30T16:32:44.000Z'
            createdBy: AQ
            modifiedOn: '2020-01-30T16:32:44.000Z'
            modifiedBy: AQ
            optlock: 1
            name: test2
            host: test2.vpn.io
            port: 1111
  requestBodies:
    kapuaQuery:
      description: An object to specify Query options
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/kapuaQuery'
      required: true
  responses:
    countResult:
      description: The count of the available Entities
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/kapuaCountResult'
    kapuaError:
      description: An internal error occurred while performing the request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exceptionInfo'
        application/xml:
          schema:
            $ref: '#/components/schemas/exceptionInfo'
    entityNotFound:
      description: The desired entity could not be found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/entityNotFoundExceptionInfo'
        application/xml:
          schema:
            $ref: '#/components/schemas/entityNotFoundExceptionInfo'
    illegalArgument:
      description: An illegal argument has been passed to the operation
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/illegalArgumentExceptionInfo'
              - $ref: '#/components/schemas/illegalNullArgumentExceptionInfo'
        application/xml:
          schema:
            oneOf:
              - $ref: '#/components/schemas/illegalArgumentExceptionInfo'
              - $ref: '#/components/schemas/illegalNullArgumentExceptionInfo'
            xml:
              name: illegalArgumentExceptionInfo
    subjectUnauthorized:
      description: The user performing the operation does not have the required permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/subjectUnauthorizedExceptionInfo'
        application/xml:
          schema:
            $ref: '#/components/schemas/subjectUnauthorizedExceptionInfo'
    unauthenticated:
      description: 'The authentication failed for some reason. If this was done via an Access Token, it could be expired or invalidated'
    entityUniqueness:
      description: An Entity with the same unique fields is already present in the system
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/entityUniquenessExceptionInfo'
        application/xml:
          schema:
            $ref: '#/components/schemas/entityUniquenessExceptionInfo'
    conflictDeviceNotConnected:
      description: A conflict in the request - the device is disconnected and the request cannot be accomplished
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeviceNotConnectedExceptionInfo'
        application/xml:
          schema:
            $ref: '#/components/schemas/DeviceNotConnectedExceptionInfo'
  securitySchemes:
    kapuaToken:
      description: 'The default AccessToken Security Scheme. A [JWT](https://jwt.io) is used to represent the claims of a user'
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - kapuaToken: []
x-explorer-enabled: false
x-samples-languages:
  - java
  - python
  - node
  - javascript
  - ruby
  - curl